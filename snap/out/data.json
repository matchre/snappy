{
    "project": {},
    "files": {
        "blocks.js": {
            "name": "blocks.js",
            "modules": {},
            "classes": {
                "SyntaxElementMorph": 1,
                "BlockMorph": 1,
                "CommandBlockMorph": 1,
                "HatBlockMorph": 1,
                "ReporterBlockMorph": 1,
                "RingMorph": 1,
                "ScriptsMorph": 1,
                "ArgMorph": 1,
                "CommandSlotMorph": 1,
                "RingCommandSlotMorph": 1,
                "CSlotMorph": 1,
                "InputSlotMorph": 1,
                "TemplateSlotMorph": 1,
                "BooleanSlotMorph": 1,
                "ArrowMorph": 1,
                "TextSlotMorph": 1,
                "SymbolMorph": 1,
                "ColorSlotMorph": 1,
                "BlockHighlightMorph": 1,
                "MultiArgMorph": 1,
                "ArgLabelMorph": 1,
                "FunctionSlotMorph": 1,
                "ReporterSlotMorph": 1,
                "RingReporterSlotMorph": 1,
                "CommentMorph": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "byob.js": {
            "name": "byob.js",
            "modules": {},
            "classes": {
                "CustomBlockDefinition": 1,
                "CustomCommandBlockMorph": 1,
                "CustomReporterBlockMorph": 1,
                "JaggedBlockMorph": 1,
                "BlockDialogMorph": 1,
                "BlockEditorMorph": 1,
                "PrototypeHatBlockMorph": 1,
                "BlockLabelFragment": 1,
                "BlockLabelFragmentMorph": 1,
                "BlockLabelPlaceHolderMorph": 1,
                "BlockInputFragmentMorph": 1,
                "InputSlotDialogMorph": 1,
                "VariableDialogMorph": 1,
                "BlockExportDialogMorph": 1,
                "BlockImportDialogMorph": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gui.js": {
            "name": "gui.js",
            "modules": {},
            "classes": {
                "IDE_Morph": 1,
                "ProjectDialogMorph": 1,
                "MyClass": 1,
                "CostumeIconMorph": 1,
                "TurtleIconMorph": 1,
                "WardrobeMorph": 1,
                "SoundIconMorph": 1,
                "JukeboxMorph": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lists.js": {
            "name": "lists.js",
            "modules": {},
            "classes": {
                "List": 1,
                "ListWatcherMorph": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "morphic.js": {
            "name": "morphic.js",
            "modules": {},
            "classes": {
                "Color": 1,
                "Point": 1,
                "Rectangle": 1,
                "Node": 1,
                "ShadowMorph": 1,
                "HandleMorph": 1,
                "PenMorph": 1,
                "ColorPaletteMorph": 1,
                "GrayPaletteMorph": 1,
                "ColorPickerMorph": 1,
                "BlinkerMorph": 1,
                "CursorMorph": 1,
                "BoxMorph": 1,
                "SpeechBubbleMorph": 1,
                "CircleBoxMorph": 1,
                "SliderButtonMorph": 1,
                "SliderMorph": 1,
                "MouseSensorMorph": 1,
                "InspectorMorph": 1,
                "MenuMorph": 1,
                "StringMorph": 1,
                "TextMorph": 1,
                "TriggerMorph": 1,
                "MenuItemMorph": 1,
                "FrameMorph": 1,
                "ScrollFrameMorph": 1,
                "ListMorph": 1,
                "StringFieldMorph": 1,
                "BouncerMorph": 1,
                "HandMorph": 1,
                "WorldMorph": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "objects.js": {
            "name": "objects.js",
            "modules": {},
            "classes": {
                "SpriteMorph": 1,
                "SpriteHighlightMorph": 1,
                "StageMorph": 1,
                "SpriteBubbleMorph": 1,
                "Costume": 1,
                "SVG_Costume": 1,
                "CostumeEditorMorph": 1,
                "Sound": 1,
                "Note": 1,
                "CellMorph": 1,
                "WatcherMorph": 1,
                "StagePrompterMorph": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "paint.js": {
            "name": "paint.js",
            "modules": {},
            "classes": {
                "PaintEditorMorph": 1,
                "PaintCanvasMorph": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "store.js": {
            "name": "store.js",
            "modules": {},
            "classes": {
                "XML_Serializer": 1,
                "SnapSerializer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "threads.js": {
            "name": "threads.js",
            "modules": {},
            "classes": {
                "ThreadManager": 1,
                "Process": 1,
                "Context": 1,
                "VariableFrame": 1,
                "UpvarReference": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "widgets.js": {
            "name": "widgets.js",
            "modules": {},
            "classes": {
                "PushButtonMorph": 1,
                "ToggleButtonMorph": 1,
                "TabMorph": 1,
                "ToggleMorph": 1,
                "ToggleElementMorph": 1,
                "DialogBoxMorph": 1,
                "AlignmentMorph": 1,
                "InputFieldMorph": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "xml.js": {
            "name": "xml.js",
            "modules": {},
            "classes": {
                "ReadStream": 1,
                "XML_Element": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "SyntaxElementMorph": {
            "name": "SyntaxElementMorph",
            "shortname": "SyntaxElementMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 237,
            "description": "I am the ancestor of all blocks and input slots. SyntaxElementMorph inherits from Morph:\nSyntaxElementMorph preferences settings:\n\n   the following settings govern the appearance of all syntax elements\n   (blocks and slots) where applicable:\n\n   outline:\n\n       corner        - radius of command block rounding\n       rounding    - radius of reporter block rounding\n       edge        - width of 3D-ish shading box\n       hatHeight    - additional top space for hat blocks\n       hatWidth    - minimum width for hat blocks\n       rfBorder    - pixel width of reification border (grey outline)\n       minWidth    - minimum width for any syntax element's contents\n\n   jigsaw shape:\n\n       inset        - distance from indentation to left edge\n       dent        - width of indentation bottom\n\n   paddings:\n\n       bottomPadding    - adds to the width of the bottom most c-slot\n       cSlotPadding    - adds to the width of the open \"C\" in c-slots\n       typeInPadding    - adds pixels between text and edge in input slots\n       labelPadding    - adds left/right pixels to block labels\n\n   label:\n\n       labelFontName    - <string> specific font family name\n       labelFontStyle    - <string> generic font family name, cascaded\n       fontSize        - duh\n       embossing        - <Point> offset for embossing effect\n       labelWidth        - column width, used for word wrapping\n       labelWordWrap    - <bool> if true labels can break after each word\n       dynamicInputLabels - <bool> if true inputs can have dynamic labels\n\n   snapping:\n\n       feedbackColor        - <Color> for displaying drop feedbacks\n       feedbackMinHeight    - height of white line for command block snaps\n       minSnapDistance        - threshold when commands start snapping\n       reporterDropFeedbackPadding    - increases reporter drop feedback\n\n   color gradients:\n\n       contrast        - <percent int> 3D-ish shading gradient contrast\n       labelContrast    - <percent int> 3D-ish label shading contrast\n       activeHighlight    - <Color> for stack highlighting when active\n       errorHighlight    - <Color> for error highlighting\n       activeBlur        - <pixels int> shadow for blurred activeHighlight\n       activeBorder    - <pixels int> unblurred activeHighlight\n       rfColor            - <Color> for reified outlines and slot backgrounds",
            "is_constructor": 1
        },
        "BlockMorph": {
            "name": "BlockMorph",
            "shortname": "BlockMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 1728,
            "description": "I am an abstraction of all blocks (commands, reporters, hats).\n\n  Aside from the visual settings inherited from Morph and\n  SyntaxElementMorph my most important attributes and public\n  accessors are:\n\n      selector    - (string) name of method to be triggered\n      receiver()    - answer the object (sprite) to which I apply\n      inputs()    - answer an array with my arg slots and nested reporters\n      defaults    - an optional Array containing default input values\n      topBlock()    - answer the top block of the stack I'm attached to\n      blockSpec    - a formalized description of my label parts\n      setSpec()    - force me to change my label structure\n      evaluate()    - answer the result of my evaluation\n      isUnevaluated() - answer whether I am part of a special form\n\n  Zebra coloring provides a mechanism to alternate brightness of nested,\n  same colored blocks (of the same category). The deviation of alternating\n  brightness is set in the preferences setting:\n\n  zebraContrast - <number> percentage of brightness deviation\n\n  attribute. If the attribute is set to zero, zebra coloring is turned\n  off. If it is a positive number, nested blocks will be colored in\n  a brighter shade of the same hue and the label color (for texts)\n  alternates between white and black. If the attribute is set to a negative\n  number, nested blocks are colored in a darker shade of the same hue\n  with no alternating label colors.\n\n  Note: Some of these methods are inherited from SyntaxElementMorph\n  for technical reasons, because they are shared among Block and\n  MultiArgMorph (e.g. topBlock()).\n\n  blockSpec is a formatted string consisting of plain words and\n  reserved words starting with the percent character (%), which\n  represent the following pre-defined input slots and/or label\n  features:\n\n  arity: single\n\n      %br        - user-forced line break\n      %s        - white rectangular type-in slot (\"string-type\")\n      %txt    - white rectangular type-in slot (\"text-type\")\n      %mlt    - white rectangular type-in slot (\"multi-line-text-type\")\n      %code    - white rectangular type-in slot, monospaced font\n      %n        - white roundish type-in slot (\"numerical\")\n      %dir    - white roundish type-in slot with drop-down for directions\n      %inst    - white roundish type-in slot with drop-down for instruments\n      %ida    - white roundish type-in slot with drop-down for list indices\n      %idx    - white roundish type-in slot for indices incl. \"any\"\n      %obj    - specially drawn slot for object reporters\n      %spr    - chameleon colored rectangular drop-down for object-names\n      %col    - chameleon colored rectangular drop-down for collidables\n      %dst    - chameleon colored rectangular drop-down for distances\n      %cst    - chameleon colored rectangular drop-down for costume-names\n      %eff    - chameleon colored rectangular drop-down for graphic effects\n      %snd    - chameleon colored rectangular drop-down for sound names\n      %key    - chameleon colored rectangular drop-down for keyboard keys\n      %msg    - chameleon colored rectangular drop-down for messages\n      %att    - chameleon colored rectangular drop-down for attributes\n      %fun    - chameleon colored rectangular drop-down for math functions\n      %typ    - chameleon colored rectangular drop-down for data types\n      %var - chameleon colored rectangular drop-down for variable names\n      %lst    - chameleon colored rectangular drop-down for list names\n      %b        - chameleon colored hexagonal slot (for predicates)\n      %l        - list icon\n      %c        - C-shaped command slot\n      %clr    - interactive color slot\n      %t        - inline variable reporter template\n      %anyUE    - white rectangular type-in slot, unevaluated if replaced\n      %boolUE    - chameleon colored hexagonal slot, unevaluated if replaced\n      %f        - round function slot, unevaluated if replaced,\n      %r        - round reporter slot\n      %p        - hexagonal predicate slot\n\n  rings:\n\n      %cmdRing    - command slotted ring with %ringparms\n      %repRing    - round slotted ringn with %ringparms\n      %predRing   - diamond slotted ring with %ringparms\n\n  arity: multiple\n\n      %mult%x    - where %x stands for any of the above single inputs\n      %inputs - for an additional text label 'with inputs'\n      %words - for an expandable list of default 2 (used in JOIN)\n      %exp - for a static expandable list of minimum 0 (used in LIST)\n      %scriptVars - for an expandable list of variable reporter templates\n      %parms - for an expandable list of formal parameters\n      %ringparms - the same for use inside Rings\n\n  special form: upvar\n\n      %upvar - same as %t (inline variable reporter template)\n\n  special form: input name\n\n      %inputName - variable blob (used in input type dialog)\n\n  examples:\n\n      'if %b %c else %c'        - creates Scratch's If/Else block\n      'set pen color to %clr'    - creates Scratch's Pen color block\n      'list %mult%s'            - creates BYOB's list reporter block\n      'call %n %inputs'        - creates BYOB's Call block\n      'the script %parms %c'    - creates BYOB's THE SCRIPT block",
            "is_constructor": 1
        },
        "CommandBlockMorph": {
            "name": "CommandBlockMorph",
            "shortname": "CommandBlockMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 3194,
            "description": "I am a stackable jigsaw-shaped block.\n\n   I inherit from BlockMorph adding the following most important\n   public accessors:\n\n       nextBlock()        - set / get the block attached to my bottom\n       bottomBlock()    - answer the bottom block of my stack\n       blockSequence()    - answer an array of blocks starting with myself",
            "is_constructor": 1
        },
        "HatBlockMorph": {
            "name": "HatBlockMorph",
            "shortname": "HatBlockMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 3846,
            "description": "I am a script's top most block. I can attach command blocks at my bottom, but not on top.",
            "is_constructor": 1
        },
        "ReporterBlockMorph": {
            "name": "ReporterBlockMorph",
            "shortname": "ReporterBlockMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 4030,
            "description": "I am a block with a return value, either round-ish or diamond shaped. I inherit all my important accessors from BlockMorph",
            "is_constructor": 1
        },
        "RingMorph": {
            "name": "RingMorph",
            "shortname": "RingMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 4541,
            "description": "I am a reporter block which reifies its contents, my outer shape is\n    always roundish (never diamond)",
            "is_constructor": 1
        },
        "ScriptsMorph": {
            "name": "ScriptsMorph",
            "shortname": "ScriptsMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 4679,
            "description": "I give feedback about possible drop targets and am in charge\n  of actually snapping blocks together.\n\n  My children are the top blocks of scripts.\n\n  I store a back-pointer to my owner, i.e. the object (sprite)\n  to whom my scripts apply.",
            "is_constructor": 1
        },
        "ArgMorph": {
            "name": "ArgMorph",
            "shortname": "ArgMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 5223,
            "description": "I am a syntax element and the ancestor of all block inputs.\n   I am present in block labels.\n   Usually I am just a receptacle for inherited methods and attributes,\n   however, if my 'type' attribute is set to one of the following\n   values, I act as an iconic slot myself:\n\n       'list'    - a list symbol",
            "is_constructor": 1
        },
        "CommandSlotMorph": {
            "name": "CommandSlotMorph",
            "shortname": "CommandSlotMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 5344,
            "description": "This is the description for CommandSlotMorphI am a CommandBlock-shaped input slot. I can nest command blocks\n   and also accept    reporters (containing reified scripts).\n\n   my most important accessor is\n\n       nestedBlock()    - answer the command block I encompass, if any\n\n       My command spec is %cmd\n\n       evaluate() returns my nested block or null",
            "is_constructor": 1
        },
        "RingCommandSlotMorph": {
            "name": "RingCommandSlotMorph",
            "shortname": "RingCommandSlotMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 5811,
            "description": "This is the description for RingCommandSlotMorph.I am a CommandBlock-shaped input slot for use in RingMorphs.\n   I can only nest command blocks, not reporters.\n\n       My command spec is %rc\n\n       evaluate() returns my nested block or null (inherited from CommandSlotMorph)",
            "is_constructor": 1
        },
        "CSlotMorph": {
            "name": "CSlotMorph",
            "shortname": "CSlotMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 5974,
            "description": "This is the description for CSlotMorph. I am a C-shaped input slot. I can nest command blocks and also accept\n   reporters (containing reified scripts).\n\n   my most important accessor is\n\n       nestedBlock()    - the command block I encompass, if any (inherited)\n\n       My command spec is %c\n\n       evaluate() returns my nested block or null",
            "is_constructor": 1
        },
        "InputSlotMorph": {
            "name": "InputSlotMorph",
            "shortname": "InputSlotMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 6398,
            "description": "I am an editable text input slot. I can be either rectangular or\n   rounded, and can have an optional drop-down menu. If I'm set to\n   read-only I must have a drop-down menu and will assume a darker\n   shade of my    parent's color.\n\n   my most important public attributes and accessors are:\n\n       setContents(str/float)    - display the argument (string or float)\n       contents().text            - get the displayed string\n       choices                    - a key/value list for my optional drop-down\n       isReadOnly                - governs whether I am editable or not\n       isNumeric                - governs my outer shape (round or rect)\n\n   my block specs are:\n\n       %s        - string input, rectangular\n       %n        - numerical input, semi-circular vertical edges\n       %anyUE    - any unevaluated\n\n   evaluate() returns my displayed string, cast to float if I'm numerical\n\n   there are also a number of specialized drop-down menu presets, refer\n   to BlockMorph for details.",
            "is_constructor": 1
        },
        "TemplateSlotMorph": {
            "name": "TemplateSlotMorph",
            "shortname": "TemplateSlotMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 7367,
            "description": "I am a reporter block template sitting on a pedestal.\n  My block spec is\n\n      %t        - template\n\n  evaluate returns the embedded reporter template's label string",
            "is_constructor": 1
        },
        "BooleanSlotMorph": {
            "name": "BooleanSlotMorph",
            "shortname": "BooleanSlotMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 7480,
            "description": "I am a diamond-shaped argument slot.\n    My block spec is:\n\n   %b        - Boolean\n\n   %boolUE    - Boolean unevaluated\n    \n    evaluate returns null",
            "is_constructor": 1
        },
        "ArrowMorph": {
            "name": "ArrowMorph",
            "shortname": "ArrowMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 7653,
            "description": "I am a triangular arrow shape, for use in drop-down menus etc.\n    My orientation is governed by my 'direction' property, which can be\n    'down', 'up', 'left' or 'right'.",
            "is_constructor": 1
        },
        "TextSlotMorph": {
            "name": "TextSlotMorph",
            "shortname": "TextSlotMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 7731,
            "description": "I am a multi-line input slot, primarily used in Snap's code-mapping\n   blocks.",
            "is_constructor": 1
        },
        "SymbolMorph": {
            "name": "SymbolMorph",
            "shortname": "SymbolMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 7815,
            "description": "I display graphical symbols, such as special letters. I have been\n   called into existence out of frustration about not being able to\n   consistently use Unicode characters to the same ends.\n\n   Symbols can also display costumes, if one is specified in lieu\n   of a name property, although this feature is currently not being\n   used because of asynchronous image loading issues.",
            "is_constructor": 1
        },
        "ColorSlotMorph": {
            "name": "ColorSlotMorph",
            "shortname": "ColorSlotMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 9137,
            "description": "I am an editable input slot for a color. Users can edit my color by\n    clicking on me, in which case a display a color gradient palette\n    and let the user select another color. Note that the user isn't\n    restricted to selecting a color from the palette, any color from\n    anywhere within the World can be chosen.\n\n    my block spec is %clr\n\n    evaluate() returns my color",
            "is_constructor": 1
        },
        "BlockHighlightMorph": {
            "name": "BlockHighlightMorph",
            "shortname": "BlockHighlightMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 9250,
            "description": "This is the description for BlockHighlightMorph.",
            "is_constructor": 1
        },
        "MultiArgMorph": {
            "name": "MultiArgMorph",
            "shortname": "MultiArgMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 9269,
            "description": "This is the description for MultiArgMorph.I am an arity controlled list of input slots\n\n   my block specs are\n\n       %mult%x - where x is any single input slot\n       %inputs - for an additional text label 'with inputs'\n\n   evaluation is handles by the interpreter",
            "is_constructor": 1
        },
        "ArgLabelMorph": {
            "name": "ArgLabelMorph",
            "shortname": "ArgLabelMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 9730,
            "description": "I am a label string that is wrapped around an ArgMorph, usually\n   a MultiArgMorph, so to indicate that it has been replaced entirely\n   for an embedded reporter block\n\n   I don't have a block spec, I get embedded automatically by the parent\n   block's argument replacement mechanism\n\n   My evaluation method is the identity function, i.e. I simply pass my\n   input's value along.",
            "is_constructor": 1
        },
        "FunctionSlotMorph": {
            "name": "FunctionSlotMorph",
            "shortname": "FunctionSlotMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 9874,
            "description": "I am an unevaluated, non-editable, rf-colored, rounded or diamond\n    input slot.    My current (only) use is in the THE BLOCK block.\n\n    My command spec is %f",
            "is_constructor": 1
        },
        "ReporterSlotMorph": {
            "name": "ReporterSlotMorph",
            "shortname": "ReporterSlotMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 10241,
            "description": "I am a ReporterBlock-shaped input slot. I can nest as well as\n   accept reporter blocks (containing reified scripts).\n\n   my most important accessor is\n\n       nestedBlock()    - answer the reporter block I encompass, if any\n\n       My command spec is %r for reporters (round) and %p for\n       predicates (diamond)\n\n       evaluate() returns my nested block or null",
            "is_constructor": 1
        },
        "RingReporterSlotMorph": {
            "name": "RingReporterSlotMorph",
            "shortname": "RingReporterSlotMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 10369,
            "description": "I am a ReporterBlock-shaped input slot for use in RingMorphs.\n  I can only nest reporter blocks (both round and diamond).\n\n      My command spec is %rr for reporters (round) and %rp for\n      predicates (diamond)\n\n      evaluate() returns my nested block or null",
            "is_constructor": 1
        },
        "CommentMorph": {
            "name": "CommentMorph",
            "shortname": "CommentMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "blocks.js",
            "line": 10771,
            "description": "This is the description for CommentMorph.",
            "is_constructor": 1
        },
        "CustomBlockDefinition": {
            "name": "CustomBlockDefinition",
            "shortname": "CustomBlockDefinition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "byob.js",
            "line": 130,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "CustomCommandBlockMorph": {
            "name": "CustomCommandBlockMorph",
            "shortname": "CustomCommandBlockMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "byob.js",
            "line": 345,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "CustomReporterBlockMorph": {
            "name": "CustomReporterBlockMorph",
            "shortname": "CustomReporterBlockMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "byob.js",
            "line": 819,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "JaggedBlockMorph": {
            "name": "JaggedBlockMorph",
            "shortname": "JaggedBlockMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "byob.js",
            "line": 939,
            "description": "I am a reporter block with jagged left and right edges conveying the\n  appearance of having the broken out of a bigger block. I am used to\n  display input types in the long form input dialog.",
            "is_constructor": 1
        },
        "BlockDialogMorph": {
            "name": "BlockDialogMorph",
            "shortname": "BlockDialogMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "byob.js",
            "line": 1101,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "BlockEditorMorph": {
            "name": "BlockEditorMorph",
            "shortname": "BlockEditorMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "byob.js",
            "line": 1553,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "PrototypeHatBlockMorph": {
            "name": "PrototypeHatBlockMorph",
            "shortname": "PrototypeHatBlockMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "byob.js",
            "line": 1867,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "BlockLabelFragment": {
            "name": "BlockLabelFragment",
            "shortname": "BlockLabelFragment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "byob.js",
            "line": 1944,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "BlockLabelFragmentMorph": {
            "name": "BlockLabelFragmentMorph",
            "shortname": "BlockLabelFragmentMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "byob.js",
            "line": 2076,
            "description": "I am a single word in a custom block prototype's label. I can be clicked\n    to edit my contents and to turn me into an input placeholder.",
            "is_constructor": 1
        },
        "BlockLabelPlaceHolderMorph": {
            "name": "BlockLabelPlaceHolderMorph",
            "shortname": "BlockLabelPlaceHolderMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "byob.js",
            "line": 2204,
            "description": "I am a space between words or inputs in a custom block prototype's label.\n   When I am moused over I display a plus sign on a colored background\n   circle. I can be clicked to add a new word or input to the prototype.",
            "is_constructor": 1
        },
        "BlockInputFragmentMorph": {
            "name": "BlockInputFragmentMorph",
            "shortname": "BlockInputFragmentMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "byob.js",
            "line": 2340,
            "description": "I am a variable blob in a custom block prototype's label. I can be clicked\n   to edit my contents and to turn me into an part of the block's label text.",
            "is_constructor": 1
        },
        "InputSlotDialogMorph": {
            "name": "InputSlotDialogMorph",
            "shortname": "InputSlotDialogMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "byob.js",
            "line": 2379,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "VariableDialogMorph": {
            "name": "VariableDialogMorph",
            "shortname": "VariableDialogMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "byob.js",
            "line": 2983,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "BlockExportDialogMorph": {
            "name": "BlockExportDialogMorph",
            "shortname": "BlockExportDialogMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "byob.js",
            "line": 3107,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "BlockImportDialogMorph": {
            "name": "BlockImportDialogMorph",
            "shortname": "BlockImportDialogMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "byob.js",
            "line": 3291,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "IDE_Morph": {
            "name": "IDE_Morph",
            "shortname": "IDE_Morph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "gui.js",
            "line": 85,
            "description": "I am SNAP's top-level frame, the Editor window",
            "is_constructor": 1
        },
        "ProjectDialogMorph": {
            "name": "ProjectDialogMorph",
            "shortname": "ProjectDialogMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "gui.js",
            "line": 3877,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "MyClass": {
            "name": "MyClass",
            "shortname": "MyClass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "gui.js",
            "line": 4764,
            "description": "I am a selectable element in the Sprite corral, keeping a self-updating\n    thumbnail of the sprite I'm respresenting, and a self-updating label\n    of the sprite's name (in case it is changed elsewhere).",
            "is_constructor": 1
        },
        "CostumeIconMorph": {
            "name": "CostumeIconMorph",
            "shortname": "CostumeIconMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "gui.js",
            "line": 5158,
            "description": "I am a selectable element in the SpriteEditor's \"Costumes\" tab, keeping\n   a self-updating thumbnail of the costume I'm respresenting, and a\n   self-updating label of the costume's name (in case it is changed\n   elsewhere).",
            "is_constructor": 1
        },
        "TurtleIconMorph": {
            "name": "TurtleIconMorph",
            "shortname": "TurtleIconMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "gui.js",
            "line": 5383,
            "description": "I am a selectable element in the SpriteEditor's \"Costumes\" tab, keeping\n   a thumbnail of the sprite's or stage's default \"Turtle\" costume.",
            "is_constructor": 1
        },
        "WardrobeMorph": {
            "name": "WardrobeMorph",
            "shortname": "WardrobeMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "gui.js",
            "line": 5576,
            "description": "I am a watcher on a sprite's costume list.",
            "is_constructor": 1
        },
        "SoundIconMorph": {
            "name": "SoundIconMorph",
            "shortname": "SoundIconMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "gui.js",
            "line": 5758,
            "description": "I am an element in the SpriteEditor's \"Sounds\" tab.",
            "is_constructor": 1
        },
        "JukeboxMorph": {
            "name": "JukeboxMorph",
            "shortname": "JukeboxMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "gui.js",
            "line": 5972,
            "description": "I am JukeboxMorph, like WardrobeMorph, but for sounds.",
            "is_constructor": 1
        },
        "List": {
            "name": "List",
            "shortname": "List",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lists.js",
            "line": 70,
            "description": "I am a dynamic array data structure for SNAP!\n   My index starts with 1\n\n   I am a \"smart\" hybrid list, because I can be used as both a linked\n   list and as a dynamic array\n\n   public interface:\n\n       setters (linked):\n       -----------------\n       cons                - answer a new list with the given item in front\n       cdr                    - answer all but the first element\n\n   setters (arrayed):\n   ------------------\n       add(element, index)    - insert the element before the given slot,\n       put(element, index)    - overwrite the element at the given slot\n       remove(index)        - remove the given slot, shortening the list\n       clear()                - remove all elements\n\n   getters (all hybrid):\n   ---------------------\n       length()            - number of slots\n       at(index)            - element present in specified slot\n       contains(element)    - <bool>\n\n   conversion:\n   -----------\n       asArray()            - answer me as JavaScript array\n       asText()            - answer my elements (recursively) concatenated",
            "is_constructor": 1
        },
        "ListWatcherMorph": {
            "name": "ListWatcherMorph",
            "shortname": "ListWatcherMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lists.js",
            "line": 351,
            "description": "I am a little window which observes a list and continuously\n   updates itself accordingly",
            "is_constructor": 1
        },
        "Color": {
            "name": "Color",
            "shortname": "Color",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 1274,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "Point": {
            "name": "Point",
            "shortname": "Point",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 1443,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "Rectangle": {
            "name": "Rectangle",
            "shortname": "Rectangle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 1706,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "Node": {
            "name": "Node",
            "shortname": "Node",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 2023,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "ShadowMorph": {
            "name": "ShadowMorph",
            "shortname": "ShadowMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 3701,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "HandleMorph": {
            "name": "HandleMorph",
            "shortname": "HandleMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 3720,
            "description": "I am a resize / move handle that can be attached to any Morph",
            "is_constructor": 1
        },
        "PenMorph": {
            "name": "PenMorph",
            "shortname": "PenMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 3976,
            "description": "I am a simple LOGO-wise turtle.",
            "is_constructor": 1
        },
        "ColorPaletteMorph": {
            "name": "ColorPaletteMorph",
            "shortname": "ColorPaletteMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 4210,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "GrayPaletteMorph": {
            "name": "GrayPaletteMorph",
            "shortname": "GrayPaletteMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 4347,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "ColorPickerMorph": {
            "name": "ColorPickerMorph",
            "shortname": "ColorPickerMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 4385,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "BlinkerMorph": {
            "name": "BlinkerMorph",
            "shortname": "BlinkerMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 4455,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "CursorMorph": {
            "name": "CursorMorph",
            "shortname": "CursorMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 4491,
            "description": "I am a String/Text editing widget",
            "is_constructor": 1
        },
        "BoxMorph": {
            "name": "BoxMorph",
            "shortname": "BoxMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 4899,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "SpeechBubbleMorph": {
            "name": "SpeechBubbleMorph",
            "shortname": "SpeechBubbleMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 5106,
            "description": "I am a comic-style speech bubble that can display either a string,\n   a Morph, a Canvas or a toString() representation of anything else.\n   If I am invoked using popUp() I behave like a tool tip.",
            "is_constructor": 1
        },
        "CircleBoxMorph": {
            "name": "CircleBoxMorph",
            "shortname": "CircleBoxMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 5419,
            "description": "I can be used for sliders",
            "is_constructor": 1
        },
        "SliderButtonMorph": {
            "name": "SliderButtonMorph",
            "shortname": "SliderButtonMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 5546,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "SliderMorph": {
            "name": "SliderMorph",
            "shortname": "SliderMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 5765,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "MouseSensorMorph": {
            "name": "MouseSensorMorph",
            "shortname": "MouseSensorMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 6134,
            "description": "for demo and debuggin purposes only, to be removed later",
            "is_constructor": 1
        },
        "InspectorMorph": {
            "name": "InspectorMorph",
            "shortname": "InspectorMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 6212,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "MenuMorph": {
            "name": "MenuMorph",
            "shortname": "MenuMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 6683,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "StringMorph": {
            "name": "StringMorph",
            "shortname": "StringMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 6982,
            "description": "I am a single line of text",
            "is_constructor": 1
        },
        "TextMorph": {
            "name": "TextMorph",
            "shortname": "TextMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 7519,
            "description": "I am a multi-line, word-wrapping String, quasi-inheriting from StringMorph",
            "is_constructor": 1
        },
        "TriggerMorph": {
            "name": "TriggerMorph",
            "shortname": "TriggerMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 8049,
            "description": "I provide basic button functionality",
            "is_constructor": 1
        },
        "MenuItemMorph": {
            "name": "MenuItemMorph",
            "shortname": "MenuItemMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 8320,
            "description": "I automatically determine my bounds",
            "is_constructor": 1
        },
        "FrameMorph": {
            "name": "FrameMorph",
            "shortname": "FrameMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 8486,
            "description": "I clip my submorphs at my bounds",
            "is_constructor": 1
        },
        "ScrollFrameMorph": {
            "name": "ScrollFrameMorph",
            "shortname": "ScrollFrameMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 8689,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "ListMorph": {
            "name": "ListMorph",
            "shortname": "ListMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 9069,
            "description": "passing a format is optional. If the format parameter is specified\n it has to be of the following pattern:\n\n     [\n         [<color>, <single-argument predicate>],\n         ['bold', <single-argument predicate>],\n         ['italic', <single-argument predicate>],\n         ...\n     ]\n\n multiple conditions can be passed in such a format list, the\n last predicate to evaluate true when given the list element sets\n the given format category (color, bold, italic).\n If no condition is met, the default format (color black, non-bold,\n non-italic) will be assigned.\n\n An example of how to use fomats can be found in the InspectorMorph's\n \"markOwnProperties\" mechanism.",
            "is_constructor": 1
        },
        "StringFieldMorph": {
            "name": "StringFieldMorph",
            "shortname": "StringFieldMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 9226,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "BouncerMorph": {
            "name": "BouncerMorph",
            "shortname": "BouncerMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 9341,
            "description": "I am a Demo of a stepping custom Morph",
            "is_constructor": 1
        },
        "HandMorph": {
            "name": "HandMorph",
            "shortname": "HandMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 9435,
            "description": "I represent the Mouse cursor",
            "is_constructor": 1
        },
        "WorldMorph": {
            "name": "WorldMorph",
            "shortname": "WorldMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "morphic.js",
            "line": 10075,
            "description": "I represent the <canvas> element",
            "is_constructor": 1
        },
        "SpriteMorph": {
            "name": "SpriteMorph",
            "shortname": "SpriteMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "objects.js",
            "line": 144,
            "description": "I am a scriptable object",
            "is_constructor": 1
        },
        "SpriteHighlightMorph": {
            "name": "SpriteHighlightMorph",
            "shortname": "SpriteHighlightMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "objects.js",
            "line": 3653,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "StageMorph": {
            "name": "StageMorph",
            "shortname": "StageMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "objects.js",
            "line": 3672,
            "description": "This is the description for my class. I inherit from FrameMorph and copy from SpriteMorph.",
            "is_constructor": 1
        },
        "SpriteBubbleMorph": {
            "name": "SpriteBubbleMorph",
            "shortname": "SpriteBubbleMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "objects.js",
            "line": 4896,
            "description": "I am a sprite's scaleable speech bubble. I rely on SpriteMorph\n   for my preferences settings",
            "is_constructor": 1
        },
        "Costume": {
            "name": "Costume",
            "shortname": "Costume",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "objects.js",
            "line": 5107,
            "description": "I am a picture that's \"wearable\" by a sprite. My rotationCenter is\n   relative to my contents position.",
            "is_constructor": 1
        },
        "SVG_Costume": {
            "name": "SVG_Costume",
            "shortname": "SVG_Costume",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "objects.js",
            "line": 5397,
            "description": "I am a costume containing an SVG image.",
            "is_constructor": 1
        },
        "CostumeEditorMorph": {
            "name": "CostumeEditorMorph",
            "shortname": "CostumeEditorMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "objects.js",
            "line": 5457,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "Sound": {
            "name": "Sound",
            "shortname": "Sound",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "objects.js",
            "line": 5594,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "Note": {
            "name": "Note",
            "shortname": "Note",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "objects.js",
            "line": 5630,
            "description": "I am a single musical note",
            "is_constructor": 1
        },
        "CellMorph": {
            "name": "CellMorph",
            "shortname": "CellMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "objects.js",
            "line": 5691,
            "description": "I am a spreadsheet style cell that can display either a string,\n   a Morph, a Canvas or a toString() representation of anything else.\n   I can be used in variable watchers or list view element cells.",
            "is_constructor": 1
        },
        "WatcherMorph": {
            "name": "WatcherMorph",
            "shortname": "WatcherMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "objects.js",
            "line": 6027,
            "description": "I am a little window which observes some value and continuously\n   updates itself accordingly.\n\n   My target can be either a SpriteMorph or a VariableFrame.",
            "is_constructor": 1
        },
        "StagePrompterMorph": {
            "name": "StagePrompterMorph",
            "shortname": "StagePrompterMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "objects.js",
            "line": 6507,
            "description": "I am a sensor-category-colored input box at the bottom of the stage\n   which lets the user answer to a question. If I am opened from within\n   the context of a sprite, my question can be anything that is displayable\n   in a SpeechBubble and will be, if I am opened from within the stage\n   my question will be shown as a single line of text within my label morph.",
            "is_constructor": 1
        },
        "PaintEditorMorph": {
            "name": "PaintEditorMorph",
            "shortname": "PaintEditorMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "paint.js",
            "line": 75,
            "description": "A complete paint editor",
            "is_constructor": 1
        },
        "PaintCanvasMorph": {
            "name": "PaintCanvasMorph",
            "shortname": "PaintCanvasMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "paint.js",
            "line": 524,
            "description": "A canvas which reacts to drag events to\n   modify its image, based on a 'tool' property.",
            "is_constructor": 1
        },
        "XML_Serializer": {
            "name": "XML_Serializer",
            "shortname": "XML_Serializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "store.js",
            "line": 68,
            "description": "I am an abstract protype for my heirs.\n\n   I manage object identities and keep track of circular data structures.\n   Objects are \"touched\" and a property named \"serializationID\" is added\n   to each, representing an index integer in the list, starting with 1.",
            "is_constructor": 1
        },
        "SnapSerializer": {
            "name": "SnapSerializer",
            "shortname": "SnapSerializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "store.js",
            "line": 254,
            "description": "SnapSerializer inherits from XML_Serializer:",
            "is_constructor": 1
        },
        "ThreadManager": {
            "name": "ThreadManager",
            "shortname": "ThreadManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "threads.js",
            "line": 123,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "Process": {
            "name": "Process",
            "shortname": "Process",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "threads.js",
            "line": 261,
            "description": "A Process is what brings a stack of blocks to life. The process\n   keeps track of which block to run next, evaluates block arguments,\n   handles control structures, and so forth.\n\n   The ThreadManager is the (passive) scheduler, telling each process\n   when to run by calling its runStep() method. The runStep() method\n   will execute some number of blocks, then voluntarily yield control\n   so that the ThreadManager can run another process.\n\n   The Scratch etiquette is that a process should yield control at the\n   end of every loop iteration, and while it is running a timed command\n   (e.g. \"wait 5 secs\") or a synchronous command (e.g. \"broadcast xxx\n   and wait\"). Since Snap also has lambda and custom blocks Snap adds\n   yields at the beginning of each non-atomic custom command block\n   execution, and - to let users escape infinite loops and recursion -\n   whenever the process runs into a timeout.\n\n   a Process runs for a receiver, i.e. a sprite or the stage or any\n   blocks-scriptable object that we'll introduce.\n\n   structure:\n\n       topBlock            the stack's first block, of which all others\n                           are children\n       receiver            object (sprite) to which the process applies,\n                           cached from the top block\n       context                the Context describing the current state\n                           of this process\n       homeContext            stores information relevant to the whole process,\n                           i.e. its receiver, result etc.\n       isPaused            boolean indicating whether to pause\n       readyToYield        boolean indicating whether to yield control to\n                           another process\n       readyToTerminate    boolean indicating whether the stop method has\n                           been called\n       isDead              boolean indicating a terminated clone process\n       timeout                msecs after which to force yield\n       lastYield            msecs when the process last yielded\n       errorFlag            boolean indicating whether an error was encountered\n       prompter            active instance of StagePrompterMorph\n       httpRequest         active instance of an HttpRequest or null\n       pauseOffset         msecs between the start of an interpolated operation\n                           and when the process was paused",
            "is_constructor": 1
        },
        "Context": {
            "name": "Context",
            "shortname": "Context",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "threads.js",
            "line": 2710,
            "description": "A Context describes the state of a Process.\n\n   Each Process has a pointer to a Context containing its\n   state. Whenever the Process yields control, its Context\n   tells it exactly where it left off.\n\n   structure:\n\n       parentContext    the Context to return to when this one has\n                       been evaluated.\n       outerContext    the Context holding my lexical scope\n       expression        SyntaxElementMorph, an array of blocks to evaluate,\n                       null or a String denoting a selector, e.g. 'doYield'\n       receiver        the object to which the expression applies, if any\n       variables        the current VariableFrame, if any\n       upvars          the current UpvarReference, if any (default: null)\n       inputs            an array of input values computed so far\n                       (if expression is a    BlockMorph)\n       pc                the index of the next block to evaluate\n                       (if expression is an array)\n       startTime        time when the context was first evaluated\n       startValue        initial value for interpolated operations\n       activeAudio     audio buffer for interpolated operations, don't persist\n       activeNote      audio oscillator for interpolated ops, don't persist\n       isLambda        marker for return ops\n       isImplicitLambda    marker for return ops\n       isCustomBlock   marker for return ops\n       emptySlots        caches the number of empty slots for reification",
            "is_constructor": 1
        },
        "VariableFrame": {
            "name": "VariableFrame",
            "shortname": "VariableFrame",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "threads.js",
            "line": 2930,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "UpvarReference": {
            "name": "UpvarReference",
            "shortname": "UpvarReference",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "threads.js",
            "line": 3112,
            "description": "quasi-inherits some features from VariableFrame",
            "is_constructor": 1
        },
        "PushButtonMorph": {
            "name": "PushButtonMorph",
            "shortname": "PushButtonMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "widgets.js",
            "line": 89,
            "description": "I am a Button with rounded corners and 3D-ish graphical effects",
            "is_constructor": 1
        },
        "ToggleButtonMorph": {
            "name": "ToggleButtonMorph",
            "shortname": "ToggleButtonMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "widgets.js",
            "line": 475,
            "description": "I am a two-state PushButton. When my state is \"true\" I keep my \"pressed\"\n   background color. I can also be set to not auto-layout my bounds, in\n   which case my label will left-align.",
            "is_constructor": 1
        },
        "TabMorph": {
            "name": "TabMorph",
            "shortname": "TabMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "widgets.js",
            "line": 912,
            "description": "TabMorph inherits from ToggleButtonMorph",
            "is_constructor": 1
        },
        "ToggleMorph": {
            "name": "ToggleMorph",
            "shortname": "ToggleMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "widgets.js",
            "line": 1030,
            "description": "I am a PushButton which toggles a check mark ( becoming check box)\n   or a bullet (becoming a radio button). I can have both or either an\n   additional label and an additional pictogram, whereas the pictogram\n   can be either an instance of (any) Morph, in which case the pictogram\n   will be an interactive toggle itself or a Canvas, in which case it\n   is just going to be a picture.",
            "is_constructor": 1
        },
        "ToggleElementMorph": {
            "name": "ToggleElementMorph",
            "shortname": "ToggleElementMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "widgets.js",
            "line": 1291,
            "description": "I am a picture of a Morph (\"element\") which acts as a toggle button.\n   I am different from ToggleButton in that I neither create a label nor\n   draw button outlines. Instead I display my element morph in specified\n   contrasts of a given color, symbolizing whether it is selected or not",
            "is_constructor": 1
        },
        "DialogBoxMorph": {
            "name": "DialogBoxMorph",
            "shortname": "DialogBoxMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "widgets.js",
            "line": 1467,
            "description": "I am a DialogBox frame.\n\n  Note:\n  -----\n      my key property keeps track of my purpose to prevent multiple instances\n      on the same or similar objects",
            "is_constructor": 1
        },
        "AlignmentMorph": {
            "name": "AlignmentMorph",
            "shortname": "AlignmentMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "widgets.js",
            "line": 2803,
            "description": "I am a reified layout, either a row or a column of submorphs",
            "is_constructor": 1
        },
        "InputFieldMorph": {
            "name": "InputFieldMorph",
            "shortname": "InputFieldMorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "widgets.js",
            "line": 2884,
            "description": "This is the description for my class.",
            "is_constructor": 1
        },
        "ReadStream": {
            "name": "ReadStream",
            "shortname": "ReadStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "xml.js",
            "line": 76,
            "description": "I am a sequential reading interface to an Array or String",
            "is_constructor": 1
        },
        "XML_Element": {
            "name": "XML_Element",
            "shortname": "XML_Element",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "xml.js",
            "line": 157,
            "description": "I am a DOM-Node which can encode itself to as well as parse itself\n   from a well-formed XML string. Note that there is no separate parser\n   object, all the parsing can be done in a single object.",
            "is_constructor": 1
        }
    },
    "classitems": [],
    "warnings": []
}