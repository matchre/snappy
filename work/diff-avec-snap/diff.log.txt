File lang-ca.js of remote snap not in local webmobinet
File lang-cs.js of remote snap not in local webmobinet
File lang-de.js of remote snap not in local webmobinet
File lang-dk.js of remote snap not in local webmobinet
File lang-el.js of remote snap not in local webmobinet
File lang-eo.js of remote snap not in local webmobinet
File lang-es.js of remote snap not in local webmobinet
File lang-fr.js of remote snap not in local webmobinet
File lang-it.js of remote snap not in local webmobinet
File lang-ja_HIRA.js of remote snap not in local webmobinet
File lang-ja.js of remote snap not in local webmobinet
File lang-ko.js of remote snap not in local webmobinet
File lang-nl.js of remote snap not in local webmobinet
File lang-no.js of remote snap not in local webmobinet
File lang-pl.js of remote snap not in local webmobinet
File lang-pt.js of remote snap not in local webmobinet
File lang-ru.js of remote snap not in local webmobinet
File lang-si.js of remote snap not in local webmobinet
File lang-tw.js of remote snap not in local webmobinet
File lang-zh.js of remote snap not in local webmobinet
File init.js in local webmobinet not on remote snap

> blocks.js ----------------------

12c12
<     Copyright (C) 2013 by Jens Mönig
---
>     Copyright (C) 2014 by Jens Mönig
158c158,159
< modules.blocks = '2013-November-26';
---
> modules.blocks = '2014-February-11';
> 
237,254d237
< /**
< * I am the ancestor of all blocks and input slots. SyntaxElementMorph inherits from Morph:
< * SyntaxElementMorph preferences settings:
< *
<     the following settings govern the appearance of all syntax elements
<     (blocks and slots) where applicable:
< 
<     outline:
< 
<         corner        - radius of command block rounding
<         rounding    - radius of reporter block rounding
<         edge        - width of 3D-ish shading box
<         hatHeight    - additional top space for hat blocks
<         hatWidth    - minimum width for hat blocks
<         rfBorder    - pixel width of reification border (grey outline)
<         minWidth    - minimum width for any syntax element's contents
< 
<     jigsaw shape:
256,295d238
<         inset        - distance from indentation to left edge
<         dent        - width of indentation bottom
< 
<     paddings:
< 
<         bottomPadding    - adds to the width of the bottom most c-slot
<         cSlotPadding    - adds to the width of the open "C" in c-slots
<         typeInPadding    - adds pixels between text and edge in input slots
<         labelPadding    - adds left/right pixels to block labels
< 
<     label:
< 
<         labelFontName    - <string> specific font family name
<         labelFontStyle    - <string> generic font family name, cascaded
<         fontSize        - duh
<         embossing        - <Point> offset for embossing effect
<         labelWidth        - column width, used for word wrapping
<         labelWordWrap    - <bool> if true labels can break after each word
<         dynamicInputLabels - <bool> if true inputs can have dynamic labels
< 
<     snapping:
< 
<         feedbackColor        - <Color> for displaying drop feedbacks
<         feedbackMinHeight    - height of white line for command block snaps
<         minSnapDistance        - threshold when commands start snapping
<         reporterDropFeedbackPadding    - increases reporter drop feedback
< 
<     color gradients:
< 
<         contrast        - <percent int> 3D-ish shading gradient contrast
<         labelContrast    - <percent int> 3D-ish label shading contrast
<         activeHighlight    - <Color> for stack highlighting when active
<         errorHighlight    - <Color> for error highlighting
<         activeBlur        - <pixels int> shadow for blurred activeHighlight
<         activeBorder    - <pixels int> unblurred activeHighlight
<         rfColor            - <Color> for reified outlines and slot backgrounds
< *
< * @class SyntaxElementMorph
< * @constructor
< */
872a816,833
>         case '%dates':
>             part = new InputSlotMorph(
>                 null, // text
>                 false, // non-numeric
>                 {
>                     'year' : ['year'],
>                     'month' : ['month'],
>                     'date' : ['date'],
>                     'day of week' : ['day of week'],
>                     'hour' : ['hour'],
>                     'minute' : ['minute'],
>                     'second' : ['second'],
>                     'time in milliseconds' : ['time in milliseconds']
>                 },
>                 true // read-only
>             );
>             part.setContents(['date']);
>             break;
1057d1017
<             part.isStatic = true;
1098a1059,1085
>         case '%stopChoices':
>             part = new InputSlotMorph(
>                 null,
>                 false,
>                 {
>                     'all' : ['all'],
>                     'this script' : ['this script'],
>                     'this block' : ['this block']
>                 },
>                 true
>             );
>             part.setContents(['all']);
>             part.isStatic = true;
>             break;
>         case '%stopOthersChoices':
>             part = new InputSlotMorph(
>                 null,
>                 false,
>                 {
>                     'all but this script' : ['all but this script'],
>                     'other scripts in sprite' : ['other scripts in sprite']
>                 },
>                 true
>             );
>             part.setContents(['all but this script']);
>             part.isStatic = true;
>             break;
1227d1213
< 
1728,1824d1713
< /**
< *  I am an abstraction of all blocks (commands, reporters, hats).
< 
<     Aside from the visual settings inherited from Morph and
<     SyntaxElementMorph my most important attributes and public
<     accessors are:
< 
<         selector    - (string) name of method to be triggered
<         receiver()    - answer the object (sprite) to which I apply
<         inputs()    - answer an array with my arg slots and nested reporters
<         defaults    - an optional Array containing default input values
<         topBlock()    - answer the top block of the stack I'm attached to
<         blockSpec    - a formalized description of my label parts
<         setSpec()    - force me to change my label structure
<         evaluate()    - answer the result of my evaluation
<         isUnevaluated() - answer whether I am part of a special form
< 
<     Zebra coloring provides a mechanism to alternate brightness of nested,
<     same colored blocks (of the same category). The deviation of alternating
<     brightness is set in the preferences setting:
< 
<     zebraContrast - <number> percentage of brightness deviation
< 
<     attribute. If the attribute is set to zero, zebra coloring is turned
<     off. If it is a positive number, nested blocks will be colored in
<     a brighter shade of the same hue and the label color (for texts)
<     alternates between white and black. If the attribute is set to a negative
<     number, nested blocks are colored in a darker shade of the same hue
<     with no alternating label colors.
< 
<     Note: Some of these methods are inherited from SyntaxElementMorph
<     for technical reasons, because they are shared among Block and
<     MultiArgMorph (e.g. topBlock()).
< 
<     blockSpec is a formatted string consisting of plain words and
<     reserved words starting with the percent character (%), which
<     represent the following pre-defined input slots and/or label
<     features:
< 
<     arity: single
< 
<         %br        - user-forced line break
<         %s        - white rectangular type-in slot ("string-type")
<         %txt    - white rectangular type-in slot ("text-type")
<         %mlt    - white rectangular type-in slot ("multi-line-text-type")
<         %code    - white rectangular type-in slot, monospaced font
<         %n        - white roundish type-in slot ("numerical")
<         %dir    - white roundish type-in slot with drop-down for directions
<         %inst    - white roundish type-in slot with drop-down for instruments
<         %ida    - white roundish type-in slot with drop-down for list indices
<         %idx    - white roundish type-in slot for indices incl. "any"
<         %obj    - specially drawn slot for object reporters
<         %spr    - chameleon colored rectangular drop-down for object-names
<         %col    - chameleon colored rectangular drop-down for collidables
<         %dst    - chameleon colored rectangular drop-down for distances
<         %cst    - chameleon colored rectangular drop-down for costume-names
<         %eff    - chameleon colored rectangular drop-down for graphic effects
<         %snd    - chameleon colored rectangular drop-down for sound names
<         %key    - chameleon colored rectangular drop-down for keyboard keys
<         %msg    - chameleon colored rectangular drop-down for messages
<         %att    - chameleon colored rectangular drop-down for attributes
<         %fun    - chameleon colored rectangular drop-down for math functions
<         %typ    - chameleon colored rectangular drop-down for data types
<         %var - chameleon colored rectangular drop-down for variable names
<         %lst    - chameleon colored rectangular drop-down for list names
<         %b        - chameleon colored hexagonal slot (for predicates)
<         %l        - list icon
<         %c        - C-shaped command slot
<         %clr    - interactive color slot
<         %t        - inline variable reporter template
<         %anyUE    - white rectangular type-in slot, unevaluated if replaced
<         %boolUE    - chameleon colored hexagonal slot, unevaluated if replaced
<         %f        - round function slot, unevaluated if replaced,
<         %r        - round reporter slot
<         %p        - hexagonal predicate slot
< 
<     rings:
< 
<         %cmdRing    - command slotted ring with %ringparms
<         %repRing    - round slotted ringn with %ringparms
<         %predRing   - diamond slotted ring with %ringparms
< 
<     arity: multiple
< 
<         %mult%x    - where %x stands for any of the above single inputs
<         %inputs - for an additional text label 'with inputs'
<         %words - for an expandable list of default 2 (used in JOIN)
<         %exp - for a static expandable list of minimum 0 (used in LIST)
<         %scriptVars - for an expandable list of variable reporter templates
<         %parms - for an expandable list of formal parameters
<         %ringparms - the same for use inside Rings
< 
<     special form: upvar
< 
<         %upvar - same as %t (inline variable reporter template)
< 
<     special form: input name
1826,1838d1714
<         %inputName - variable blob (used in input type dialog)
< 
<     examples:
< 
<         'if %b %c else %c'        - creates Scratch's If/Else block
<         'set pen color to %clr'    - creates Scratch's Pen color block
<         'list %mult%s'            - creates BYOB's list reporter block
<         'call %n %inputs'        - creates BYOB's Call block
<         'the script %parms %c'    - creates BYOB's THE SCRIPT block
< *
< * @class BlockMorph
< * @constructor
< */
3148,3150d3023
<     console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
<     console.log(this.selector);
<     console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
3194,3195c3067,3069
< /**
< * I am a stackable jigsaw-shaped block.
---
> 
> /*
>     I am a stackable jigsaw-shaped block.
3200,3208c3074,3076
<         nextBlock()        - set / get the block attached to my bottom
<         bottomBlock()    - answer the bottom block of my stack
<         blockSequence()    - answer an array of blocks starting with myself
< *
< * @class CommandBlockMorph
< * @constructor
< */
< /*
<     
---
>     nextBlock()        - set / get the block attached to my bottom
>     bottomBlock()    - answer the bottom block of my stack
>     blockSequence()    - answer an array of blocks starting with myself
3445a3314
>         'doStopThis',
3846,3851c3715
< /**
< * I am a script's top most block. I can attach command blocks at my bottom, but not on top.
< *
< * @class HatBlockMorph
< * @constructor
< */
---
> 
4030,4035c3894
< /**
< *     I am a block with a return value, either round-ish or diamond shaped. I inherit all my important accessors from BlockMorph
< *
< * @class ReporterBlockMorph
< * @constructor
< */
---
> 
4068a3928
> 
4541,4548d4400
< /**
< * 
<     I am a reporter block which reifies its contents, my outer shape is
<     always roundish (never diamond)
< *
< * @class RingMorph
< * @constructor
< */
4568a4421
> 
4679,4681d4531
< /**
< *  I give feedback about possible drop targets and am in charge
<     of actually snapping blocks together.
4683,4690d4532
<     My children are the top blocks of scripts.
< 
<     I store a back-pointer to my owner, i.e. the object (sprite)
<     to whom my scripts apply.
< *
< * @class ScriptsMorph
< * @constructor
< */
4760d4601
<     
5223,5228d5063
< /**
< * I am a syntax element and the ancestor of all block inputs.
<     I am present in block labels.
<     Usually I am just a receptacle for inherited methods and attributes,
<     however, if my 'type' attribute is set to one of the following
<     values, I act as an iconic slot myself:
5230,5234d5064
<         'list'    - a list symbol
< *
< * @class ArgMorph
< * @constructor
< */
5344,5350d5173
< /**
< * This is the description for CommandSlotMorphI am a CommandBlock-shaped input slot. I can nest command blocks
<     and also accept    reporters (containing reified scripts).
< 
<     my most important accessor is
< 
<         nestedBlock()    - answer the command block I encompass, if any
5352,5358d5174
<         My command spec is %cmd
< 
<         evaluate() returns my nested block or null
< *
< * @class CommandSlotMorph
< * @constructor
< */
5811,5813d5626
< /**
< * This is the description for RingCommandSlotMorph.I am a CommandBlock-shaped input slot for use in RingMorphs.
<     I can only nest command blocks, not reporters.
5815,5821d5627
<         My command spec is %rc
< 
<         evaluate() returns my nested block or null (inherited from CommandSlotMorph)
< *
< * @class RingCommandSlotMorph
< * @constructor
< */
5974,5982d5779
< /**
< * This is the description for CSlotMorph. I am a C-shaped input slot. I can nest command blocks and also accept
<     reporters (containing reified scripts).
< 
<     my most important accessor is
< 
<         nestedBlock()    - the command block I encompass, if any (inherited)
< 
<         My command spec is %c
5984,5988d5780
<         evaluate() returns my nested block or null
< *
< * @class CSlotMorph
< * @constructor
< */
6398,6402d6189
< /**
< * I am an editable text input slot. I can be either rectangular or
<     rounded, and can have an optional drop-down menu. If I'm set to
<     read-only I must have a drop-down menu and will assume a darker
<     shade of my    parent's color.
6404,6425d6190
<     my most important public attributes and accessors are:
< 
<         setContents(str/float)    - display the argument (string or float)
<         contents().text            - get the displayed string
<         choices                    - a key/value list for my optional drop-down
<         isReadOnly                - governs whether I am editable or not
<         isNumeric                - governs my outer shape (round or rect)
< 
<     my block specs are:
< 
<         %s        - string input, rectangular
<         %n        - numerical input, semi-circular vertical edges
<         %anyUE    - any unevaluated
< 
<     evaluate() returns my displayed string, cast to float if I'm numerical
< 
<     there are also a number of specialized drop-down menu presets, refer
<     to BlockMorph for details.
< *
< * @class InputSlotMorph
< * @constructor
< */
6430c6195
<     shade of my    parent's color.
---
>     shade of my parent's color.
6584a6350,6351
>             // } else if (key.indexOf('§_def') === 0) {
>             //     menu.addItem(choices[key].blockInstance(), choices[key]);
6800a6568,6572
>     /*
>     obj.customBlocks.forEach(function (def, i) {
>         dict['§_def' + i] = def
>     });
>     */
7367,7371d7138
< /**
< *  I am a reporter block template sitting on a pedestal.
<     My block spec is
< 
<         %t        - template
7373,7377d7139
<     evaluate returns the embedded reporter template's label string
< *
< * @class TemplateSlotMorph
< * @constructor
< */
7480,7482d7241
< /**
< *     I am a diamond-shaped argument slot.
<     My block spec is:
7484,7492d7242
<         %b        - Boolean
< 
<         %boolUE    - Boolean unevaluated
<     
<     evaluate returns null
< *
< * @class BooleanSlotMorph
< * @constructor
< */
7653,7660c7403
< /**
< *     I am a triangular arrow shape, for use in drop-down menus etc.
<     My orientation is governed by my 'direction' property, which can be
<     'down', 'up', 'left' or 'right'.
< *
< * @class ArrowMorph
< * @constructor
< */
---
> 
7731,7737c7474
< /**
< * I am a multi-line input slot, primarily used in Snap's code-mapping
<     blocks.
< *
< * @class TextSlotMorph
< * @constructor
< */
---
> 
7815,7826c7552
< /**
< * I display graphical symbols, such as special letters. I have been
< *    called into existence out of frustration about not being able to
< *    consistently use Unicode characters to the same ends.
< *
< *    Symbols can also display costumes, if one is specified in lieu
< *    of a name property, although this feature is currently not being
< *    used because of asynchronous image loading issues.
< *
< * @class SymbolMorph
< * @constructor
< */
---
> 
9137,9150c8863
< /**
< * I am an editable input slot for a color. Users can edit my color by
< *     clicking on me, in which case a display a color gradient palette
< *     and let the user select another color. Note that the user isn't
< *     restricted to selecting a color from the palette, any color from
< *     anywhere within the World can be chosen.
< * 
< *     my block spec is %clr
< * 
< *     evaluate() returns my color
< *
< * @class ColorSlotMorph
< * @constructor
< */
---
> 
9250,9255c8963
< /**
< * This is the description for BlockHighlightMorph.
< *
< * @class BlockHighlightMorph
< * @constructor
< */
---
> 
9269,9275d8976
< /**
< * This is the description for MultiArgMorph.I am an arity controlled list of input slots
< 
<     my block specs are
< 
<         %mult%x - where x is any single input slot
<         %inputs - for an additional text label 'with inputs'
9277,9281d8977
<     evaluation is handles by the interpreter
< *
< * @class MultiArgMorph
< * @constructor
< */
9730,9743d9425
< /**
< * I am a label string that is wrapped around an ArgMorph, usually
<     a MultiArgMorph, so to indicate that it has been replaced entirely
<     for an embedded reporter block
< 
<     I don't have a block spec, I get embedded automatically by the parent
<     block's argument replacement mechanism
< 
<     My evaluation method is the identity function, i.e. I simply pass my
<     input's value along.
< *
< * @class ArgLabelMorph
< * @constructor
< */
9874,9876d9555
< /**
< *     I am an unevaluated, non-editable, rf-colored, rounded or diamond
<     input slot.    My current (only) use is in the THE BLOCK block.
9878,9882d9556
<     My command spec is %f
< *
< * @class FunctionSlotMorph
< * @constructor
< */
10241,10247d9914
< /**
< * I am a ReporterBlock-shaped input slot. I can nest as well as
<     accept reporter blocks (containing reified scripts).
< 
<     my most important accessor is
< 
<         nestedBlock()    - answer the reporter block I encompass, if any
10249,10256d9915
<         My command spec is %r for reporters (round) and %p for
<         predicates (diamond)
< 
<         evaluate() returns my nested block or null
< *
< * @class ReporterSlotMorph
< * @constructor
< */
10369,10374d10027
< /**
< *  I am a ReporterBlock-shaped input slot for use in RingMorphs.
<     I can only nest reporter blocks (both round and diamond).
< 
<         My command spec is %rr for reporters (round) and %rp for
<         predicates (diamond)
10376,10381d10028
<         evaluate() returns my nested block or null
<     
< *
< * @class RingReporterSlotMorph
< * @constructor
< */
10771,10776c10418
< /**
< * This is the description for CommentMorph.
< *
< * @class CommentMorph
< * @constructor
< */
---
> 

> byob.js ----------------------

12c12
<     Copyright (C) 2013 by Jens Mönig
---
>     Copyright (C) 2014 by Jens Mönig
109c109
< modules.byob = '2013-November-26';
---
> modules.byob = '2014-January-10';
130,135c130
< /**
< * This is the description for my class.
< *
< * @class CustomBlockDefinition
< * @constructor
< */
---
> 
202c197
<                 part.fragment.isReadonly = slot[3] || false;
---
>                 part.fragment.isReadOnly = slot[3] || false;
345,350c340
< /**
< * This is the description for my class.
< *
< * @class CustomCommandBlockMorph
< * @constructor
< */
---
> 
819,824c809
< /**
< * This is the description for my class.
< *
< * @class CustomReporterBlockMorph
< * @constructor
< */
---
> 
939,946c924
< /**
< *  I am a reporter block with jagged left and right edges conveying the
<     appearance of having the broken out of a bigger block. I am used to
<     display input types in the long form input dialog.
< *
< * @class JaggedBlockMorph
< * @constructor
< */
---
> 
1101,1106c1079
< /**
< * This is the description for my class.
< *
< * @class BlockDialogMorph
< * @constructor
< */
---
> 
1553,1558c1526
< /**
< * This is the description for my class.
< *
< * @class BlockEditorMorph
< * @constructor
< */
---
> 
1867,1872c1835
< /**
< * This is the description for my class.
< *
< * @class PrototypeHatBlockMorph
< * @constructor
< */
---
> 
1944,1949c1907
< /**
< * This is the description for my class.
< *
< * @class BlockLabelFragment
< * @constructor
< */
---
> 
2076,2083c2034
< /**
< * 
<     I am a single word in a custom block prototype's label. I can be clicked
<     to edit my contents and to turn me into an input placeholder.
< *
< * @class BlockLabelFragmentMorph
< * @constructor
< */
---
> 
2204,2211c2155
< /**
< * I am a space between words or inputs in a custom block prototype's label.
<     When I am moused over I display a plus sign on a colored background
<     circle. I can be clicked to add a new word or input to the prototype.
< *
< * @class BlockLabelPlaceHolderMorph
< * @constructor
< */
---
> 
2340,2346c2284
< /**
< * I am a variable blob in a custom block prototype's label. I can be clicked
<     to edit my contents and to turn me into an part of the block's label text.
< *
< * @class BlockInputFragmentMorph
< * @constructor
< */
---
> 
2379,2384c2317
< /**
< * This is the description for my class.
< *
< * @class InputSlotDialogMorph
< * @constructor
< */
---
> 
2983,2988c2916
< /**
< * This is the description for my class.
< *
< * @class VariableDialogMorph
< * @constructor
< */
---
> 
3107,3112c3035
< /**
< * This is the description for my class.
< *
< * @class BlockExportDialogMorph
< * @constructor
< */
---
> 
3269c3192
<         window.open('data:text/xml,<blocks app="'
---
>         window.open(encodeURI('data:text/xml,<blocks app="'
3275c3198
<             + '</blocks>');
---
>             + '</blocks>'));
3291,3296c3214
< /**
< * This is the description for my class.
< *
< * @class BlockImportDialogMorph
< * @constructor
< */
---
> 

> cloud.js ----------------------

9c9
<     Copyright (C) 2013 by Jens Mönig
---
>     Copyright (C) 2014 by Jens Mönig
32c32
< modules.cloud = '2013-November-26';
---
> modules.cloud = '2014-January-09';
40,42d39
<     //'192.168.2.110:8087/miocon/app/login?_app=SnapCloud'
<     //'192.168.186.146:8087/miocon/app/login?_app=SnapCloud'
<     // 'localhost/miocon/app/login?_app=SnapCloud'

> gui.js ----------------------

2,54c2,54
<  
<  gui.js
<  
<  a programming environment
<  based on morphic.js, blocks.js, threads.js and objects.js
<  inspired by Scratch
<  
<  written by Jens Mönig
<  jens@moenig.org
<  
<  Copyright (C) 2013 by Jens Mönig
<  
<  This file is part of Snap!.
<  
<  Snap! is free software: you can redistribute it and/or modify
<  it under the terms of the GNU Affero General Public License as
<  published by the Free Software Foundation, either version 3 of
<  the License, or (at your option) any later version.
<  
<  This program is distributed in the hope that it will be useful,
<  but WITHOUT ANY WARRANTY; without even the implied warranty of
<  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
<  GNU Affero General Public License for more details.
<  
<  You should have received a copy of the GNU Affero General Public License
<  along with this program.  If not, see <http://www.gnu.org/licenses/>.
<  
<  
<  prerequisites:
<  --------------
<  needs blocks.js, threads.js, objects.js and morphic.js
<  
<  
<  toc
<  ---
<  the following list shows the order in which all constructors are
<  defined. Use this list to locate code in this document:
<  
<  IDE_Morph
<  ProjectDialogMorph
<  SpriteIconMorph
<  TurtleIconMorph
<  CostumeIconMorph
<  WardrobeMorph
<  
<  
<  credits
<  -------
<  Nathan Dinsmore contributed saving and loading of projects,
<  ypr-Snap! project conversion and countless bugfixes
<  Ian Reynolds contributed handling and visualization of sounds
<  
<  */
---
> 
>     gui.js
> 
>     a programming environment
>     based on morphic.js, blocks.js, threads.js and objects.js
>     inspired by Scratch
> 
>     written by Jens Mönig
>     jens@moenig.org
> 
>     Copyright (C) 2014 by Jens Mönig
> 
>     This file is part of Snap!.
> 
>     Snap! is free software: you can redistribute it and/or modify
>     it under the terms of the GNU Affero General Public License as
>     published by the Free Software Foundation, either version 3 of
>     the License, or (at your option) any later version.
> 
>     This program is distributed in the hope that it will be useful,
>     but WITHOUT ANY WARRANTY; without even the implied warranty of
>     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
>     GNU Affero General Public License for more details.
> 
>     You should have received a copy of the GNU Affero General Public License
>     along with this program.  If not, see <http://www.gnu.org/licenses/>.
> 
> 
>     prerequisites:
>     --------------
>     needs blocks.js, threads.js, objects.js and morphic.js
> 
> 
>     toc
>     ---
>     the following list shows the order in which all constructors are
>     defined. Use this list to locate code in this document:
> 
>         IDE_Morph
>         ProjectDialogMorph
>         SpriteIconMorph
>         TurtleIconMorph
>         CostumeIconMorph
>         WardrobeMorph
> 
> 
>     credits
>     -------
>     Nathan Dinsmore contributed saving and loading of projects,
>     ypr-Snap! project conversion and countless bugfixes
>     Ian Reynolds contributed handling and visualization of sounds
> 
> */
57,67c57,67
<  ListWatcherMorph, isString, TextMorph, newCanvas, useBlurredShadows,
<  radians, VariableFrame, StringMorph, Point, SliderMorph, MenuMorph,
<  morphicVersion, DialogBoxMorph, ToggleButtonMorph, contains,
<  ScrollFrameMorph, StageMorph, PushButtonMorph, InputFieldMorph, FrameMorph,
<  Process, nop, SnapSerializer, ListMorph, detect, AlignmentMorph, TabMorph,
<  Costume, CostumeEditorMorph, MorphicPreferences, touchScreenSettings,
<  standardSettings, Sound, BlockMorph, ToggleMorph, InputSlotDialogMorph,
<  ScriptsMorph, isNil, SymbolMorph, BlockExportDialogMorph,
<  BlockImportDialogMorph, SnapTranslator, localize, List, InputSlotMorph,
<  SnapCloud, Uint8Array, HandleMorph, SVG_Costume, fontHeight, hex_sha512,
<  sb, CommentMorph, CommandBlockMorph, BlockLabelPlaceHolderMorph*/
---
> ListWatcherMorph, isString, TextMorph, newCanvas, useBlurredShadows,
> radians, VariableFrame, StringMorph, Point, SliderMorph, MenuMorph,
> morphicVersion, DialogBoxMorph, ToggleButtonMorph, contains,
> ScrollFrameMorph, StageMorph, PushButtonMorph, InputFieldMorph, FrameMorph,
> Process, nop, SnapSerializer, ListMorph, detect, AlignmentMorph, TabMorph,
> Costume, CostumeEditorMorph, MorphicPreferences, touchScreenSettings,
> standardSettings, Sound, BlockMorph, ToggleMorph, InputSlotDialogMorph,
> ScriptsMorph, isNil, SymbolMorph, BlockExportDialogMorph,
> BlockImportDialogMorph, SnapTranslator, localize, List, InputSlotMorph,
> SnapCloud, Uint8Array, HandleMorph, SVG_Costume, fontHeight, hex_sha512,
> sb, CommentMorph, CommandBlockMorph, BlockLabelPlaceHolderMorph, Audio*/
71c71
< modules.gui = '2013-November-07';
---
> modules.gui = '2014-February-13';
85,90c85
< /**
<  *  I am SNAP's top-level frame, the Editor window
<  *
<  * @class IDE_Morph
<  * @constructor
<  */
---
> 
101c96
< IDE_Morph.prototype.setDefaultDesign = function() {
---
> IDE_Morph.prototype.setDefaultDesign = function () {
106c101
<             = SpriteMorph.prototype.paletteTextColor;
---
>         = SpriteMorph.prototype.paletteTextColor;
109c104
<             = SpriteMorph.prototype.paletteColor.lighter(30);
---
>         = SpriteMorph.prototype.paletteColor.lighter(30);
112c107
<     IDE_Morph.prototype.backgroundColor = new Color(187, 00, 00);
---
>     IDE_Morph.prototype.backgroundColor = new Color(40, 40, 40);
116c111
<             = SpriteMorph.prototype.paletteColor.lighter(8);
---
>         = SpriteMorph.prototype.paletteColor.lighter(8);
130c125
<             = IDE_Morph.prototype.buttonLabelColor;
---
>         = IDE_Morph.prototype.buttonLabelColor;
132c127
<             = IDE_Morph.prototype.buttonLabelColor;
---
>         = IDE_Morph.prototype.buttonLabelColor;
134c129
<             = IDE_Morph.prototype.buttonLabelColor;
---
>         = IDE_Morph.prototype.buttonLabelColor;
136c131
<             = IDE_Morph.prototype.buttonLabelColor;
---
>         = IDE_Morph.prototype.buttonLabelColor;
139c134
< IDE_Morph.prototype.setFlatDesign = function() {
---
> IDE_Morph.prototype.setFlatDesign = function () {
144c139
<             = SpriteMorph.prototype.paletteTextColor;
---
>         = SpriteMorph.prototype.paletteTextColor;
170c165
<             = IDE_Morph.prototype.buttonLabelColor;
---
>         = IDE_Morph.prototype.buttonLabelColor;
172c167
<             = IDE_Morph.prototype.buttonLabelColor;
---
>         = IDE_Morph.prototype.buttonLabelColor;
174c169
<             = IDE_Morph.prototype.buttonLabelColor;
---
>         = IDE_Morph.prototype.buttonLabelColor;
176c171
<             = IDE_Morph.prototype.buttonLabelColor;
---
>         = IDE_Morph.prototype.buttonLabelColor;
179c174
< IDE_Morph.prototype.setFlatDesign();
---
> IDE_Morph.prototype.setDefaultDesign();
187c182
< IDE_Morph.prototype.init = function(isAutoFill) {
---
> IDE_Morph.prototype.init = function (isAutoFill) {
203c198
<     this.currentCategory = 'control';
---
>     this.currentCategory = 'motion';
237c232
< IDE_Morph.prototype.openIn = function(world) {
---
> IDE_Morph.prototype.openIn = function (world) {
257c252
<     SnapCloud.message = function(string) {
---
>     SnapCloud.message = function (string) {
259c254
<                 intervalHandle;
---
>             intervalHandle;
261c256
<         intervalHandle = setInterval(function() {
---
>         intervalHandle = setInterval(function () {
269c264
<     world.reactToDropOf = function(morph) {
---
>     world.reactToDropOf = function (morph) {
298,303c293,298
<      this.cloudMsg = getURL('http://snap.berkeley.edu/cloudmsg.txt');
<      motd = getURL('http://snap.berkeley.edu/motd.txt');
<      if (motd) {
<      this.inform('Snap!', motd);
<      }
<      */
---
>     this.cloudMsg = getURL('http://snap.berkeley.edu/cloudmsg.txt');
>     motd = getURL('http://snap.berkeley.edu/motd.txt');
>     if (motd) {
>         this.inform('Snap!', motd);
>     }
>     */
315,318c310,313
<                     function(each) {
<                         return hash.substr(0, 8).indexOf(each);
<                     }
<             ),
---
>                         function (each) {
>                             return hash.substr(0, 8).indexOf(each);
>                         }
>                     ),
320c315
<                     )) {
---
>                 )) {
350,372c345,358
<                     SnapCloud.encodeDict(dict),
<                     function(projectData) {
<                         var msg;
<                         myself.nextSteps([
<                             function() {
<                                 msg = myself.showMessage('Opening project...');
<                             },
<                             function() {
<                                 if (projectData.indexOf('<snapdata') === 0) {
<                                     myself.rawOpenCloudDataString(projectData);
<                                 } else if (
<                                         projectData.indexOf('<project') === 0
<                                         ) {
<                                     myself.rawOpenProjectString(projectData);
<                                 }
<                                 myself.hasChangedMedia = true;
<                             },
<                             function() {
<                                 myself.shield.destroy();
<                                 myself.shield = null;
<                                 msg.destroy();
<                                 myself.toggleAppMode(true);
<                                 myself.runScripts();
---
>                 SnapCloud.encodeDict(dict),
>                 function (projectData) {
>                     var msg;
>                     myself.nextSteps([
>                         function () {
>                             msg = myself.showMessage('Opening project...');
>                         },
>                         function () {
>                             if (projectData.indexOf('<snapdata') === 0) {
>                                 myself.rawOpenCloudDataString(projectData);
>                             } else if (
>                                 projectData.indexOf('<project') === 0
>                             ) {
>                                 myself.rawOpenProjectString(projectData);
374,377c360,372
<                         ]);
<                     },
<                     this.cloudError()
<                     );
---
>                             myself.hasChangedMedia = true;
>                         },
>                         function () {
>                             myself.shield.destroy();
>                             myself.shield = null;
>                             msg.destroy();
>                             myself.toggleAppMode(true);
>                             myself.runScripts();
>                         }
>                     ]);
>                 },
>                 this.cloudError()
>             );
396c391
< IDE_Morph.prototype.buildPanes = function() {
---
> IDE_Morph.prototype.buildPanes = function () {
408c403
< IDE_Morph.prototype.createLogo = function() {
---
> IDE_Morph.prototype.createLogo = function () {
416,417c411,412
<     this.logo.texture = '';
<     this.logo.drawNew = function() {
---
>     this.logo.texture = 'snap_logo_sm.png';
>     this.logo.drawNew = function () {
420c415
<                 gradient = context.createLinearGradient(
---
>             gradient = context.createLinearGradient(
425c420
<                 );
---
>             );
436c431
<     this.logo.drawCachedTexture = function() {
---
>     this.logo.drawCachedTexture = function () {
439,442c434,437
<                 this.cachedTexture,
<                 5,
<                 Math.round((this.height() - this.cachedTexture.height) / 2)
<                 );
---
>             this.cachedTexture,
>             5,
>             Math.round((this.height() - this.cachedTexture.height) / 2)
>         );
446c441
<     this.logo.mouseClickLeft = function() {
---
>     this.logo.mouseClickLeft = function () {
451c446
<     this.logo.setExtent(new Point(500, 150)); // dimensions are fixed
---
>     this.logo.setExtent(new Point(200, 28)); // dimensions are fixed
455c450
< IDE_Morph.prototype.createControlBar = function() {
---
> IDE_Morph.prototype.createControlBar = function () {
458,473c453,468
<             button,
<             stopButton,
<             pauseButton,
<             startButton,
<             projectButton,
<             settingsButton,
<             stageSizeButton,
<             appModeButton,
<             cloudButton,
<             x,
<             colors = [
<         this.groupColor,
<         this.frameColor.darker(50),
<         this.frameColor.darker(50)
<     ],
<             myself = this;
---
>         button,
>         stopButton,
>         pauseButton,
>         startButton,
>         projectButton,
>         settingsButton,
>         stageSizeButton,
>         appModeButton,
>         cloudButton,
>         x,
>         colors = [
>             this.groupColor,
>             this.frameColor.darker(50),
>             this.frameColor.darker(50)
>         ],
>         myself = this;
482c477
<     this.controlBar.mouseClickLeft = function() {
---
>     this.controlBar.mouseClickLeft = function () {
488,517c483,512
< //    button = new ToggleButtonMorph(
< //        null, //colors,
< //        myself, // the IDE is the target
< //        'toggleStageSize',
< //        [
< //            new SymbolMorph('smallStage', 14),
< //            new SymbolMorph('normalStage', 14)
< //        ],
< //        function () {  // query
< //            return myself.isSmallStage;
< //        }
< //    );
< //
< //    button.corner = 12;
< //    button.color = colors[0];
< //    button.highlightColor = colors[1];
< //    button.pressColor = colors[2];
< //    button.labelMinExtent = new Point(36, 18);
< //    button.padding = 0;
< //    button.labelShadowOffset = new Point(-1, -1);
< //    button.labelShadowColor = colors[1];
< //    button.labelColor = this.buttonLabelColor;
< //    button.contrast = this.buttonContrast;
< //    button.drawNew();
< //    // button.hint = 'stage size\nsmall & normal';
< //    button.fixLayout();
< //    button.refresh();
< //    stageSizeButton = button;
< //    this.controlBar.add(stageSizeButton);
< //    this.controlBar.stageSizeButton = button; // for refreshing
---
>     button = new ToggleButtonMorph(
>         null, //colors,
>         myself, // the IDE is the target
>         'toggleStageSize',
>         [
>             new SymbolMorph('smallStage', 14),
>             new SymbolMorph('normalStage', 14)
>         ],
>         function () {  // query
>             return myself.isSmallStage;
>         }
>     );
> 
>     button.corner = 12;
>     button.color = colors[0];
>     button.highlightColor = colors[1];
>     button.pressColor = colors[2];
>     button.labelMinExtent = new Point(36, 18);
>     button.padding = 0;
>     button.labelShadowOffset = new Point(-1, -1);
>     button.labelShadowColor = colors[1];
>     button.labelColor = this.buttonLabelColor;
>     button.contrast = this.buttonContrast;
>     button.drawNew();
>     // button.hint = 'stage size\nsmall & normal';
>     button.fixLayout();
>     button.refresh();
>     stageSizeButton = button;
>     this.controlBar.add(stageSizeButton);
>     this.controlBar.stageSizeButton = button; // for refreshing
521,530c516,525
<             null, //colors,
<             myself, // the IDE is the target
<             'toggleAppMode',
<             [
<                 new SymbolMorph('fullScreen', 14),
<                 new SymbolMorph('normalScreen', 14)
<             ],
<             function() {  // query
<                 return myself.isAppMode;
<             }
---
>         null, //colors,
>         myself, // the IDE is the target
>         'toggleAppMode',
>         [
>             new SymbolMorph('fullScreen', 14),
>             new SymbolMorph('normalScreen', 14)
>         ],
>         function () {  // query
>             return myself.isAppMode;
>         }
553,556c548,551
<             this,
<             'stopAllScripts',
<             new SymbolMorph('square', 14)
<             );
---
>         this,
>         'stopAllScripts',
>         new SymbolMorph('octagon', 14)
>     );
575,584c570,579
<             null, //colors,
<             myself, // the IDE is the target
<             'togglePauseResume',
<             [
<                 new SymbolMorph('pause', 12),
<                 new SymbolMorph('pointRight', 14)
<             ],
<             function() {  // query
<                 return myself.isPaused();
<             }
---
>         null, //colors,
>         myself, // the IDE is the target
>         'togglePauseResume',
>         [
>             new SymbolMorph('pause', 12),
>             new SymbolMorph('pointRight', 14)
>         ],
>         function () {  // query
>             return myself.isPaused();
>         }
607,610c602,605
<             this,
<             'pressStart',
<             new SymbolMorph('flag', 14)
<             );
---
>         this,
>         'pressStart',
>         new SymbolMorph('flag', 14)
>     );
630,634c625,629
<             this,
<             'projectMenu',
<             new SymbolMorph('file', 14)
<             //'\u270E'
<             );
---
>         this,
>         'projectMenu',
>         new SymbolMorph('file', 14)
>         //'\u270E'
>     );
652,674c647,669
< //    // settingsButton
< //    button = new PushButtonMorph(
< //        this,
< //        'settingsMenu',
< //        new SymbolMorph('gears', 14)
< //        //'\u2699'
< //    );
< //    button.corner = 12;
< //    button.color = colors[0];
< //    button.highlightColor = colors[1];
< //    button.pressColor = colors[2];
< //    button.labelMinExtent = new Point(36, 18);
< //    button.padding = 0;
< //    button.labelShadowOffset = new Point(-1, -1);
< //    button.labelShadowColor = colors[1];
< //    button.labelColor = this.buttonLabelColor;
< //    button.contrast = this.buttonContrast;
< //    button.drawNew();
< //    // button.hint = 'edit settings';
< //    button.fixLayout();
< //    settingsButton = button;
< //    this.controlBar.add(settingsButton);
< //    this.controlBar.settingsButton = settingsButton; // for menu positioning
---
>     // settingsButton
>     button = new PushButtonMorph(
>         this,
>         'settingsMenu',
>         new SymbolMorph('gears', 14)
>         //'\u2699'
>     );
>     button.corner = 12;
>     button.color = colors[0];
>     button.highlightColor = colors[1];
>     button.pressColor = colors[2];
>     button.labelMinExtent = new Point(36, 18);
>     button.padding = 0;
>     button.labelShadowOffset = new Point(-1, -1);
>     button.labelShadowColor = colors[1];
>     button.labelColor = this.buttonLabelColor;
>     button.contrast = this.buttonContrast;
>     button.drawNew();
>     // button.hint = 'edit settings';
>     button.fixLayout();
>     settingsButton = button;
>     this.controlBar.add(settingsButton);
>     this.controlBar.settingsButton = settingsButton; // for menu positioning
678,681c673,676
<             this,
<             'cloudMenu',
<             new SymbolMorph('cloud', 11)
<             );
---
>         this,
>         'cloudMenu',
>         new SymbolMorph('cloud', 11)
>     );
699c694
<     this.controlBar.fixLayout = function() {
---
>     this.controlBar.fixLayout = function () {
701,707c696,702
<         [stopButton, pauseButton, startButton, appModeButton, cloudButton, projectButton].forEach(
<                 function(button) {
<                     button.setCenter(myself.controlBar.center());
<                     button.setRight(x);
<                     x -= button.width();
<                     x -= padding;
<                 }
---
>         [stopButton, pauseButton, startButton].forEach(
>             function (button) {
>                 button.setCenter(myself.controlBar.center());
>                 button.setRight(x);
>                 x -= button.width();
>                 x -= padding;
>             }
711c706,715
<                 * (myself.isSmallStage ? myself.stageRatio : 1));
---
>             * (myself.isSmallStage ? myself.stageRatio : 1));
> 
>         [stageSizeButton, appModeButton].forEach(
>             function (button) {
>                 x += padding;
>                 button.setCenter(myself.controlBar.center());
>                 button.setLeft(x);
>                 x += button.width();
>             }
>         );
713,730c717,724
< //        [stageSizeButton, appModeButton].forEach(
< //        [appModeButton].forEach(
< //                function(button) {
< //                    x += padding;
< //                    button.setCenter(myself.controlBar.center());
< //                    button.setLeft(x);
< //                    x += button.width();
< //                }
< //        );
< 
< //        settingsButton.setCenter(myself.controlBar.center());
< //        settingsButton.setLeft(this.left());
< //
< //        cloudButton.setCenter(myself.controlBar.center());
< //        cloudButton.setRight(this.left());
< //
< //        projectButton.setCenter(myself.controlBar.center());
< //        projectButton.setRight(cloudButton.left() - padding);
---
>         settingsButton.setCenter(myself.controlBar.center());
>         settingsButton.setLeft(this.left());
> 
>         cloudButton.setCenter(myself.controlBar.center());
>         cloudButton.setRight(settingsButton.left() - padding);
> 
>         projectButton.setCenter(myself.controlBar.center());
>         projectButton.setRight(cloudButton.left() - padding);
735c729
<     this.controlBar.updateLabel = function() {
---
>     this.controlBar.updateLabel = function () {
747,755c741,749
<                 (myself.projectName || localize('untitled')) + suffix,
<                 14,
<                 'sans-serif',
<                 true,
<                 false,
<                 false,
<                 MorphicPreferences.isFlat ? null : new Point(2, 1),
<                 myself.frameColor.darker(myself.buttonContrast)
<                 );
---
>             (myself.projectName || localize('untitled')) + suffix,
>             14,
>             'sans-serif',
>             true,
>             false,
>             false,
>             MorphicPreferences.isFlat ? null : new Point(2, 1),
>             myself.frameColor.darker(myself.buttonContrast)
>         );
760c754
<         this.label.setRight(this.projectButton.left() - 3 * padding);
---
>         this.label.setLeft(this.settingsButton.right() + padding);
764c758
< IDE_Morph.prototype.createCategories = function() {
---
> IDE_Morph.prototype.createCategories = function () {
773,774c767
<     this.categories.silentSetWidth(320); // width is fixed
< //    this.categories.silentSetWidth(this.logo.width()); // width is fixed
---
>     this.categories.silentSetWidth(this.logo.width()); // width is fixed
777,783c770,776
<         var labelWidth = 150,
<                 colors = [
<             myself.frameColor,
<             myself.frameColor.darker(50),
<             SpriteMorph.prototype.blockColor[category]
<         ],
<                 button;
---
>         var labelWidth = 75,
>             colors = [
>                 myself.frameColor,
>                 myself.frameColor.darker(50),
>                 SpriteMorph.prototype.blockColor[category]
>             ],
>             button;
786,804c779,797
<                 colors,
<                 myself, // the IDE is the target
<                 function() {
<                     myself.currentCategory = category;
<                     myself.categories.children.forEach(function(each) {
<                         each.refresh();
<                     });
<                     myself.refreshPalette(true);
<                 },
<                 category[0].toUpperCase().concat(category.slice(1)), // label
<                 function() {  // query
<                     return myself.currentCategory === category;
<                 },
<                 null, // env
<                 null, // hint
<                 null, // template cache
<                 labelWidth, // minWidth
<                 true // has preview
<                 );
---
>             colors,
>             myself, // the IDE is the target
>             function () {
>                 myself.currentCategory = category;
>                 myself.categories.children.forEach(function (each) {
>                     each.refresh();
>                 });
>                 myself.refreshPalette(true);
>             },
>             category[0].toUpperCase().concat(category.slice(1)), // label
>             function () {  // query
>                 return myself.currentCategory === category;
>             },
>             null, // env
>             null, // hint
>             null, // template cache
>             labelWidth, // minWidth
>             true // has preview
>         );
819,822c812,815
<                 buttonHeight = myself.categories.children[0].height(),
<                 border = 3,
<                 rows = Math.ceil((myself.categories.children.length) / 2),
<                 xPadding = (myself.categories.width()
---
>             buttonHeight = myself.categories.children[0].height(),
>             border = 3,
>             rows =  Math.ceil((myself.categories.children.length) / 2),
>             xPadding = (myself.categories.width()
825,830c818,823
<                 yPadding = 2,
<                 l = myself.categories.left(),
<                 t = myself.categories.top(),
<                 i = 0,
<                 row,
<                 col;
---
>             yPadding = 2,
>             l = myself.categories.left(),
>             t = myself.categories.top(),
>             i = 0,
>             row,
>             col;
832c825
<         myself.categories.children.forEach(function(button) {
---
>         myself.categories.children.forEach(function (button) {
837,839c830,832
<                     l + (col * xPadding + ((col - 1) * buttonWidth)),
<                     t + (row * yPadding + ((row - 1) * buttonHeight) + border)
<                     ));
---
>                 l + (col * xPadding + ((col - 1) * buttonWidth)),
>                 t + (row * yPadding + ((row - 1) * buttonHeight) + border)
>             ));
843c836
<                 (rows + 1) * yPadding
---
>             (rows + 1) * yPadding
846c839
<                 );
---
>         );
849c842
<     SpriteMorph.prototype.categories.forEach(function(cat) {
---
>     SpriteMorph.prototype.categories.forEach(function (cat) {
858c851
< IDE_Morph.prototype.createPalette = function() {
---
> IDE_Morph.prototype.createPalette = function () {
872c865
<     this.palette.reactToDropOf = function(droppedMorph) {
---
>     this.palette.reactToDropOf = function (droppedMorph) {
888c881
<     this.palette.setWidth(320);
---
>     this.palette.setWidth(this.logo.width());
894c887
< IDE_Morph.prototype.createStage = function() {
---
> IDE_Morph.prototype.createStage = function () {
896d888
< 
905c897
<                 this.stage.center().subtract(
---
>             this.stage.center().subtract(
907,908c899,900
<                 )
<                 );
---
>             )
>         );
914,916c906
< IDE_Morph.prototype.createSpriteBar = function() {
<     var ideScripts = this.currentSprite.scripts;
<     var thiside = this;
---
> IDE_Morph.prototype.createSpriteBar = function () {
919,927c909,917
<             thumbSize = new Point(45, 45),
<             nameField,
<             padlock,
<             thumbnail,
<             tabCorner = 15,
<             tabColors = this.tabColors,
<             tabBar = new AlignmentMorph('row', -tabCorner * 2),
<             tab,
<             myself = this;
---
>         thumbSize = new Point(45, 45),
>         nameField,
>         padlock,
>         thumbnail,
>         tabCorner = 15,
>         tabColors = this.tabColors,
>         tabBar = new AlignmentMorph('row', -tabCorner * 2),
>         tab,
>         myself = this;
931a922
> 
933,934c924
< //    this.spriteBar.color = this.frameColor;
<     this.spriteBar.color = new Color(187, 00, 00);
---
>     this.spriteBar.color = this.frameColor;
939c929
<                 button;
---
>             button;
942,961c932,951
<                 colors,
<                 myself, // the IDE is the target
<                 function() {
<                     if (myself.currentSprite instanceof SpriteMorph) {
<                         myself.currentSprite.rotationStyle = rotationStyle;
<                         myself.currentSprite.changed();
<                         myself.currentSprite.drawNew();
<                         myself.currentSprite.changed();
<                     }
<                     rotationStyleButtons.forEach(function(each) {
<                         each.refresh();
<                     });
<                 },
<                 ['\u2192', '\u21BB', '\u2194'][rotationStyle], // label
<                 function() {  // query
<                     return myself.currentSprite instanceof SpriteMorph
<                             && myself.currentSprite.rotationStyle === rotationStyle;
<                 },
<                 null, // environment
<                 localize(
---
>             colors,
>             myself, // the IDE is the target
>             function () {
>                 if (myself.currentSprite instanceof SpriteMorph) {
>                     myself.currentSprite.rotationStyle = rotationStyle;
>                     myself.currentSprite.changed();
>                     myself.currentSprite.drawNew();
>                     myself.currentSprite.changed();
>                 }
>                 rotationStyleButtons.forEach(function (each) {
>                     each.refresh();
>                 });
>             },
>             ['\u2192', '\u21BB', '\u2194'][rotationStyle], // label
>             function () {  // query
>                 return myself.currentSprite instanceof SpriteMorph
>                     && myself.currentSprite.rotationStyle === rotationStyle;
>             },
>             null, // environment
>             localize(
965,966c955,956
<                 )
<                 );
---
>             )
>         );
979,981c969,971
<                 + ((rotationStyleButtons.length - 1) * (button.height() + 2))
<                 );
< //        myself.spriteBar.add(button);
---
>             + ((rotationStyleButtons.length - 1) * (button.height() + 2))
>             );
>         myself.spriteBar.add(button);
997,998c987,988
<             rotationStyleButtons[0].topRight().add(new Point(5, 3))
<             );
---
>         rotationStyleButtons[0].topRight().add(new Point(5, 3))
>     );
1003c993
<     thumbnail.step = function() {
---
>     thumbnail.step = function () {
1017c1007
<     nameField.accept = function() {
---
>     nameField.accept = function () {
1020c1010
<     this.spriteBar.reactToEdit = function() {
---
>     this.spriteBar.reactToEdit = function () {
1024c1014
<     // padlock 
---
>     // padlock
1026,1035c1016,1025
<             'checkbox',
<             null,
<             function() {
<                 myself.currentSprite.isDraggable =
<                         !myself.currentSprite.isDraggable;
<             },
<             localize('draggable'),
<             function() {
<                 return myself.currentSprite.isDraggable;
<             }
---
>         'checkbox',
>         null,
>         function () {
>             myself.currentSprite.isDraggable =
>                 !myself.currentSprite.isDraggable;
>         },
>         localize('draggable'),
>         function () {
>             return myself.currentSprite.isDraggable;
>         }
1056,1058d1045
<     if (this.currentSprite.name == "Horloge") {
<         padlock.hide();
<     }
1061c1048
<     tabBar.tabTo = function(tabString) {
---
>     tabBar.tabTo = function (tabString) {
1064c1051
<         this.children.forEach(function(each) {
---
>         this.children.forEach(function (each) {
1066,1068c1053
<             if (each.state) {
<                 active = each;
<             }
---
>             if (each.state) {active = each; }
1076,1105c1061,1067
<             tabColors,
<             null, // target
<             function() {
<                 tabBar.tabTo('scripts');
<             },
<             localize('Scripts'), // label
<             function() {  // query
<                 return myself.currentTab === 'scripts';
<             }
<     );
<     tab.padding = 3;
<     tab.corner = tabCorner;
<     tab.edge = 1;
<     tab.labelShadowOffset = new Point(-1, -1);
<     tab.labelShadowColor = tabColors[1];
<     tab.labelColor = this.buttonLabelColor;
<     tab.drawNew();
<     tab.fixLayout();
<     tabBar.add(tab);
< 
<     tab = new TabMorph(
<             tabColors,
<             null, // target
<             function() {
<                 tabBar.tabTo('costumes');
<             },
<             localize('Costumes'), // label
<             function() {  // query
<                 return myself.currentTab === 'costumes';
<             }
---
>         tabColors,
>         null, // target
>         function () {tabBar.tabTo('scripts'); },
>         localize('Scripts'), // label
>         function () {  // query
>             return myself.currentTab === 'scripts';
>         }
1118,1126c1080,1086
<             tabColors,
<             null, // target
<             function() {
<                 tabBar.tabTo('sounds');
<             },
<             localize('Sounds'), // label
<             function() {  // query
<                 return myself.currentTab === 'sounds';
<             }
---
>         tabColors,
>         null, // target
>         function () {tabBar.tabTo('costumes'); },
>         localize('Costumes'), // label
>         function () {  // query
>             return myself.currentTab === 'costumes';
>         }
1139,1147c1099,1105
<             tabColors,
<             null, // target
<             function() {
<                 tabBar.tabTo('eventstab');
<             },
<             localize('Code'), // label
<             function() {  // query
<                 return myself.currentTab === 'eventstab';
<             }
---
>         tabColors,
>         null, // target
>         function () {tabBar.tabTo('sounds'); },
>         localize('Sounds'), // label
>         function () {  // query
>             return myself.currentTab === 'sounds';
>         }
1157d1114
< 
1160d1116
< 
1162c1118
<     tabBar.children.forEach(function(each) {
---
>     tabBar.children.forEach(function (each) {
1168,1169c1124
<     this.spriteBar.fixLayout = function() {
< //        this.tabBar.setLeft(this.left());
---
>     this.spriteBar.fixLayout = function () {
1173d1127
< 
1176c1130
< IDE_Morph.prototype.createSpriteEditor = function() {
---
> IDE_Morph.prototype.createSpriteEditor = function () {
1179c1133
<             myself = this;
---
>         myself = this;
1191,1194c1145,1148
<                 scripts,
<                 null,
<                 this.sliderColor
<                 );
---
>             scripts,
>             null,
>             this.sliderColor
>         );
1198d1151
< 
1206,1241d1158
<     } else if (this.currentTab === 'eventstab') {
< 
<         var blocks = jQuery.extend(true, {}, scripts.children);
<         var arrayblocks = $.map(blocks, function(value, index) {
<             return [value];
<         });
<         var blocksserializer = new SnapSerializer();
<         var thisxml = arrayblocks.toXML(new SnapSerializer());
<         var xmlDoc = jQuery.parseXML(thisxml);
<         
<         
<         scripts.isDraggable = false;
<         scripts.color = this.groupColor;
<         scripts.texture = this.scriptsPaneTexture;
< 
<         this.spriteEditor = new ScrollFrameMorph(
<                 null,
<                 null,
<                 this.sliderColor
<                 );
<         this.spriteEditor.padding = 10;
<         this.spriteEditor.growth = 50;
<         this.spriteEditor.isDraggable = false;
< 
<         this.spriteEditor.acceptsDrops = false;
<         this.spriteEditor.contents.acceptsDrops = false;
<         txt = new TextMorph(parseMobinet(xmlDoc));
<         txt.fontSize = 9;
<         txt.setColor(SpriteMorph.prototype.paletteTextColor);
< 
<         txt.setPosition(new Point(0, 0));
<         this.spriteEditor.addContents(txt);
<         scripts.scrollFrame = this.spriteEditor;
<         this.add(this.spriteEditor);
<         this.spriteEditor.scrollX(this.spriteEditor.padding);
<         this.spriteEditor.scrollY(this.spriteEditor.padding);
1244,1246c1161,1163
<                 this.currentSprite,
<                 this.sliderColor
<                 );
---
>             this.currentSprite,
>             this.sliderColor
>         );
1255,1257c1172,1174
<                 this.currentSprite,
<                 this.sliderColor
<                 );
---
>             this.currentSprite,
>             this.sliderColor
>         );
1267c1184
<         this.spriteEditor.reactToDropOf = function(droppedMorph) {
---
>         this.spriteEditor.reactToDropOf = function (droppedMorph) {
1280c1197
< IDE_Morph.prototype.createCorralBar = function() {
---
> IDE_Morph.prototype.createCorralBar = function () {
1283,1289c1200,1206
<             newbutton,
<             paintbutton,
<             colors = [
<         this.groupColor,
<         this.frameColor.darker(50),
<         this.frameColor.darker(50)
<     ];
---
>         newbutton,
>         paintbutton,
>         colors = [
>             this.groupColor,
>             this.frameColor.darker(50),
>             this.frameColor.darker(50)
>         ];
1302,1305c1219,1222
<             this,
<             "addNewSprite",
<             new SymbolMorph("turtle", 14)
<             );
---
>         this,
>         "addNewSprite",
>         new SymbolMorph("turtle", 14)
>     );
1324,1327c1241,1244
<             this,
<             "paintNewSprite",
<             new SymbolMorph("brush", 15)
<             );
---
>         this,
>         "paintNewSprite",
>         new SymbolMorph("brush", 15)
>     );
1343,1344c1260,1261
<             this.corralBar.left() + padding + newbutton.width() + padding
<             );
---
>         this.corralBar.left() + padding + newbutton.width() + padding
>     );
1348c1265
< IDE_Morph.prototype.createCorral = function() {
---
> IDE_Morph.prototype.createCorral = function () {
1368c1285
<     frame.contents.wantsDropOf = function(morph) {
---
>     frame.contents.wantsDropOf = function (morph) {
1372c1289
<     frame.contents.reactToDropOf = function(spriteIcon) {
---
>     frame.contents.reactToDropOf = function (spriteIcon) {
1378c1295
<     this.sprites.asArray().forEach(function(morph) {
---
>     this.sprites.asArray().forEach(function (morph) {
1386c1303
<     this.corral.fixLayout = function() {
---
>     this.corral.fixLayout = function () {
1391,1393c1308,1310
<                 this.right() - this.frame.left(),
<                 this.height()
<                 ));
---
>             this.right() - this.frame.left(),
>             this.height()
>         ));
1398c1315
<     this.corral.arrangeIcons = function() {
---
>     this.corral.arrangeIcons = function () {
1400,1402c1317,1319
<                 y = this.frame.top(),
<                 max = this.frame.right(),
<                 start = this.frame.left();
---
>             y = this.frame.top(),
>             max = this.frame.right(),
>             start = this.frame.left();
1404c1321
<         this.frame.contents.children.forEach(function(icon) {
---
>         this.frame.contents.children.forEach(function (icon) {
1417c1334
<     this.corral.addSprite = function(sprite) {
---
>     this.corral.addSprite = function (sprite) {
1422c1339
<     this.corral.refresh = function() {
---
>     this.corral.refresh = function () {
1424c1341
<         this.frame.contents.children.forEach(function(icon) {
---
>         this.frame.contents.children.forEach(function (icon) {
1429c1346
<     this.corral.wantsDropOf = function(morph) {
---
>     this.corral.wantsDropOf = function (morph) {
1433c1350
<     this.corral.reactToDropOf = function(spriteIcon) {
---
>     this.corral.reactToDropOf = function (spriteIcon) {
1435c1352
<                 pos = spriteIcon.position();
---
>             pos = spriteIcon.position();
1437c1354
<         this.frame.contents.children.forEach(function(icon) {
---
>         this.frame.contents.children.forEach(function (icon) {
1450c1367
< IDE_Morph.prototype.fixLayout = function(situation) {
---
> IDE_Morph.prototype.fixLayout = function (situation) {
1454c1371
<     this.logo.setHeight(70);
---
> 
1461d1377
<         this.controlBar.setHeight(70);
1465d1380
< //        this.categories.setLeft(this.logo.left());
1467c1382
<         this.categories.setTop(this.logo.bottom() + 150);
---
>         this.categories.setTop(this.logo.bottom());
1479,1480c1394,1395
<                     (this.width() - padding * 2) / this.stage.dimensions.x,
<                     (this.height() - this.controlBar.height() * 2 - padding * 2)
---
>                 (this.width() - padding * 2) / this.stage.dimensions.x,
>                 (this.height() - this.controlBar.height() * 2 - padding * 2)
1482c1397
<                     ) * 10) / 10);
---
>             ) * 10) / 10);
1486,1491c1401
< //            this.stage.setScale(this.isSmallStage ? this.stageRatio : 1.7);
<             this.stage.setScale(Math.floor(Math.min(
<                     (this.width() - padding * 2 - 700) / this.stage.dimensions.x,
<                     (this.height() - this.controlBar.height() * 2 - padding * 2)
<                     / this.stage.dimensions.y
<                     ) * 10) / 10);
---
>             this.stage.setScale(this.isSmallStage ? this.stageRatio : 1);
1494,1496d1403
<             this.stage.setLeft(700);
< 
< 
1500,1502c1407
<         this.spriteBar.setPosition(this.logo.bottomRight());
<         this.spriteBar.setLeft(320);
< //        this.spriteBar.setPosition(new Point(320+padding,320+padding));
---
>         this.spriteBar.setPosition(this.logo.bottomRight().add(padding));
1504,1506c1409,1411
<                 Math.max(0, this.stage.left() - padding - this.spriteBar.left()),
<                 this.categories.top() - this.spriteBar.top() - padding
<                 ));
---
>             Math.max(0, this.stage.left() - padding - this.spriteBar.left()),
>             this.categories.bottom() - this.spriteBar.top() - padding
>         ));
1513,1515c1418,1420
<                     this.spriteBar.width(),
<                     this.bottom() - this.spriteEditor.top()
<                     ));
---
>                 this.spriteBar.width(),
>                 this.bottom() - this.spriteEditor.top()
>             ));
1519,1524c1424,1426
< //        this.corralBar.setLeft(this.stage.left());
< //        this.corralBar.setTop(this.stage.bottom() + padding);
< //        this.corralBar.setWidth(this.stage.width());
<         this.corralBar.setPosition(this.logo.bottomLeft());
<         this.corralBar.setWidth(320);
<         this.corralBar.setHeight(70);
---
>         this.corralBar.setLeft(this.stage.left());
>         this.corralBar.setTop(this.stage.bottom() + padding);
>         this.corralBar.setWidth(this.stage.width());
1529,1532c1431,1432
<             this.corral.setWidth(320);
< //            this.corral.setHeight(this.bottom() - this.corral.top());
<             this.corral.setHeight(70);
< 
---
>             this.corral.setWidth(this.stage.width());
>             this.corral.setHeight(this.bottom() - this.corral.top());
1541c1441
< IDE_Morph.prototype.setProjectName = function(string) {
---
> IDE_Morph.prototype.setProjectName = function (string) {
1549,1551c1449,1452
< IDE_Morph.prototype.setExtent = function(point) {
<     var minExt,
<             ext;
---
> IDE_Morph.prototype.setExtent = function (point) {
>     var padding = new Point(430, 110),
>         minExt,
>         ext;
1556,1557c1457,1458
<                 this.controlBar.height() + 10
<                 );
---
>             this.controlBar.height() + 10
>         );
1559,1564c1460,1469
<         /* // auto-switches to small stage mode, commented out b/c I don't like it
<          if (point.x < 910) {
<          this.isSmallStage = true;
<          this.stageRatio = 0.5;
<          }
<          */
---
>     /* // auto-switches to small stage mode, commented out b/c I don't like it
>         if (point.x < 910) {
>             this.isSmallStage = true;
>             this.stageRatio = 0.5;
>         }
>     */
>         minExt = this.isSmallStage ?
>                 padding.add(StageMorph.prototype.dimensions.divideBy(2))
>                       : padding.add(StageMorph.prototype.dimensions);
> /*
1566a1472
> */
1575c1481
< IDE_Morph.prototype.reactToWorldResize = function(rect) {
---
> IDE_Morph.prototype.reactToWorldResize = function (rect) {
1586c1492
< IDE_Morph.prototype.droppedImage = function(aCanvas, name) {
---
> IDE_Morph.prototype.droppedImage = function (aCanvas, name) {
1588,1590c1494,1496
<             aCanvas,
<             name ? name.split('.')[0] : '' // up to period
<             );
---
>         aCanvas,
>         name ? name.split('.')[0] : '' // up to period
>     );
1594,1595c1500,1501
<                 'Unable to import this image',
<                 'The picture you wish to import has been\n' +
---
>             'Unable to import this image',
>             'The picture you wish to import has been\n' +
1600c1506
<                 );
---
>         );
1610c1516
< IDE_Morph.prototype.droppedSVG = function(anImage, name) {
---
> IDE_Morph.prototype.droppedSVG = function (anImage, name) {
1617,1619c1523,1525
<             'SVG costumes are\nnot yet fully supported\nin every browser',
<             2
<             );
---
>         'SVG costumes are\nnot yet fully supported\nin every browser',
>         2
>     );
1622c1528
< IDE_Morph.prototype.droppedAudio = function(anAudio, name) {
---
> IDE_Morph.prototype.droppedAudio = function (anAudio, name) {
1628c1534
< IDE_Morph.prototype.droppedText = function(aString, name) {
---
> IDE_Morph.prototype.droppedText = function (aString, name) {
1647c1553
< IDE_Morph.prototype.droppedBinary = function(anArrayBuffer, name) {
---
> IDE_Morph.prototype.droppedBinary = function (anArrayBuffer, name) {
1650,1651c1556,1557
<             myself = this,
<             suffix = name.substring(name.length - 3);
---
>         myself = this,
>         suffix = name.substring(name.length - 3);
1653,1655c1559
<     if (suffix.toLowerCase() !== 'ypr') {
<         return;
<     }
---
>     if (suffix.toLowerCase() !== 'ypr') {return; }
1659,1660c1563,1564
<                 pname = lbl.split('.')[0]; // up to period
<         reader.onload = function(info) {
---
>             pname = lbl.split('.')[0]; // up to period
>         reader.onload = function (info) {
1669,1671c1573
<         ypr.onload = function() {
<             loadYPR(anArrayBuffer, name);
<         };
---
>         ypr.onload = function () {loadYPR(anArrayBuffer, name); };
1681c1583
< IDE_Morph.prototype.refreshPalette = function(shouldIgnorePosition) {
---
> IDE_Morph.prototype.refreshPalette = function (shouldIgnorePosition) {
1691c1593
< IDE_Morph.prototype.pressStart = function() {
---
> IDE_Morph.prototype.pressStart = function () {
1694,1695d1595
<         this.toggleFastTracking();
<         this.toggleFastTracking();
1701c1601
< IDE_Morph.prototype.toggleFastTracking = function() {
---
> IDE_Morph.prototype.toggleFastTracking = function () {
1709c1609
< IDE_Morph.prototype.toggleVariableFrameRate = function() {
---
> IDE_Morph.prototype.toggleVariableFrameRate = function () {
1719c1619
< IDE_Morph.prototype.startFastTracking = function() {
---
> IDE_Morph.prototype.startFastTracking = function () {
1727c1627
< IDE_Morph.prototype.stopFastTracking = function() {
---
> IDE_Morph.prototype.stopFastTracking = function () {
1735,1736c1635
< IDE_Morph.prototype.runScripts = function() {
< 
---
> IDE_Morph.prototype.runScripts = function () {
1738d1636
< 
1741c1639
< IDE_Morph.prototype.togglePauseResume = function() {
---
> IDE_Morph.prototype.togglePauseResume = function () {
1750,1753c1648,1649
< IDE_Morph.prototype.isPaused = function() {
<     if (!this.stage) {
<         return false;
<     }
---
> IDE_Morph.prototype.isPaused = function () {
>     if (!this.stage) {return false; }
1757c1653
< IDE_Morph.prototype.stopAllScripts = function() {
---
> IDE_Morph.prototype.stopAllScripts = function () {
1761c1657
< IDE_Morph.prototype.selectSprite = function(sprite) {
---
> IDE_Morph.prototype.selectSprite = function (sprite) {
1773c1669
< IDE_Morph.prototype.defaultDesign = function() {
---
> IDE_Morph.prototype.defaultDesign = function () {
1779c1675
< IDE_Morph.prototype.flatDesign = function() {
---
> IDE_Morph.prototype.flatDesign = function () {
1785c1681
< IDE_Morph.prototype.refreshIDE = function() {
---
> IDE_Morph.prototype.refreshIDE = function () {
1809c1705
< IDE_Morph.prototype.applySavedSettings = function() {
---
> IDE_Morph.prototype.applySavedSettings = function () {
1811,1816c1707,1712
<             zoom = this.getSetting('zoom'),
<             language = this.getSetting('language'),
<             click = this.getSetting('click'),
<             longform = this.getSetting('longform'),
<             plainprototype = this.getSetting('plainprototype');
<     language = "fr";
---
>         zoom = this.getSetting('zoom'),
>         language = this.getSetting('language'),
>         click = this.getSetting('click'),
>         longform = this.getSetting('longform'),
>         plainprototype = this.getSetting('plainprototype');
> 
1854c1750
< IDE_Morph.prototype.saveSetting = function(key, value) {
---
> IDE_Morph.prototype.saveSetting = function (key, value) {
1860c1756
< IDE_Morph.prototype.getSetting = function(key) {
---
> IDE_Morph.prototype.getSetting = function (key) {
1867c1763
< IDE_Morph.prototype.removeSetting = function(key) {
---
> IDE_Morph.prototype.removeSetting = function (key) {
1875c1771
< IDE_Morph.prototype.addNewSprite = function() {
---
> IDE_Morph.prototype.addNewSprite = function () {
1877c1773
<             rnd = Process.prototype.reportRandom;
---
>         rnd = Process.prototype.reportRandom;
1880c1776
<             + (this.corral.frame.contents.children.length + 1);
---
>         + (this.corral.frame.contents.children.length + 1);
1896c1792
< IDE_Morph.prototype.paintNewSprite = function() {
---
> IDE_Morph.prototype.paintNewSprite = function () {
1898,1899c1794,1795
<             cos = new Costume(),
<             myself = this;
---
>         cos = new Costume(),
>         myself = this;
1902c1798
<             (this.corral.frame.contents.children.length + 1);
---
>         (this.corral.frame.contents.children.length + 1);
1909,1918c1805,1812
<             this.world(),
<             this,
<             true,
<             function() {
<                 myself.removeSprite(sprite);
<             },
<             function() {
<                 sprite.addCostume(cos);
<                 sprite.wearCostume(cos);
<             }
---
>         this.world(),
>         this,
>         true,
>         function () {myself.removeSprite(sprite); },
>         function () {
>             sprite.addCostume(cos);
>             sprite.wearCostume(cos);
>         }
1922c1816
< IDE_Morph.prototype.duplicateSprite = function(sprite) {
---
> IDE_Morph.prototype.duplicateSprite = function (sprite) {
1934c1828
< IDE_Morph.prototype.removeSprite = function(sprite) {
---
> IDE_Morph.prototype.removeSprite = function (sprite) {
1938c1832
<     this.stage.watchers().forEach(function(watcher) {
---
>     this.stage.watchers().forEach(function (watcher) {
1944,1946c1838
<     if (idx < 1) {
<         return;
<     }
---
>     if (idx < 1) {return; }
1949,1952c1841,1842
<             this.stage.children,
<             function(morph) {
<                 return morph instanceof SpriteMorph;
<             }
---
>         this.stage.children,
>         function (morph) {return morph instanceof SpriteMorph; }
1962c1852
< IDE_Morph.prototype.userMenu = function() {
---
> IDE_Morph.prototype.userMenu = function () {
1968,2015c1858,1905
< IDE_Morph.prototype.snapMenu = function() {
< //    var menu,
< //            world = this.world();
< //
< //    menu = new MenuMorph(this);
< //    menu.addItem('About...', 'aboutSnap');
< //    menu.addLine();
< //    menu.addItem(
< //            'Reference manual',
< //            function() {
< //                window.open('help/SnapManual.pdf', 'SnapReferenceManual');
< //            }
< //    );
< //    menu.addItem(
< //            'Snap! website',
< //            function() {
< //                window.open('http://snap.berkeley.edu/', 'SnapWebsite');
< //            }
< //    );
< //    menu.addItem(
< //            'Download source',
< //            function() {
< //                window.open(
< //                        'http://snap.berkeley.edu/snapsource/snap.zip',
< //                        'SnapSource'
< //                        );
< //            }
< //    );
< //    if (world.isDevMode) {
< //        menu.addLine();
< //        menu.addItem(
< //                'Switch back to user mode',
< //                'switchToUserMode',
< //                'disable deep-Morphic\ncontext menus'
< //                + '\nand show user-friendly ones',
< //                new Color(0, 100, 0)
< //                );
< //    } else if (world.currentKey === 16) { // shift-click
< //        menu.addLine();
< //        menu.addItem(
< //                'Switch to dev mode',
< //                'switchToDevMode',
< //                'enable Morphic\ncontext menus\nand inspectors,'
< //                + '\nnot user-friendly!',
< //                new Color(100, 0, 0)
< //                );
< //    }
< //    menu.popup(world, this.logo.bottomLeft());
---
> IDE_Morph.prototype.snapMenu = function () {
>     var menu,
>         world = this.world();
> 
>     menu = new MenuMorph(this);
>     menu.addItem('About...', 'aboutSnap');
>     menu.addLine();
>     menu.addItem(
>         'Reference manual',
>         function () {
>             window.open('help/SnapManual.pdf', 'SnapReferenceManual');
>         }
>     );
>     menu.addItem(
>         'Snap! website',
>         function () {
>             window.open('http://snap.berkeley.edu/', 'SnapWebsite');
>         }
>     );
>     menu.addItem(
>         'Download source',
>         function () {
>             window.open(
>                 'http://snap.berkeley.edu/snapsource/snap.zip',
>                 'SnapSource'
>             );
>         }
>     );
>     if (world.isDevMode) {
>         menu.addLine();
>         menu.addItem(
>             'Switch back to user mode',
>             'switchToUserMode',
>             'disable deep-Morphic\ncontext menus'
>                 + '\nand show user-friendly ones',
>             new Color(0, 100, 0)
>         );
>     } else if (world.currentKey === 16) { // shift-click
>         menu.addLine();
>         menu.addItem(
>             'Switch to dev mode',
>             'switchToDevMode',
>             'enable Morphic\ncontext menus\nand inspectors,'
>                 + '\nnot user-friendly!',
>             new Color(100, 0, 0)
>         );
>     }
>     menu.popup(world, this.logo.bottomLeft());
2018c1908
< IDE_Morph.prototype.cloudMenu = function() {
---
> IDE_Morph.prototype.cloudMenu = function () {
2020,2023c1910,1913
<             myself = this,
<             world = this.world(),
<             pos = this.controlBar.cloudButton.bottomLeft(),
<             shiftClicked = (world.currentKey === 16);
---
>         myself = this,
>         world = this.world(),
>         pos = this.controlBar.cloudButton.bottomLeft(),
>         shiftClicked = (world.currentKey === 16);
2028,2032c1918,1922
<                 'url...',
<                 'setCloudURL',
<                 null,
<                 new Color(100, 0, 0)
<                 );
---
>             'url...',
>             'setCloudURL',
>             null,
>             new Color(100, 0, 0)
>         );
2037,2039c1927,1929
<                 'Login...',
<                 'initializeCloud'
<                 );
---
>             'Login...',
>             'initializeCloud'
>         );
2041,2043c1931,1933
<                 'Signup...',
<                 'createCloudAccount'
<                 );
---
>             'Signup...',
>             'createCloudAccount'
>         );
2045,2047c1935,1937
<                 'Reset Password...',
<                 'resetCloudPassword'
<                 );
---
>             'Reset Password...',
>             'resetCloudPassword'
>         );
2050,2052c1940,1942
<                 'Logout',
<                 'logout'
<                 );
---
>             'Logout',
>             'logout'
>         );
2054,2056c1944,1946
<                 'Change Password...',
<                 'changeCloudPassword'
<                 );
---
>             'Change Password...',
>             'changeCloudPassword'
>         );
2061,2073c1951,1963
<                 'export project media only...',
<                 function() {
<                     if (myself.projectName) {
<                         myself.exportProjectMedia(myself.projectName);
<                     } else {
<                         myself.prompt('Export Project As...', function(name) {
<                             myself.exportProjectMedia(name);
<                         }, null, 'exportProject');
<                     }
<                 },
<                 null,
<                 this.hasChangedMedia ? new Color(100, 0, 0) : new Color(0, 100, 0)
<                 );
---
>             'export project media only...',
>             function () {
>                 if (myself.projectName) {
>                     myself.exportProjectMedia(myself.projectName);
>                 } else {
>                     myself.prompt('Export Project As...', function (name) {
>                         myself.exportProjectMedia(name);
>                     }, null, 'exportProject');
>                 }
>             },
>             null,
>             this.hasChangedMedia ? new Color(100, 0, 0) : new Color(0, 100, 0)
>         );
2075,2087c1965,1977
<                 'export project without media...',
<                 function() {
<                     if (myself.projectName) {
<                         myself.exportProjectNoMedia(myself.projectName);
<                     } else {
<                         myself.prompt('Export Project As...', function(name) {
<                             myself.exportProjectNoMedia(name);
<                         }, null, 'exportProject');
<                     }
<                 },
<                 null,
<                 new Color(100, 0, 0)
<                 );
---
>             'export project without media...',
>             function () {
>                 if (myself.projectName) {
>                     myself.exportProjectNoMedia(myself.projectName);
>                 } else {
>                     myself.prompt('Export Project As...', function (name) {
>                         myself.exportProjectNoMedia(name);
>                     }, null, 'exportProject');
>                 }
>             },
>             null,
>             new Color(100, 0, 0)
>         );
2089,2101c1979,1991
<                 'export project as cloud data...',
<                 function() {
<                     if (myself.projectName) {
<                         myself.exportProjectAsCloudData(myself.projectName);
<                     } else {
<                         myself.prompt('Export Project As...', function(name) {
<                             myself.exportProjectAsCloudData(name);
<                         }, null, 'exportProject');
<                     }
<                 },
<                 null,
<                 new Color(100, 0, 0)
<                 );
---
>             'export project as cloud data...',
>             function () {
>                 if (myself.projectName) {
>                     myself.exportProjectAsCloudData(myself.projectName);
>                 } else {
>                     myself.prompt('Export Project As...', function (name) {
>                         myself.exportProjectAsCloudData(name);
>                     }, null, 'exportProject');
>                 }
>             },
>             null,
>             new Color(100, 0, 0)
>         );
2104,2113c1994,2011
<                 'open shared project from cloud...',
<                 function() {
<                     myself.prompt('Author name…', function(usr) {
<                         myself.prompt('Project name...', function(prj) {
<                             var id = 'Username=' +
<                                     encodeURIComponent(usr.toLowerCase()) +
<                                     '&ProjectName=' +
<                                     encodeURIComponent(prj);
<                             myself.showMessage(
<                                     'Fetching project\nfrom the cloud...'
---
>             'open shared project from cloud...',
>             function () {
>                 myself.prompt('Author name…', function (usr) {
>                     myself.prompt('Project name...', function (prj) {
>                         var id = 'Username=' +
>                             encodeURIComponent(usr.toLowerCase()) +
>                             '&ProjectName=' +
>                             encodeURIComponent(prj);
>                         myself.showMessage(
>                             'Fetching project\nfrom the cloud...'
>                         );
>                         SnapCloud.getPublicProject(
>                             id,
>                             function (projectData) {
>                                 var msg;
>                                 if (!Process.prototype.isCatchingErrors) {
>                                     window.open(
>                                         'data:text/xml,' + projectData
2115,2138c2013,2018
<                             SnapCloud.getPublicProject(
<                                     id,
<                                     function(projectData) {
<                                         var msg;
<                                         if (!Process.prototype.isCatchingErrors) {
<                                             window.open(
<                                                     'data:text/xml,' + projectData
<                                                     );
<                                         }
<                                         myself.nextSteps([
<                                             function() {
<                                                 msg = myself.showMessage(
<                                                         'Opening project...'
<                                                         );
<                                             },
<                                             function() {
<                                                 myself.rawOpenCloudDataString(
<                                                         projectData
<                                                         );
<                                             },
<                                             function() {
<                                                 msg.destroy();
<                                             }
<                                         ]);
---
>                                 }
>                                 myself.nextSteps([
>                                     function () {
>                                         msg = myself.showMessage(
>                                             'Opening project...'
>                                         );
2140,2141c2020,2031
<                                     myself.cloudError()
<                                     );
---
>                                     function () {
>                                         myself.rawOpenCloudDataString(
>                                             projectData
>                                         );
>                                     },
>                                     function () {
>                                         msg.destroy();
>                                     }
>                                 ]);
>                             },
>                             myself.cloudError()
>                         );
2143d2032
<                         }, null, 'project');
2145,2148c2034,2038
<                 },
<                 null,
<                 new Color(100, 0, 0)
<                 );
---
>                 }, null, 'project');
>             },
>             null,
>             new Color(100, 0, 0)
>         );
2153c2043
< IDE_Morph.prototype.settingsMenu = function() {
---
> IDE_Morph.prototype.settingsMenu = function () {
2155,2159c2045,2049
<             stage = this.stage,
<             world = this.world(),
<             myself = this,
<             pos = this.controlBar.settingsButton.bottomLeft(),
<             shiftClicked = (world.currentKey === 16);
---
>         stage = this.stage,
>         world = this.world(),
>         myself = this,
>         pos = this.controlBar.settingsButton.bottomLeft(),
>         shiftClicked = (world.currentKey === 16);
2163c2053
<                 off = '\u2610 ';
---
>             off = '\u2610 ';
2166,2170c2056,2060
<                     (test ? on : off) + localize(label),
<                     toggle,
<                     test ? onHint : offHint,
<                     hide ? new Color(100, 0, 0) : null
<                     );
---
>                 (test ? on : off) + localize(label),
>                 toggle,
>                 test ? onHint : offHint,
>                 hide ? new Color(100, 0, 0) : null
>             );
2177,2179c2067,2073
<             'Zoom blocks...',
<             'userSetBlocksScale'
<             );
---
>         'Zoom blocks...',
>         'userSetBlocksScale'
>     );
>     menu.addItem(
>         'Stage size...',
>         'userSetStageSize'
>     );
2182,2188c2076,2082
<             'Blurred shadows',
<             'toggleBlurredShadows',
<             useBlurredShadows,
<             'uncheck to use solid drop\nshadows and highlights',
<             'check to use blurred drop\nshadows and highlights',
<             true
<             );
---
>         'Blurred shadows',
>         'toggleBlurredShadows',
>         useBlurredShadows,
>         'uncheck to use solid drop\nshadows and highlights',
>         'check to use blurred drop\nshadows and highlights',
>         true
>     );
2190,2196c2084,2090
<             'Zebra coloring',
<             'toggleZebraColoring',
<             BlockMorph.prototype.zebraContrast,
<             'uncheck to disable alternating\ncolors for nested block',
<             'check to enable alternating\ncolors for nested blocks',
<             true
<             );
---
>         'Zebra coloring',
>         'toggleZebraColoring',
>         BlockMorph.prototype.zebraContrast,
>         'uncheck to disable alternating\ncolors for nested block',
>         'check to enable alternating\ncolors for nested blocks',
>         true
>     );
2198,2204c2092,2098
<             'Dynamic input labels',
<             'toggleDynamicInputLabels',
<             SyntaxElementMorph.prototype.dynamicInputLabels,
<             'uncheck to disable dynamic\nlabels for variadic inputs',
<             'check to enable dynamic\nlabels for variadic inputs',
<             true
<             );
---
>         'Dynamic input labels',
>         'toggleDynamicInputLabels',
>         SyntaxElementMorph.prototype.dynamicInputLabels,
>         'uncheck to disable dynamic\nlabels for variadic inputs',
>         'check to enable dynamic\nlabels for variadic inputs',
>         true
>     );
2206,2212c2100,2106
<             'Prefer empty slot drops',
<             'togglePreferEmptySlotDrops',
<             ScriptsMorph.prototype.isPreferringEmptySlots,
<             'uncheck to allow dropped\nreporters to kick out others',
<             'settings menu prefer empty slots hint',
<             true
<             );
---
>         'Prefer empty slot drops',
>         'togglePreferEmptySlotDrops',
>         ScriptsMorph.prototype.isPreferringEmptySlots,
>         'uncheck to allow dropped\nreporters to kick out others',
>         'settings menu prefer empty slots hint',
>         true
>     );
2214,2219c2108,2113
<             'Long form input dialog',
<             'toggleLongFormInputDialog',
<             InputSlotDialogMorph.prototype.isLaunchingExpanded,
<             'uncheck to use the input\ndialog in short form',
<             'check to always show slot\ntypes in the input dialog'
<             );
---
>         'Long form input dialog',
>         'toggleLongFormInputDialog',
>         InputSlotDialogMorph.prototype.isLaunchingExpanded,
>         'uncheck to use the input\ndialog in short form',
>         'check to always show slot\ntypes in the input dialog'
>     );
2221,2226c2115,2120
<             'Plain prototype labels',
<             'togglePlainPrototypeLabels',
<             BlockLabelPlaceHolderMorph.prototype.plainLabel,
<             'uncheck to always show (+) symbols\nin block prototype labels',
<             'check to hide (+) symbols\nin block prototype labels'
<             );
---
>         'Plain prototype labels',
>         'togglePlainPrototypeLabels',
>         BlockLabelPlaceHolderMorph.prototype.plainLabel,
>         'uncheck to always show (+) symbols\nin block prototype labels',
>         'check to hide (+) symbols\nin block prototype labels'
>     );
2228,2234c2122,2128
<             'Virtual keyboard',
<             'toggleVirtualKeyboard',
<             MorphicPreferences.useVirtualKeyboard,
<             'uncheck to disable\nvirtual keyboard support\nfor mobile devices',
<             'check to enable\nvirtual keyboard support\nfor mobile devices',
<             true
<             );
---
>         'Virtual keyboard',
>         'toggleVirtualKeyboard',
>         MorphicPreferences.useVirtualKeyboard,
>         'uncheck to disable\nvirtual keyboard support\nfor mobile devices',
>         'check to enable\nvirtual keyboard support\nfor mobile devices',
>         true
>     );
2236,2241c2130,2135
<             'Input sliders',
<             'toggleInputSliders',
<             MorphicPreferences.useSliderForInput,
<             'uncheck to disable\ninput sliders for\nentry fields',
<             'check to enable\ninput sliders for\nentry fields'
<             );
---
>         'Input sliders',
>         'toggleInputSliders',
>         MorphicPreferences.useSliderForInput,
>         'uncheck to disable\ninput sliders for\nentry fields',
>         'check to enable\ninput sliders for\nentry fields'
>     );
2244,2249c2138,2143
<                 'Execute on slider change',
<                 'toggleSliderExecute',
<                 InputSlotMorph.prototype.executeOnSliderEdit,
<                 'uncheck to supress\nrunning scripts\nwhen moving the slider',
<                 'check to run\nthe edited script\nwhen moving the slider'
<                 );
---
>             'Execute on slider change',
>             'toggleSliderExecute',
>             InputSlotMorph.prototype.executeOnSliderEdit,
>             'uncheck to supress\nrunning scripts\nwhen moving the slider',
>             'check to run\nthe edited script\nwhen moving the slider'
>         );
2252,2264c2146,2158
<             'Clicking sound',
<             function() {
<                 BlockMorph.prototype.toggleSnapSound();
<                 if (BlockMorph.prototype.snapSound) {
<                     myself.saveSetting('click', true);
<                 } else {
<                     myself.removeSetting('click');
<                 }
<             },
<             BlockMorph.prototype.snapSound,
<             'uncheck to turn\nblock clicking\nsound off',
<             'check to turn\nblock clicking\nsound on'
<             );
---
>         'Clicking sound',
>         function () {
>             BlockMorph.prototype.toggleSnapSound();
>             if (BlockMorph.prototype.snapSound) {
>                 myself.saveSetting('click', true);
>             } else {
>                 myself.removeSetting('click');
>             }
>         },
>         BlockMorph.prototype.snapSound,
>         'uncheck to turn\nblock clicking\nsound off',
>         'check to turn\nblock clicking\nsound on'
>     );
2266,2274c2160,2166
<             'Animations',
<             function() {
<                 myself.isAnimating = !myself.isAnimating;
<             },
<             myself.isAnimating,
<             'uncheck to disable\nIDE animations',
<             'check to enable\nIDE animations',
<             true
<             );
---
>         'Animations',
>         function () {myself.isAnimating = !myself.isAnimating; },
>         myself.isAnimating,
>         'uncheck to disable\nIDE animations',
>         'check to enable\nIDE animations',
>         true
>     );
2276,2281c2168,2173
<             'Turbo mode',
<             'toggleFastTracking',
<             this.stage.isFastTracked,
<             'uncheck to run scripts\nat normal speed',
<             'check to prioritize\nscript execution'
<             );
---
>         'Turbo mode',
>         'toggleFastTracking',
>         this.stage.isFastTracked,
>         'uncheck to run scripts\nat normal speed',
>         'check to prioritize\nscript execution'
>     );
2283,2292c2175,2184
<             'Rasterize SVGs',
<             function() {
<                 MorphicPreferences.rasterizeSVGs =
<                         !MorphicPreferences.rasterizeSVGs;
<             },
<             MorphicPreferences.rasterizeSVGs,
<             'uncheck for smooth\nscaling of vector costumes',
<             'check to rasterize\nSVGs on import',
<             true
<             );
---
>         'Rasterize SVGs',
>         function () {
>             MorphicPreferences.rasterizeSVGs =
>                 !MorphicPreferences.rasterizeSVGs;
>         },
>         MorphicPreferences.rasterizeSVGs,
>         'uncheck for smooth\nscaling of vector costumes',
>         'check to rasterize\nSVGs on import',
>         true
>     );
2294,2306c2186,2197
<             'Flat design',
<             function() {
<                 if (MorphicPreferences.isFlat) {
<                     return myself.flatDesign();
<                 }
<                 myself.defaultDesign();
< 
<             },
<             MorphicPreferences.isFlat,
<             'uncheck for default\nGUI design',
<             'check for alternative\nGUI design',
<             false
<             );
---
>         'Flat design',
>         function () {
>             if (MorphicPreferences.isFlat) {
>                 return myself.defaultDesign();
>             }
>             myself.flatDesign();
>         },
>         MorphicPreferences.isFlat,
>         'uncheck for default\nGUI design',
>         'check for alternative\nGUI design',
>         false
>     );
2308,2317c2199,2208
<             'Sprite Nesting',
<             function() {
<                 SpriteMorph.prototype.enableNesting =
<                         !SpriteMorph.prototype.enableNesting;
<             },
<             SpriteMorph.prototype.enableNesting,
<             'uncheck to disable\nsprite composition',
<             'check to enable\nsprite composition',
<             true
<             );
---
>         'Sprite Nesting',
>         function () {
>             SpriteMorph.prototype.enableNesting =
>                 !SpriteMorph.prototype.enableNesting;
>         },
>         SpriteMorph.prototype.enableNesting,
>         'uncheck to disable\nsprite composition',
>         'check to enable\nsprite composition',
>         true
>     );
2320,2327c2211,2216
<             'Thread safe scripts',
<             function() {
<                 stage.isThreadSafe = !stage.isThreadSafe;
<             },
<             this.stage.isThreadSafe,
<             'uncheck to allow\nscript reentrance',
<             'check to disallow\nscript reentrance'
<             );
---
>         'Thread safe scripts',
>         function () {stage.isThreadSafe = !stage.isThreadSafe; },
>         this.stage.isThreadSafe,
>         'uncheck to allow\nscript reentrance',
>         'check to disallow\nscript reentrance'
>     );
2329,2334c2218,2223
<             'Prefer smooth animations',
<             'toggleVariableFrameRate',
<             StageMorph.prototype.frameRate,
<             'uncheck for greater speed\nat variable frame rates',
<             'check for smooth, predictable\nanimations across computers'
<             );
---
>         'Prefer smooth animations',
>         'toggleVariableFrameRate',
>         StageMorph.prototype.frameRate,
>         'uncheck for greater speed\nat variable frame rates',
>         'check for smooth, predictable\nanimations across computers'
>     );
2336,2348c2225,2247
<             'Codification support',
<             function() {
<                 StageMorph.prototype.enableCodeMapping =
<                         !StageMorph.prototype.enableCodeMapping;
<                 myself.currentSprite.blocksCache.variables = null;
<                 myself.currentSprite.paletteCache.variables = null;
<                 myself.refreshPalette();
<             },
<             StageMorph.prototype.enableCodeMapping,
<             'uncheck to disable\nblock to text mapping features',
<             'check for block\nto text mapping features',
<             false
<             );
---
>         'Flat line ends',
>         function () {
>             SpriteMorph.prototype.useFlatLineEnds =
>                 !SpriteMorph.prototype.useFlatLineEnds;
>         },
>         SpriteMorph.prototype.useFlatLineEnds,
>         'uncheck for round ends of lines',
>         'check for flat ends of lines'
>     );
>     addPreference(
>         'Codification support',
>         function () {
>             StageMorph.prototype.enableCodeMapping =
>                 !StageMorph.prototype.enableCodeMapping;
>             myself.currentSprite.blocksCache.variables = null;
>             myself.currentSprite.paletteCache.variables = null;
>             myself.refreshPalette();
>         },
>         StageMorph.prototype.enableCodeMapping,
>         'uncheck to disable\nblock to text mapping features',
>         'check for block\nto text mapping features',
>         false
>     );
2352c2251
< IDE_Morph.prototype.projectMenu = function() {
---
> IDE_Morph.prototype.projectMenu = function () {
2354,2357c2253,2258
<             myself = this,
<             world = this.world(),
<             pos = this.controlBar.projectButton.bottomLeft(),
<             shiftClicked = (world.currentKey === 16);
---
>         myself = this,
>         world = this.world(),
>         pos = this.controlBar.projectButton.bottomLeft(),
>         graphicsName = this.currentSprite instanceof SpriteMorph ?
>                 'Costumes' : 'Backgrounds',
>         shiftClicked = (world.currentKey === 16);
2360,2361c2261,2262
< //    menu.addItem('Project notes...', 'editProjectNotes');
< //    menu.addLine();
---
>     menu.addItem('Project notes...', 'editProjectNotes');
>     menu.addLine();
2363,2371c2264,2289
<             'New',
<             function() {
<                 myself.confirm(
<                         'Replace the current project with a new one?',
<                         'New Project',
<                         function() {
<                             myself.newProject();
<                         }
<                 );
---
>         'New',
>         function () {
>             myself.confirm(
>                 'Replace the current project with a new one?',
>                 'New Project',
>                 function () {
>                     myself.newProject();
>                 }
>             );
>         }
>     );
>     menu.addItem('Open...', 'openProjectsBrowser');
>     menu.addItem(
>         'Save',
>         function () {
>             if (myself.source === 'examples') {
>                 myself.source = 'local'; // cannot save to examples
>             }
>             if (myself.projectName) {
>                 if (myself.source === 'local') { // as well as 'examples'
>                     myself.saveProject(myself.projectName);
>                 } else { // 'cloud'
>                     myself.saveProjectToCloud(myself.projectName);
>                 }
>             } else {
>                 myself.saveProjectsBrowser();
2372a2291
>         }
2374,2401c2293,2302
< //    menu.addItem('Open...', 'openProjectsBrowser');
< //    menu.addItem(
< //        'Save',
< //        function () {
< //            if (myself.source === 'examples') {
< //                myself.source = 'local'; // cannot save to examples
< //            }
< //            if (myself.projectName) {
< //                if (myself.source === 'local') { // as well as 'examples'
< //                    myself.saveProject(myself.projectName);
< //                } else { // 'cloud'
< //                    myself.saveProjectToCloud(myself.projectName);
< //                }
< //            } else {
< //                myself.saveProjectsBrowser();
< //            }
< //        }
< //    );
< //    if (shiftClicked) {
< //        menu.addItem(
< //            'Save to disk',
< //            'saveProjectToDisk',
< //            'experimental - store this project\nin your downloads folder',
< //            new Color(100, 0, 0)
< //        );
< //    }
< //    menu.addItem('Save As...', 'saveProjectsBrowser');
< //    menu.addLine();
---
>     if (shiftClicked) {
>         menu.addItem(
>             'Save to disk',
>             'saveProjectToDisk',
>             'experimental - store this project\nin your downloads folder',
>             new Color(100, 0, 0)
>         );
>     }
>     menu.addItem('Save As...', 'saveProjectsBrowser');
>     menu.addLine();
2403,2407c2304,2324
<             'Import...',
<             function() {
<                 var inp = document.createElement('input');
<                 if (myself.filePicker) {
<                     document.body.removeChild(myself.filePicker);
---
>         'Import...',
>         function () {
>             var inp = document.createElement('input');
>             if (myself.filePicker) {
>                 document.body.removeChild(myself.filePicker);
>                 myself.filePicker = null;
>             }
>             inp.type = 'file';
>             inp.style.color = "transparent";
>             inp.style.backgroundColor = "transparent";
>             inp.style.border = "none";
>             inp.style.outline = "none";
>             inp.style.position = "absolute";
>             inp.style.top = "0px";
>             inp.style.left = "0px";
>             inp.style.width = "0px";
>             inp.style.height = "0px";
>             inp.addEventListener(
>                 "change",
>                 function () {
>                     document.body.removeChild(inp);
2409,2436c2326,2335
<                 }
<                 inp.type = 'file';
<                 inp.style.color = "transparent";
<                 inp.style.backgroundColor = "transparent";
<                 inp.style.border = "none";
<                 inp.style.outline = "none";
<                 inp.style.position = "absolute";
<                 inp.style.top = "0px";
<                 inp.style.left = "0px";
<                 inp.style.width = "0px";
<                 inp.style.height = "0px";
<                 inp.addEventListener(
<                         "change",
<                         function() {
<                             document.body.removeChild(inp);
<                             myself.filePicker = null;
<                             console.log(inp.files[0].name);
<                             var fullname = inp.files[0].name;
<                             var name = fullname.substr(0, fullname.lastIndexOf('.')) || fullname;
<                             var helpfile = location.href.substring(0, location.href.lastIndexOf("/") + 1) + "/samples/" + name + "/" + name + ".html";
<                             $.get(helpfile, function(data) {
<                                 $("#help_text").html(data);
<                                 alert("Load was performed.");
<                             });
<                             world.hand.processDrop(inp.files);
<                         },
<                         false
<                         );
---
>                     world.hand.processDrop(inp.files);
>                 },
>                 false
>             );
>             document.body.appendChild(inp);
>             myself.filePicker = inp;
>             inp.click();
>         },
>         'file menu import hint' // looks up the actual text in the translator
>     );
2438,2442c2337,2367
<                 document.body.appendChild(inp);
<                 myself.filePicker = inp;
<                 inp.click();
<             },
<             'file menu import hint' // looks up the actual text in the translator
---
>     menu.addItem(
>         shiftClicked ?
>                 'Export project as plain text...' : 'Export project...',
>         function () {
>             if (myself.projectName) {
>                 myself.exportProject(myself.projectName, shiftClicked);
>             } else {
>                 myself.prompt('Export Project As...', function (name) {
>                     myself.exportProject(name);
>                 }, null, 'exportProject');
>             }
>         },
>         'show project data as XML\nin a new browser window',
>         shiftClicked ? new Color(100, 0, 0) : null
>     );
> 
>     menu.addItem(
>         'Export blocks...',
>         function () {myself.exportGlobalBlocks(); },
>         'show global custom block definitions as XML\nin a new browser window'
>     );
> 
>     menu.addLine();
>     menu.addItem(
>         'Import tools',
>         function () {
>             myself.droppedText(
>                 myself.getURL(
>                     'http://snap.berkeley.edu/snapsource/tools.xml'
>                 ),
>                 'tools'
2443a2369,2403
>         },
>         'load the official library of\npowerful blocks'
>     );
>     menu.addItem(
>         'Libraries...',
>         function () {
>             // read a list of libraries from an external file,
>             var libMenu = new MenuMorph(this, 'Import library'),
>                 libUrl = 'http://snap.berkeley.edu/snapsource/libraries/' +
>                     'LIBRARIES';
> 
>             function loadLib(name) {
>                 var url = 'http://snap.berkeley.edu/snapsource/libraries/'
>                         + name
>                         + '.xml';
>                 myself.droppedText(myself.getURL(url), name);
>             }
> 
>             myself.getURL(libUrl).split('\n').forEach(function (line) {
>                 if (line.length > 0) {
>                     libMenu.addItem(
>                         line.substring(line.indexOf('\t') + 1),
>                         function () {
>                             loadLib(
>                                 line.substring(0, line.indexOf('\t'))
>                             );
>                         }
>                     );
>                 }
>             });
> 
>             libMenu.popup(world, pos);
>         },
>         'Select categories of additional blocks to add to this project.'
>     );
2446,2454c2406,2431
<             shiftClicked ?
<             'Export project as plain text...' : 'Export project...',
<             function() {
<                 if (myself.projectName) {
<                     myself.exportProject(myself.projectName, shiftClicked);
<                 } else {
<                     myself.prompt('Export Project As...', function(name) {
<                         myself.exportProject(name);
<                     }, null, 'exportProject');
---
>         localize(graphicsName) + '...',
>         function () {
>             var dir = graphicsName,
>                 names = myself.getCostumesList(dir),
>                 libMenu = new MenuMorph(
>                     myself,
>                     localize('Import') + ' ' + localize(dir)
>                 );
> 
>             function loadCostume(name) {
>                 var url = dir + '/' + name,
>                     img = new Image();
>                 img.onload = function () {
>                     var canvas = newCanvas(new Point(img.width, img.height));
>                     canvas.getContext('2d').drawImage(img, 0, 0);
>                     myself.droppedImage(canvas, name);
>                 };
>                 img.src = url;
>             }
> 
>             names.forEach(function (line) {
>                 if (line.length > 0) {
>                     libMenu.addItem(
>                         line,
>                         function () {loadCostume(line); }
>                     );
2456,2511c2433,2463
<             },
<             'show project data as XML\nin a new browser window',
<             shiftClicked ? new Color(100, 0, 0) : null
<             );
< //
< //    menu.addItem(
< //        'Export blocks...',
< //        function () {myself.exportGlobalBlocks(); },
< //        'show global custom block definitions as XML\nin a new browser window'
< //    );
< //
< //    menu.addLine();
< //    menu.addItem(
< //        'Import tools',
< //        function () {
< //            myself.droppedText(
< //                myself.getURL(
< //                    'http://snap.berkeley.edu/snapsource/tools.xml'
< //                ),
< //                'tools'
< //            );
< //        },
< //        'load the official library of\npowerful blocks'
< //    );
< //    menu.addItem(
< //        'Libraries...',
< //        function () {
< //            // read a list of libraries from an external file,
< //            var libMenu = new MenuMorph(this, 'Import library'),
< //                libUrl = 'http://snap.berkeley.edu/snapsource/libraries/' +
< //                    'LIBRARIES';
< //
< //            function loadLib(name) {
< //                var url = 'http://snap.berkeley.edu/snapsource/libraries/'
< //                        + name
< //                        + '.xml';
< //                myself.droppedText(myself.getURL(url), name);
< //            }
< //
< //            myself.getURL(libUrl).split('\n').forEach(function (line) {
< //                if (line.length > 0) {
< //                    libMenu.addItem(
< //                        line.substring(line.indexOf('\t') + 1),
< //                        function () {
< //                            loadLib(
< //                                line.substring(0, line.indexOf('\t'))
< //                            );
< //                        }
< //                    );
< //                }
< //            });
< //
< //            libMenu.popup(world, pos);
< //        },
< //        'Select categories of additional blocks to add to this project.'
< //    );
---
>             });
>             libMenu.popup(world, pos);
>         },
>         'Select a costume from the media library'
>     );
>     menu.addItem(
>         localize('Sounds') + '...',
>         function () {
>             var names = this.getCostumesList('Sounds'),
>                 libMenu = new MenuMorph(this, 'Import sound');
> 
>             function loadSound(name) {
>                 var url = 'Sounds/' + name,
>                     audio = new Audio();
>                 audio.src = url;
>                 audio.load();
>                 myself.droppedAudio(audio, name);
>             }
> 
>             names.forEach(function (line) {
>                 if (line.length > 0) {
>                     libMenu.addItem(
>                         line,
>                         function () {loadSound(line); }
>                     );
>                 }
>             });
>             libMenu.popup(world, pos);
>         },
>         'Select a sound from the media library'
>     );
2515a2468,2492
> IDE_Morph.prototype.getCostumesList = function (dirname) {
>     var dir,
>         costumes = [];
> 
>     dir = this.getURL(dirname);
>     dir.split('\n').forEach(
>         function (line) {
>             var startIdx = line.search(new RegExp('href="[^./?].*"')),
>                 endIdx,
>                 name;
> 
>             if (startIdx > 0) {
>                 name = line.substring(startIdx + 6);
>                 endIdx = name.search(new RegExp('"'));
>                 name = name.substring(0, endIdx);
>                 costumes.push(name);
>             }
>         }
>     );
>     costumes.sort(function (x, y) {
>         return x < y ? -1 : 1;
>     });
>     return costumes;
> };
> 
2518c2495
< IDE_Morph.prototype.aboutSnap = function() {
---
> IDE_Morph.prototype.aboutSnap = function () {
2520,2521c2497,2498
<             module, btn1, btn2, btn3, btn4, licenseBtn, translatorsBtn,
<             world = this.world();
---
>         module, btn1, btn2, btn3, btn4, licenseBtn, translatorsBtn,
>         world = this.world();
2524,2530c2501,2507
<             + 'Copyright \u24B8 2013 Jens M\u00F6nig and '
<             + 'Brian Harvey\n'
<             + 'jens@moenig.org, bh@cs.berkeley.edu\n\n'
< 
<             + 'Snap! is developed by the University of California, Berkeley\n'
<             + '          with support from the National Science Foundation '
<             + 'and MioSoft.   \n'
---
>         + 'Copyright \u24B8 2014 Jens M\u00F6nig and '
>         + 'Brian Harvey\n'
>         + 'jens@moenig.org, bh@cs.berkeley.edu\n\n'
> 
>         + 'Snap! is developed by the University of California, Berkeley\n'
>         + '          with support from the National Science Foundation '
>         + 'and MioSoft.   \n'
2532,2533c2509,2510
<             + 'The design of Snap! is influenced and inspired by Scratch,\n'
<             + 'from the Lifelong Kindergarten group at the MIT Media Lab\n\n'
---
>         + 'The design of Snap! is influenced and inspired by Scratch,\n'
>         + 'from the Lifelong Kindergarten group at the MIT Media Lab\n\n'
2535,2536c2512,2513
<             + 'for more information see http://snap.berkeley.edu\n'
<             + 'and http://scratch.mit.edu';
---
>         + 'for more information see http://snap.berkeley.edu\n'
>         + 'and http://scratch.mit.edu';
2539,2552c2516,2529
<             + '\n\n'
<             + 'Snap! is free software: you can redistribute it and/or modify\n'
<             + 'it under the terms of the GNU Affero General Public License as\n'
<             + 'published by the Free Software Foundation, either version 3 of\n'
<             + 'the License, or (at your option) any later version.\n\n'
< 
<             + 'This program is distributed in the hope that it will be useful,\n'
<             + 'but WITHOUT ANY WARRANTY; without even the implied warranty of\n'
<             + 'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n'
<             + 'GNU Affero General Public License for more details.\n\n'
< 
<             + 'You should have received a copy of the\n'
<             + 'GNU Affero General Public License along with this program.\n'
<             + 'If not, see http://www.gnu.org/licenses/';
---
>         + '\n\n'
>         + 'Snap! is free software: you can redistribute it and/or modify\n'
>         + 'it under the terms of the GNU Affero General Public License as\n'
>         + 'published by the Free Software Foundation, either version 3 of\n'
>         + 'the License, or (at your option) any later version.\n\n'
> 
>         + 'This program is distributed in the hope that it will be useful,\n'
>         + 'but WITHOUT ANY WARRANTY; without even the implied warranty of\n'
>         + 'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n'
>         + 'GNU Affero General Public License for more details.\n\n'
> 
>         + 'You should have received a copy of the\n'
>         + 'GNU Affero General Public License along with this program.\n'
>         + 'If not, see http://www.gnu.org/licenses/';
2555,2563c2532,2540
<             + '\n\nNathan Dinsmore: Saving/Loading, Snap-Logo Design, '
<             + 'countless bugfixes'
<             + '\nKartik Chandra: Paint Editor'
<             + '\nIan Reynolds: UI Design, Event Bindings, '
<             + 'Sound primitives'
<             + '\nIvan Motyashov: Initial Squeak Porting'
<             + '\nDavide Della Casa: Morphic Optimizations'
<             + '\nAchal Dave: Web Audio'
<             + '\nJoe Otto: Morphic Testing and Debugging';
---
>         + '\n\nNathan Dinsmore: Saving/Loading, Snap-Logo Design, '
>         + 'countless bugfixes'
>         + '\nKartik Chandra: Paint Editor'
>         + '\nIan Reynolds: UI Design, Event Bindings, '
>         + 'Sound primitives'
>         + '\nIvan Motyashov: Initial Squeak Porting'
>         + '\nDavide Della Casa: Morphic Optimizations'
>         + '\nAchal Dave: Web Audio'
>         + '\nJoe Otto: Morphic Testing and Debugging';
2568c2545
<                     modules[module] + ')');
---
>                             modules[module] + ')');
2573,2574c2550,2551
<                 'morphic (' + morphicVersion + ')' +
<                 versions;
---
>             'morphic (' + morphicVersion + ')' +
>             versions;
2582,2596c2559,2573
<             function() {
<                 dlg.body.text = translations;
<                 dlg.body.drawNew();
<                 btn1.show();
<                 btn2.show();
<                 btn3.hide();
<                 btn4.hide();
<                 licenseBtn.hide();
<                 translatorsBtn.hide();
<                 dlg.fixLayout();
<                 dlg.drawNew();
<                 dlg.setCenter(world.center());
<             },
<             'Translators...'
<             );
---
>         function () {
>             dlg.body.text = translations;
>             dlg.body.drawNew();
>             btn1.show();
>             btn2.show();
>             btn3.hide();
>             btn4.hide();
>             licenseBtn.hide();
>             translatorsBtn.hide();
>             dlg.fixLayout();
>             dlg.drawNew();
>             dlg.setCenter(world.center());
>         },
>         'Translators...'
>     );
2598,2612c2575,2589
<             function() {
<                 dlg.body.text = aboutTxt;
<                 dlg.body.drawNew();
<                 btn1.show();
<                 btn2.hide();
<                 btn3.show();
<                 btn4.show();
<                 licenseBtn.show();
<                 translatorsBtn.hide();
<                 dlg.fixLayout();
<                 dlg.drawNew();
<                 dlg.setCenter(world.center());
<             },
<             'Back...'
<             );
---
>         function () {
>             dlg.body.text = aboutTxt;
>             dlg.body.drawNew();
>             btn1.show();
>             btn2.hide();
>             btn3.show();
>             btn4.show();
>             licenseBtn.show();
>             translatorsBtn.hide();
>             dlg.fixLayout();
>             dlg.drawNew();
>             dlg.setCenter(world.center());
>         },
>         'Back...'
>     );
2615,2629c2592,2606
<             function() {
<                 dlg.body.text = noticeTxt;
<                 dlg.body.drawNew();
<                 btn1.show();
<                 btn2.show();
<                 btn3.hide();
<                 btn4.hide();
<                 licenseBtn.hide();
<                 translatorsBtn.hide();
<                 dlg.fixLayout();
<                 dlg.drawNew();
<                 dlg.setCenter(world.center());
<             },
<             'License...'
<             );
---
>         function () {
>             dlg.body.text = noticeTxt;
>             dlg.body.drawNew();
>             btn1.show();
>             btn2.show();
>             btn3.hide();
>             btn4.hide();
>             licenseBtn.hide();
>             translatorsBtn.hide();
>             dlg.fixLayout();
>             dlg.drawNew();
>             dlg.setCenter(world.center());
>         },
>         'License...'
>     );
2631,2645c2608,2622
<             function() {
<                 dlg.body.text = versions;
<                 dlg.body.drawNew();
<                 btn1.show();
<                 btn2.show();
<                 btn3.hide();
<                 btn4.hide();
<                 licenseBtn.hide();
<                 translatorsBtn.hide();
<                 dlg.fixLayout();
<                 dlg.drawNew();
<                 dlg.setCenter(world.center());
<             },
<             'Modules...'
<             );
---
>         function () {
>             dlg.body.text = versions;
>             dlg.body.drawNew();
>             btn1.show();
>             btn2.show();
>             btn3.hide();
>             btn4.hide();
>             licenseBtn.hide();
>             translatorsBtn.hide();
>             dlg.fixLayout();
>             dlg.drawNew();
>             dlg.setCenter(world.center());
>         },
>         'Modules...'
>     );
2647,2661c2624,2638
<             function() {
<                 dlg.body.text = creditsTxt;
<                 dlg.body.drawNew();
<                 btn1.show();
<                 btn2.show();
<                 translatorsBtn.show();
<                 btn3.hide();
<                 btn4.hide();
<                 licenseBtn.hide();
<                 dlg.fixLayout();
<                 dlg.drawNew();
<                 dlg.setCenter(world.center());
<             },
<             'Credits...'
<             );
---
>         function () {
>             dlg.body.text = creditsTxt;
>             dlg.body.drawNew();
>             btn1.show();
>             btn2.show();
>             translatorsBtn.show();
>             btn3.hide();
>             btn4.hide();
>             licenseBtn.hide();
>             dlg.fixLayout();
>             dlg.drawNew();
>             dlg.setCenter(world.center());
>         },
>         'Credits...'
>     );
2667c2644
< IDE_Morph.prototype.editProjectNotes = function() {
---
> IDE_Morph.prototype.editProjectNotes = function () {
2669,2674c2646,2651
<             frame = new ScrollFrameMorph(),
<             text = new TextMorph(this.projectNotes || ''),
<             ok = dialog.ok,
<             myself = this,
<             size = 250,
<             world = this.world();
---
>         frame = new ScrollFrameMorph(),
>         text = new TextMorph(this.projectNotes || ''),
>         ok = dialog.ok,
>         myself = this,
>         size = 250,
>         world = this.world();
2698c2675
<     dialog.ok = function() {
---
>     dialog.ok = function () {
2703c2680
<     dialog.justDropped = function() {
---
>     dialog.justDropped = function () {
2720c2697
< IDE_Morph.prototype.newProject = function() {
---
> IDE_Morph.prototype.newProject = function () {
2730a2708
>     StageMorph.prototype.dimensions = new Point(480, 360);
2734a2713
>     SpriteMorph.prototype.useFlatLineEnds = false;
2744c2723
< IDE_Morph.prototype.saveProject = function(name) {
---
> IDE_Morph.prototype.saveProject = function (name) {
2747c2726
<         function() {
---
>         function () {
2750c2729
<         function() {
---
>         function () {
2756c2735
< IDE_Morph.prototype.rawSaveProject = function(name) {
---
> IDE_Morph.prototype.rawSaveProject = function (name) {
2763c2742
<                         = str = this.serializer.serialize(this.stage);
---
>                     = str = this.serializer.serialize(this.stage);
2771c2750
<                     = str = this.serializer.serialize(this.stage);
---
>                 = str = this.serializer.serialize(this.stage);
2778c2757
< IDE_Morph.prototype.saveProjectToDisk = function() {
---
> IDE_Morph.prototype.saveProjectToDisk = function () {
2780c2759
<             link = document.createElement('a');
---
>         link = document.createElement('a');
2803c2782
< IDE_Morph.prototype.exportProject = function(name, plain) {
---
> IDE_Morph.prototype.exportProject = function (name, plain) {
2811,2812c2790,2791
<                         this.serializer.serialize(this.stage)
<                         );
---
>                     this.serializer.serialize(this.stage)
>                 );
2815,2817c2794
<                         + (plain ? 'plain,' + str : 'xml,' + str));
<                 window.open('data:application/json,'
<                         + xml2json.fromStr(this.serializer.serialize(this.stage), 'string'));
---
>                     + (plain ? 'plain,' + str : 'xml,' + str));
2826,2827c2803,2804
<                     this.serializer.serialize(this.stage)
<                     );
---
>                 this.serializer.serialize(this.stage)
>             );
2830c2807
<                     + (plain ? 'plain,' + str : 'xml,' + str));
---
>                 + (plain ? 'plain,' + str : 'xml,' + str));
2837c2814
< IDE_Morph.prototype.exportGlobalBlocks = function() {
---
> IDE_Morph.prototype.exportGlobalBlocks = function () {
2840,2842c2817,2819
<                 this.serializer,
<                 this.stage.globalBlocks
<                 ).popUp(this.world());
---
>             this.serializer,
>             this.stage.globalBlocks
>         ).popUp(this.world());
2845,2846c2822,2823
<                 'Export blocks',
<                 'this project doesn\'t have any\n'
---
>             'Export blocks',
>             'this project doesn\'t have any\n'
2848c2825
<                 );
---
>         );
2852c2829
< IDE_Morph.prototype.exportSprite = function(sprite) {
---
> IDE_Morph.prototype.exportSprite = function (sprite) {
2855,2860c2832,2837
<             + this.serializer.app
<             + '" version="'
<             + this.serializer.version
<             + '">'
<             + str
<             + '</sprites>');
---
>         + this.serializer.app
>         + '" version="'
>         + this.serializer.version
>         + '">'
>         + str
>         + '</sprites>');
2863c2840
< IDE_Morph.prototype.openProjectString = function(str) {
---
> IDE_Morph.prototype.openProjectString = function (str) {
2865c2842
<             myself = this;
---
>         myself = this;
2867c2844
<         function() {
---
>         function () {
2870c2847
<         function() {
---
>         function () {
2873c2850
<         function() {
---
>         function () {
2879c2856
< IDE_Morph.prototype.rawOpenProjectString = function(str) {
---
> IDE_Morph.prototype.rawOpenProjectString = function (str) {
2898c2875
< IDE_Morph.prototype.openCloudDataString = function(str) {
---
> IDE_Morph.prototype.openCloudDataString = function (str) {
2900c2877
<             myself = this;
---
>         myself = this;
2902c2879
<         function() {
---
>         function () {
2905c2882
<         function() {
---
>         function () {
2908c2885
<         function() {
---
>         function () {
2914c2891
< IDE_Morph.prototype.rawOpenCloudDataString = function(str) {
---
> IDE_Morph.prototype.rawOpenCloudDataString = function (str) {
2925,2927c2902,2904
<                     this.serializer.loadProjectModel(model.childNamed('project')),
<                     this
<                     );
---
>                 this.serializer.loadProjectModel(model.childNamed('project')),
>                 this
>             );
2935,2937c2912,2914
<                 this.serializer.loadProjectModel(model.childNamed('project')),
<                 this
<                 );
---
>             this.serializer.loadProjectModel(model.childNamed('project')),
>             this
>         );
2942c2919
< IDE_Morph.prototype.openBlocksString = function(str, name, silently) {
---
> IDE_Morph.prototype.openBlocksString = function (str, name, silently) {
2944c2921
<             myself = this;
---
>         myself = this;
2946c2923
<         function() {
---
>         function () {
2949c2926
<         function() {
---
>         function () {
2952c2929
<         function() {
---
>         function () {
2958c2935
< IDE_Morph.prototype.rawOpenBlocksString = function(str, name, silently) {
---
> IDE_Morph.prototype.rawOpenBlocksString = function (str, name, silently) {
2961c2938
<             myself = this;
---
>         myself = this;
2972c2949
<         blocks.forEach(function(def) {
---
>         blocks.forEach(function (def) {
2980,2982c2957,2959
<                 'Imported Blocks Module' + (name ? ': ' + name : '') + '.',
<                 2
<                 );
---
>             'Imported Blocks Module' + (name ? ': ' + name : '') + '.',
>             2
>         );
2988c2965
< IDE_Morph.prototype.openSpritesString = function(str) {
---
> IDE_Morph.prototype.openSpritesString = function (str) {
2990c2967
<             myself = this;
---
>         myself = this;
2992c2969
<         function() {
---
>         function () {
2995c2972
<         function() {
---
>         function () {
2998c2975
<         function() {
---
>         function () {
3004c2981
< IDE_Morph.prototype.rawOpenSpritesString = function(str) {
---
> IDE_Morph.prototype.rawOpenSpritesString = function (str) {
3016c2993
< IDE_Morph.prototype.openMediaString = function(str) {
---
> IDE_Morph.prototype.openMediaString = function (str) {
3029,3037c3006
< 
< IDE_Morph.prototype.initTimer = function() {
<     var str;
<     var basepath = location.href.substring(0, location.href.lastIndexOf("/") + 1);
<     src = this.getURL(basepath + 'samples/init.xml');
<     this.openProjectString(src);
< };
< 
< IDE_Morph.prototype.openProject = function(name) {
---
> IDE_Morph.prototype.openProject = function (name) {
3048c3017
< IDE_Morph.prototype.switchToUserMode = function() {
---
> IDE_Morph.prototype.switchToUserMode = function () {
3057c3026
<     this.siblings().forEach(function(morph) {
---
>     this.siblings().forEach(function (morph) {
3068c3037
<     world.reactToDropOf = function(morph) {
---
>     world.reactToDropOf = function (morph) {
3077c3046
< IDE_Morph.prototype.switchToDevMode = function() {
---
> IDE_Morph.prototype.switchToDevMode = function () {
3093c3062
<             'entering development mode.\n\n'
---
>         'entering development mode.\n\n'
3097c3066
<             );
---
>     );
3100c3069
< IDE_Morph.prototype.flushBlocksCache = function(category) {
---
> IDE_Morph.prototype.flushBlocksCache = function (category) {
3104c3073
<         this.stage.children.forEach(function(m) {
---
>         this.stage.children.forEach(function (m) {
3111c3080
<         this.stage.children.forEach(function(m) {
---
>         this.stage.children.forEach(function (m) {
3120c3089
< IDE_Morph.prototype.flushPaletteCache = function(category) {
---
> IDE_Morph.prototype.flushPaletteCache = function (category) {
3124c3093
<         this.stage.children.forEach(function(m) {
---
>         this.stage.children.forEach(function (m) {
3131c3100
<         this.stage.children.forEach(function(m) {
---
>         this.stage.children.forEach(function (m) {
3139c3108
< IDE_Morph.prototype.toggleZebraColoring = function() {
---
> IDE_Morph.prototype.toggleZebraColoring = function () {
3149c3118
<     this.stage.children.concat(this.stage).forEach(function(morph) {
---
>     this.stage.children.concat(this.stage).forEach(function (morph) {
3152,3155c3121,3124
<                     morph.scripts.children.filter(function(morph) {
<                 return morph instanceof BlockMorph;
<             })
<                     );
---
>                 morph.scripts.children.filter(function (morph) {
>                     return morph instanceof BlockMorph;
>                 })
>             );
3160c3129
<     scripts.forEach(function(topBlock) {
---
>     scripts.forEach(function (topBlock) {
3165c3134
< IDE_Morph.prototype.toggleDynamicInputLabels = function() {
---
> IDE_Morph.prototype.toggleDynamicInputLabels = function () {
3168c3137
<             !SyntaxElementMorph.prototype.dynamicInputLabels;
---
>         !SyntaxElementMorph.prototype.dynamicInputLabels;
3185c3154
< IDE_Morph.prototype.toggleBlurredShadows = function() {
---
> IDE_Morph.prototype.toggleBlurredShadows = function () {
3189c3158
< IDE_Morph.prototype.toggleLongFormInputDialog = function() {
---
> IDE_Morph.prototype.toggleLongFormInputDialog = function () {
3191c3160
<             !InputSlotDialogMorph.prototype.isLaunchingExpanded;
---
>         !InputSlotDialogMorph.prototype.isLaunchingExpanded;
3199c3168
< IDE_Morph.prototype.togglePlainPrototypeLabels = function() {
---
> IDE_Morph.prototype.togglePlainPrototypeLabels = function () {
3201c3170
<             !BlockLabelPlaceHolderMorph.prototype.plainLabel;
---
>         !BlockLabelPlaceHolderMorph.prototype.plainLabel;
3209c3178
< IDE_Morph.prototype.togglePreferEmptySlotDrops = function() {
---
> IDE_Morph.prototype.togglePreferEmptySlotDrops = function () {
3211c3180
<             !ScriptsMorph.prototype.isPreferringEmptySlots;
---
>         !ScriptsMorph.prototype.isPreferringEmptySlots;
3214c3183
< IDE_Morph.prototype.toggleVirtualKeyboard = function() {
---
> IDE_Morph.prototype.toggleVirtualKeyboard = function () {
3216c3185
<             !MorphicPreferences.useVirtualKeyboard;
---
>         !MorphicPreferences.useVirtualKeyboard;
3219c3188
< IDE_Morph.prototype.toggleInputSliders = function() {
---
> IDE_Morph.prototype.toggleInputSliders = function () {
3221c3190
<             !MorphicPreferences.useSliderForInput;
---
>         !MorphicPreferences.useSliderForInput;
3224c3193
< IDE_Morph.prototype.toggleSliderExecute = function() {
---
> IDE_Morph.prototype.toggleSliderExecute = function () {
3226c3195
<             !InputSlotMorph.prototype.executeOnSliderEdit;
---
>         !InputSlotMorph.prototype.executeOnSliderEdit;
3229c3198
< IDE_Morph.prototype.toggleAppMode = function(appMode) {
---
> IDE_Morph.prototype.toggleAppMode = function (appMode) {
3231,3243c3200,3212
<             elements = [
<         this.logo,
<         this.controlBar.cloudButton,
<         this.controlBar.projectButton,
<         this.controlBar.settingsButton,
<         this.controlBar.stageSizeButton,
<         this.corral,
<         this.corralBar,
<         this.spriteEditor,
<         this.spriteBar,
<         this.palette,
<         this.categories
<     ];
---
>         elements = [
>             this.logo,
>             this.controlBar.cloudButton,
>             this.controlBar.projectButton,
>             this.controlBar.settingsButton,
>             this.controlBar.stageSizeButton,
>             this.corral,
>             this.corralBar,
>             this.spriteEditor,
>             this.spriteBar,
>             this.palette,
>             this.categories
>         ];
3252,3256c3221,3222
<         elements.forEach(function(e) {
<             try {
<                 e.hide();
<             } catch (e) {
<             }
---
>         elements.forEach(function (e) {
>             e.hide();
3258c3224
<         world.children.forEach(function(morph) {
---
>         world.children.forEach(function (morph) {
3266,3271c3232,3233
<         elements.forEach(function(e) {
<             try {
<                 e.show();
<             } catch (e) {
< 
<             }
---
>         elements.forEach(function (e) {
>             e.show();
3275c3237
<         world.children.forEach(function(morph) {
---
>         world.children.forEach(function (morph) {
3281c3243
<         world.allChildren().filter(function(c) {
---
>         world.allChildren().filter(function (c) {
3283c3245
<         }).forEach(function(s) {
---
>         }).forEach(function (s) {
3290c3252
< IDE_Morph.prototype.toggleStageSize = function(isSmall) {
---
> IDE_Morph.prototype.toggleStageSize = function (isSmall) {
3292c3254
<             world = this.world();
---
>         world = this.world();
3296c3258
<         myself.step = function() {
---
>         myself.step = function () {
3310c3272
<         myself.step = function() {
---
>         myself.step = function () {
3330,3332c3292
<         if (this.isSmallStage) {
<             this.stageRatio = 0.5;
<         }
---
>         if (this.isSmallStage) {this.stageRatio = 0.5; }
3337c3297
< IDE_Morph.prototype.openProjectsBrowser = function() {
---
> IDE_Morph.prototype.openProjectsBrowser = function () {
3341c3301
< IDE_Morph.prototype.saveProjectsBrowser = function() {
---
> IDE_Morph.prototype.saveProjectsBrowser = function () {
3350c3310
< IDE_Morph.prototype.languageMenu = function() {
---
> IDE_Morph.prototype.languageMenu = function () {
3352,3355c3312,3315
<             world = this.world(),
<             pos = this.controlBar.settingsButton.bottomLeft(),
<             myself = this;
<     SnapTranslator.languages().forEach(function(lang) {
---
>         world = this.world(),
>         pos = this.controlBar.settingsButton.bottomLeft(),
>         myself = this;
>     SnapTranslator.languages().forEach(function (lang) {
3357c3317
<                 (SnapTranslator.language === lang ? '\u2713 ' : '    ') +
---
>             (SnapTranslator.language === lang ? '\u2713 ' : '    ') +
3359,3361c3319
<                 function() {
<                     myself.setLanguage(lang);
<                 }
---
>             function () {myself.setLanguage(lang); }
3367c3325
< IDE_Morph.prototype.setLanguage = function(lang, callback) {
---
> IDE_Morph.prototype.setLanguage = function (lang, callback) {
3369,3370c3327,3328
<             src = 'lang/lang-' + lang + '.js',
<             myself = this;
---
>         src = 'lang-' + lang + '.js',
>         myself = this;
3380c3338
<     translation.onload = function() {
---
>     translation.onload = function () {
3387c3345
< IDE_Morph.prototype.reflectLanguage = function(lang, callback) {
---
> IDE_Morph.prototype.reflectLanguage = function (lang, callback) {
3409c3367
<         this.openProjectString(initsrc);
---
>         this.openProjectString(projectData);
3412,3414c3370
<     if (callback) {
<         callback.call(this);
<     }
---
>     if (callback) {callback.call(this); }
3419c3375
< IDE_Morph.prototype.userSetBlocksScale = function() {
---
> IDE_Morph.prototype.userSetBlocksScale = function () {
3421,3425c3377,3381
<             scrpt,
<             blck,
<             shield,
<             sample,
<             action;
---
>         scrpt,
>         blck,
>         shield,
>         sample,
>         action;
3439,3441c3395,3397
<      blck = SpriteMorph.prototype.blockForSelector('doForever');
<      blck.inputs()[0].nestedBlock(scrpt);
<      */
---
>     blck = SpriteMorph.prototype.blockForSelector('doForever');
>     blck.inputs()[0].nestedBlock(scrpt);
>     */
3456,3466c3412,3422
<     action = function(num) {
<         /*
<          var c;
<          blck.setScale(num);
<          blck.drawNew();
<          blck.setSpec(blck.blockSpec);
<          c = blck.inputs()[0];
<          c.setScale(num);
<          c.nestedBlock(scrpt);
<          */
<         scrpt.blockSequence().forEach(function(block) {
---
>     action = function (num) {
>     /*
>         var c;
>         blck.setScale(num);
>         blck.drawNew();
>         blck.setSpec(blck.blockSpec);
>         c = blck.inputs()[0];
>         c.setScale(num);
>         c.nestedBlock(scrpt);
>     */
>         scrpt.blockSequence().forEach(function (block) {
3474,3477c3430,3433
<             null,
<             function(num) {
<                 myself.setBlocksScale(num);
<             }
---
>         null,
>         function (num) {
>             myself.setBlocksScale(num);
>         }
3479,3497c3435,3453
<             'Zoom blocks',
<             SyntaxElementMorph.prototype.scale.toString(),
<             this.world(),
<             sample, // pic
<             {
<                 'normal (1x)': 1,
<                 'demo (1.2x)': 1.2,
<                 'presentation (1.4x)': 1.4,
<                 'big (2x)': 2,
<                 'huge (4x)': 4,
<                 'giant (8x)': 8,
<                 'monstrous (10x)': 10
<             },
<     false, // read only?
<             true, // numeric
<             1, // slider min
<             12, // slider max
<             action // slider action
<             );
---
>         'Zoom blocks',
>         SyntaxElementMorph.prototype.scale.toString(),
>         this.world(),
>         sample, // pic
>         {
>             'normal (1x)' : 1,
>             'demo (1.2x)' : 1.2,
>             'presentation (1.4x)' : 1.4,
>             'big (2x)' : 2,
>             'huge (4x)' : 4,
>             'giant (8x)' : 8,
>             'monstrous (10x)' : 10
>         },
>         false, // read only?
>         true, // numeric
>         1, // slider min
>         12, // slider max
>         action // slider action
>     );
3500c3456
< IDE_Morph.prototype.setBlocksScale = function(num) {
---
> IDE_Morph.prototype.setBlocksScale = function (num) {
3521a3478,3535
> // IDE_Morph stage size manipulation
> 
> IDE_Morph.prototype.userSetStageSize = function () {
>     new DialogBoxMorph(
>         this,
>         this.setStageExtent,
>         this
>     ).promptVector(
>         "Stage size",
>         StageMorph.prototype.dimensions,
>         new Point(480, 360),
>         'Stage width',
>         'Stage height',
>         this.world(),
>         null, // pic
>         null // msg
>     );
> };
> 
> IDE_Morph.prototype.setStageExtent = function (aPoint) {
>     var myself = this,
>         world = this.world(),
>         ext = aPoint.max(new Point(480, 180));
> 
>     function zoom() {
>         myself.step = function () {
>             var delta = ext.subtract(
>                 StageMorph.prototype.dimensions
>             ).divideBy(2);
>             if (delta.abs().lt(new Point(5, 5))) {
>                 StageMorph.prototype.dimensions = ext;
>                 delete myself.step;
>             } else {
>                 StageMorph.prototype.dimensions =
>                     StageMorph.prototype.dimensions.add(delta);
>             }
>             myself.stage.setExtent(StageMorph.prototype.dimensions);
>             myself.stage.clearPenTrails();
>             myself.fixLayout();
>             this.setExtent(world.extent());
>         };
>     }
> 
>     this.stageRatio = 1;
>     this.isSmallStage = false;
>     this.controlBar.stageSizeButton.refresh();
>     this.setExtent(world.extent());
>     if (this.isAnimating) {
>         zoom();
>     } else {
>         StageMorph.prototype.dimensions = ext;
>         this.stage.setExtent(StageMorph.prototype.dimensions);
>         this.stage.clearPenTrails();
>         this.fixLayout();
>         this.setExtent(world.extent());
>     }
> };
> 
3524c3538
< IDE_Morph.prototype.initializeCloud = function() {
---
> IDE_Morph.prototype.initializeCloud = function () {
3526c3540
<             world = this.world();
---
>         world = this.world();
3528,3543c3542,3554
<             null,
<             function(user) {
<                 var pwh = hex_sha512(user.password),
<                         str;
<                 SnapCloud.login(
<                         user.username,
<                         pwh,
<                         function() {
<                             if (user.choice) {
<                                 str = SnapCloud.encodeDict(
<                                         {
<                                             username: user.username,
<                                             password: pwh
<                                         }
<                                 );
<                                 localStorage['-snap-user'] = str;
---
>         null,
>         function (user) {
>             var pwh = hex_sha512(user.password),
>                 str;
>             SnapCloud.login(
>                 user.username,
>                 pwh,
>                 function () {
>                     if (user.choice) {
>                         str = SnapCloud.encodeDict(
>                             {
>                                 username: user.username,
>                                 password: pwh
3545,3548d3555
<                             myself.source = 'cloud';
<                             myself.showMessage('now connected.', 2);
<                         },
<                         myself.cloudError()
3550,3561c3557,3562
<             }
<     ).withKey('cloudlogin').promptCredentials(
<             'Sign in',
<             'login',
<             null,
<             null,
<             null,
<             null,
<             'stay signed in on this computer\nuntil logging out',
<             world,
<             myself.cloudIcon(),
<             myself.cloudMsg
---
>                         localStorage['-snap-user'] = str;
>                     }
>                     myself.source = 'cloud';
>                     myself.showMessage('now connected.', 2);
>                 },
>                 myself.cloudError()
3562a3564,3576
>         }
>     ).withKey('cloudlogin').promptCredentials(
>         'Sign in',
>         'login',
>         null,
>         null,
>         null,
>         null,
>         'stay signed in on this computer\nuntil logging out',
>         world,
>         myself.cloudIcon(),
>         myself.cloudMsg
>     );
3565c3579
< IDE_Morph.prototype.createCloudAccount = function() {
---
> IDE_Morph.prototype.createCloudAccount = function () {
3567,3572c3581,3586
<             world = this.world();
<     /*
<      // force-logout, commented out for now:
<      delete localStorage['-snap-user'];
<      SnapCloud.clear();
<      */
---
>         world = this.world();
> /*
>     // force-logout, commented out for now:
>     delete localStorage['-snap-user'];
>     SnapCloud.clear();
> */
3574,3602c3588,3603
<             null,
<             function(user) {
<                 SnapCloud.signup(
<                         user.username,
<                         user.email,
<                         function(txt, title) {
<                             new DialogBoxMorph().inform(
<                                     title,
<                                     txt +
<                                     '.\n\nAn e-mail with your password\n' +
<                                     'has been sent to the address provided',
<                                     world,
<                                     myself.cloudIcon(null, new Color(0, 180, 0))
<                                     );
<                         },
<                         myself.cloudError()
<                         );
<             }
<     ).withKey('cloudsignup').promptCredentials(
<             'Sign up',
<             'signup',
<             'http://snap.berkeley.edu/tos.html',
<             'Terms of Service...',
<             'http://snap.berkeley.edu/privacy.html',
<             'Privacy...',
<             'I have read and agree\nto the Terms of Service',
<             world,
<             myself.cloudIcon(),
<             myself.cloudMsg
---
>         null,
>         function (user) {
>             SnapCloud.signup(
>                 user.username,
>                 user.email,
>                 function (txt, title) {
>                     new DialogBoxMorph().inform(
>                         title,
>                         txt +
>                             '.\n\nAn e-mail with your password\n' +
>                             'has been sent to the address provided',
>                         world,
>                         myself.cloudIcon(null, new Color(0, 180, 0))
>                     );
>                 },
>                 myself.cloudError()
3603a3605,3617
>         }
>     ).withKey('cloudsignup').promptCredentials(
>         'Sign up',
>         'signup',
>         'http://snap.berkeley.edu/tos.html',
>         'Terms of Service...',
>         'http://snap.berkeley.edu/privacy.html',
>         'Privacy...',
>         'I have read and agree\nto the Terms of Service',
>         world,
>         myself.cloudIcon(),
>         myself.cloudMsg
>     );
3606c3620
< IDE_Morph.prototype.resetCloudPassword = function() {
---
> IDE_Morph.prototype.resetCloudPassword = function () {
3608,3613c3622,3627
<             world = this.world();
<     /*
<      // force-logout, commented out for now:
<      delete localStorage['-snap-user'];
<      SnapCloud.clear();
<      */
---
>         world = this.world();
> /*
>     // force-logout, commented out for now:
>     delete localStorage['-snap-user'];
>     SnapCloud.clear();
> */
3615,3643c3629,3644
<             null,
<             function(user) {
<                 SnapCloud.resetPassword(
<                         user.username,
<                         function(txt, title) {
<                             new DialogBoxMorph().inform(
<                                     title,
<                                     txt +
<                                     '.\n\nAn e-mail with a link to\n' +
<                                     'reset your password\n' +
<                                     'has been sent to the address provided',
<                                     world,
<                                     myself.cloudIcon(null, new Color(0, 180, 0))
<                                     );
<                         },
<                         myself.cloudError()
<                         );
<             }
<     ).withKey('cloudresetpassword').promptCredentials(
<             'Reset password',
<             'resetPassword',
<             null,
<             null,
<             null,
<             null,
<             null,
<             world,
<             myself.cloudIcon(),
<             myself.cloudMsg
---
>         null,
>         function (user) {
>             SnapCloud.resetPassword(
>                 user.username,
>                 function (txt, title) {
>                     new DialogBoxMorph().inform(
>                         title,
>                         txt +
>                             '.\n\nAn e-mail with a link to\n' +
>                             'reset your password\n' +
>                             'has been sent to the address provided',
>                         world,
>                         myself.cloudIcon(null, new Color(0, 180, 0))
>                     );
>                 },
>                 myself.cloudError()
3644a3646,3658
>         }
>     ).withKey('cloudresetpassword').promptCredentials(
>         'Reset password',
>         'resetPassword',
>         null,
>         null,
>         null,
>         null,
>         null,
>         world,
>         myself.cloudIcon(),
>         myself.cloudMsg
>     );
3647c3661
< IDE_Morph.prototype.changeCloudPassword = function() {
---
> IDE_Morph.prototype.changeCloudPassword = function () {
3649c3663
<             world = this.world();
---
>         world = this.world();
3651,3673c3665,3674
<             null,
<             function(user) {
<                 SnapCloud.changePassword(
<                         user.oldpassword,
<                         user.password,
<                         function() {
<                             myself.logout();
<                             myself.showMessage('password has been changed.', 2);
<                         },
<                         myself.cloudError()
<                         );
<             }
<     ).withKey('cloudpassword').promptCredentials(
<             'Change Password',
<             'changePassword',
<             null,
<             null,
<             null,
<             null,
<             null,
<             world,
<             myself.cloudIcon(),
<             myself.cloudMsg
---
>         null,
>         function (user) {
>             SnapCloud.changePassword(
>                 user.oldpassword,
>                 user.password,
>                 function () {
>                     myself.logout();
>                     myself.showMessage('password has been changed.', 2);
>                 },
>                 myself.cloudError()
3674a3676,3688
>         }
>     ).withKey('cloudpassword').promptCredentials(
>         'Change Password',
>         'changePassword',
>         null,
>         null,
>         null,
>         null,
>         null,
>         world,
>         myself.cloudIcon(),
>         myself.cloudMsg
>     );
3677c3691
< IDE_Morph.prototype.logout = function() {
---
> IDE_Morph.prototype.logout = function () {
3681,3688c3695,3702
<             function() {
<                 SnapCloud.clear();
<                 myself.showMessage('disconnected.', 2);
<             },
<             function() {
<                 SnapCloud.clear();
<                 myself.showMessage('disconnected.', 2);
<             }
---
>         function () {
>             SnapCloud.clear();
>             myself.showMessage('disconnected.', 2);
>         },
>         function () {
>             SnapCloud.clear();
>             myself.showMessage('disconnected.', 2);
>         }
3692c3706
< IDE_Morph.prototype.saveProjectToCloud = function(name) {
---
> IDE_Morph.prototype.saveProjectToCloud = function (name) {
3698,3703c3712,3715
<                 this,
<                 function() {
<                     myself.showMessage('saved.', 2);
<                 },
<                 this.cloudError()
<                 );
---
>             this,
>             function () {myself.showMessage('saved.', 2); },
>             this.cloudError()
>         );
3707c3719
< IDE_Morph.prototype.exportProjectMedia = function(name) {
---
> IDE_Morph.prototype.exportProjectMedia = function (name) {
3716,3717c3728,3729
<                         this.serializer.serialize(this.stage)
<                         );
---
>                     this.serializer.serialize(this.stage)
>                 );
3719,3720c3731,3732
<                         this.serializer.mediaXML(name)
<                         );
---
>                     this.serializer.mediaXML(name)
>                 );
3731,3732c3743,3744
<                     this.serializer.serialize(this.stage)
<                     );
---
>                 this.serializer.serialize(this.stage)
>             );
3734,3735c3746,3747
<                     this.serializer.mediaXML()
<                     );
---
>                 this.serializer.mediaXML()
>             );
3746c3758
< IDE_Morph.prototype.exportProjectNoMedia = function(name) {
---
> IDE_Morph.prototype.exportProjectNoMedia = function (name) {
3755,3756c3767,3768
<                         this.serializer.serialize(this.stage)
<                         );
---
>                     this.serializer.serialize(this.stage)
>                 );
3767,3768c3779,3780
<                     this.serializer.serialize(this.stage)
<                     );
---
>                 this.serializer.serialize(this.stage)
>             );
3778c3790
< IDE_Morph.prototype.exportProjectAsCloudData = function(name) {
---
> IDE_Morph.prototype.exportProjectAsCloudData = function (name) {
3787,3788c3799,3800
<                         this.serializer.serialize(this.stage)
<                         );
---
>                     this.serializer.serialize(this.stage)
>                 );
3790,3791c3802,3803
<                         this.serializer.mediaXML(name)
<                         );
---
>                     this.serializer.mediaXML(name)
>                 );
3793,3795c3805,3807
<                         + str
<                         + media
<                         + encodeURIComponent('</snapdata>');
---
>                     + str
>                     + media
>                     + encodeURIComponent('</snapdata>');
3806,3807c3818,3819
<                     this.serializer.serialize(this.stage)
<                     );
---
>                 this.serializer.serialize(this.stage)
>             );
3809,3810c3821,3822
<                     this.serializer.mediaXML()
<                     );
---
>                 this.serializer.mediaXML()
>             );
3812,3814c3824,3826
<                     + str
<                     + media
<                     + encodeURIComponent('</snapdata>');
---
>                 + str
>                 + media
>                 + encodeURIComponent('</snapdata>');
3825c3837
< IDE_Morph.prototype.cloudAcknowledge = function() {
---
> IDE_Morph.prototype.cloudAcknowledge = function () {
3827c3839
<     return function(responseText, url) {
---
>     return function (responseText, url) {
3830,3831c3842,3843
<                 'Cloud Connection',
<                 'Successfully connected to:\n'
---
>             'Cloud Connection',
>             'Successfully connected to:\n'
3834,3836c3846,3848
<                 myself.world(),
<                 myself.cloudIcon(null, new Color(0, 180, 0))
<                 );
---
>             myself.world(),
>             myself.cloudIcon(null, new Color(0, 180, 0))
>         );
3840c3852
< IDE_Morph.prototype.cloudResponse = function() {
---
> IDE_Morph.prototype.cloudResponse = function () {
3842c3854
<     return function(responseText, url) {
---
>     return function (responseText, url) {
3848,3849c3860,3861
<                 'Snap!Cloud',
<                 'http://'
---
>             'Snap!Cloud',
>             'http://'
3853,3855c3865,3867
<                 myself.world(),
<                 myself.cloudIcon(null, new Color(0, 180, 0))
<                 );
---
>             myself.world(),
>             myself.cloudIcon(null, new Color(0, 180, 0))
>         );
3859c3871
< IDE_Morph.prototype.cloudError = function() {
---
> IDE_Morph.prototype.cloudError = function () {
3876c3888
<     return function(responseText, url) {
---
>     return function (responseText, url) {
3881c3893
<                 explanation = getURL('http://snap.berkeley.edu/cloudmsg.txt');
---
>             explanation = getURL('http://snap.berkeley.edu/cloudmsg.txt');
3894,3895c3906,3907
<                 'Snap!Cloud',
<                 (url ? url + '\n' : '')
---
>             'Snap!Cloud',
>             (url ? url + '\n' : '')
3897,3899c3909,3911
<                 myself.world(),
<                 myself.cloudIcon(null, new Color(180, 0, 0))
<                 );
---
>             myself.world(),
>             myself.cloudIcon(null, new Color(180, 0, 0))
>         );
3903c3915
< IDE_Morph.prototype.cloudIcon = function(height, color) {
---
> IDE_Morph.prototype.cloudIcon = function (height, color) {
3905,3906c3917,3918
<             isFlat = MorphicPreferences.isFlat,
<             icon = new SymbolMorph(
---
>         isFlat = MorphicPreferences.isFlat,
>         icon = new SymbolMorph(
3912c3924
<             );
---
>         );
3919c3931
< IDE_Morph.prototype.setCloudURL = function() {
---
> IDE_Morph.prototype.setCloudURL = function () {
3921,3940c3933,3952
<             null,
<             function(url) {
<                 SnapCloud.url = url;
<             }
<     ).withKey('cloudURL').prompt(
<             'Cloud URL',
<             SnapCloud.url,
<             this.world(),
<             null,
<             {
<                 'Snap!Cloud':
<                         'https://snapcloud.miosoft.com/miocon/app/' +
<                         'login?_app=SnapCloud',
<                 'local network lab':
<                         '192.168.2.107:8087/miocon/app/login?_app=SnapCloud',
<                 'local network office':
<                         '192.168.186.146:8087/miocon/app/login?_app=SnapCloud',
<                 'localhost dev':
<                         'localhost/miocon/app/login?_app=SnapCloud'
<             }
---
>         null,
>         function (url) {
>             SnapCloud.url = url;
>         }
>     ).withKey('cloudURL').prompt(
>         'Cloud URL',
>         SnapCloud.url,
>         this.world(),
>         null,
>         {
>             'Snap!Cloud' :
>                 'https://snapcloud.miosoft.com/miocon/app/' +
>                     'login?_app=SnapCloud',
>             'local network lab' :
>                 '192.168.2.107:8087/miocon/app/login?_app=SnapCloud',
>             'local network office' :
>                 '192.168.186.146:8087/miocon/app/login?_app=SnapCloud',
>             'localhost dev' :
>                 'localhost/miocon/app/login?_app=SnapCloud'
>         }
3946c3958
< IDE_Morph.prototype.getURL = function(url) {
---
> IDE_Morph.prototype.getURL = function (url) {
3948c3960
<             myself = this;
---
>         myself = this;
3964c3976
< IDE_Morph.prototype.showMessage = function(message, secs) {
---
> IDE_Morph.prototype.showMessage = function (message, secs) {
3966c3978
<             intervalHandle;
---
>         intervalHandle;
3969c3981
<         intervalHandle = setInterval(function() {
---
>         intervalHandle = setInterval(function () {
3977c3989
< IDE_Morph.prototype.inform = function(title, message) {
---
> IDE_Morph.prototype.inform = function (title, message) {
3979,3982c3991,3994
<             title,
<             localize(message),
<             this.world()
<             );
---
>         title,
>         localize(message),
>         this.world()
>     );
3985c3997
< IDE_Morph.prototype.confirm = function(message, title, action) {
---
> IDE_Morph.prototype.confirm = function (message, title, action) {
3987,3990c3999,4002
<             title,
<             localize(message),
<             this.world()
<             );
---
>         title,
>         localize(message),
>         this.world()
>     );
3993c4005
< IDE_Morph.prototype.prompt = function(message, callback, choices, key) {
---
> IDE_Morph.prototype.prompt = function (message, callback, choices, key) {
3995,4000c4007,4012
<             message,
<             '',
<             this.world(),
<             null,
<             choices
<             );
---
>         message,
>         '',
>         this.world(),
>         null,
>         choices
>     );
4004,4009c4016
< /**
<  * This is the description for my class.
<  *
<  * @class ProjectDialogMorph
<  * @constructor
<  */
---
> 
4022c4029
< ProjectDialogMorph.prototype.init = function(ide, task) {
---
> ProjectDialogMorph.prototype.init = function (ide, task) {
4044,4048c4051,4055
<             this,
<             this, // target
<             null, // function
<             null // environment
<             );
---
>         this,
>         this, // target
>         null, // function
>         null // environment
>     );
4057c4064
<     this.onNextStep = function() { // yield to show "updating" message
---
>     this.onNextStep = function () { // yield to show "updating" message
4062c4069
< ProjectDialogMorph.prototype.buildContents = function() {
---
> ProjectDialogMorph.prototype.buildContents = function () {
4072,4082c4079,4089
<                 this.ide.cloudMsg,
<                 10,
<                 null, // style
<                 false, // bold
<                 null, // italic
<                 null, // alignment
<                 null, // width
<                 null, // font name
<                 new Point(1, 1), // shadow offset
<                 new Color(255, 255, 255) // shadowColor
<                 );
---
>             this.ide.cloudMsg,
>             10,
>             null, // style
>             false, // bold
>             null, // italic
>             null, // alignment
>             null, // width
>             null, // font name
>             new Point(1, 1), // shadow offset
>             new Color(255, 255, 255) // shadowColor
>         );
4118c4125
<     this.preview.drawNew = function() {
---
>     this.preview.drawNew = function () {
4124c4131
<     this.preview.drawCachedTexture = function() {
---
>     this.preview.drawCachedTexture = function () {
4131,4132c4138,4139
<             this.ide.serializer.thumbnailSize.add(this.preview.edge * 2)
<             );
---
>         this.ide.serializer.thumbnailSize.add(this.preview.edge * 2)
>     );
4138,4139c4145,4146
<                 SnapSerializer.prototype.thumbnailSize
<                 );
---
>             SnapSerializer.prototype.thumbnailSize
>         );
4196c4203
< ProjectDialogMorph.prototype.popUp = function(wrrld) {
---
> ProjectDialogMorph.prototype.popUp = function (wrrld) {
4201,4206c4208,4213
<                 this,
<                 350,
<                 300,
<                 this.corner,
<                 this.corner
<                 );
---
>             this,
>             350,
>             300,
>             this.corner,
>             this.corner
>         );
4212,4216c4219,4223
< ProjectDialogMorph.prototype.addSourceButton = function(
<         source,
<         label,
<         symbol
<         ) {
---
> ProjectDialogMorph.prototype.addSourceButton = function (
>     source,
>     label,
>     symbol
> ) {
4218c4225
<             lbl1 = new StringMorph(
---
>         lbl1 = new StringMorph(
4227,4228c4234,4235
<             ),
<             lbl2 = new StringMorph(
---
>         ),
>         lbl2 = new StringMorph(
4238,4241c4245,4248
<             ),
<             l1 = new Morph(),
<             l2 = new Morph(),
<             button;
---
>         ),
>         l1 = new Morph(),
>         l2 = new Morph(),
>         button;
4244,4249c4251,4256
<             symbol,
<             24,
<             this.titleBarColor.darker(20),
<             new Point(1, 1),
<             this.titleBarColor.darker(50)
<             ));
---
>         symbol,
>         24,
>         this.titleBarColor.darker(20),
>         new Point(1, 1),
>         this.titleBarColor.darker(50)
>     ));
4257,4262c4264,4269
<             symbol,
<             24,
<             new Color(255, 255, 255),
<             new Point(-1, -1),
<             this.titleBarColor.darker(50)
<             ));
---
>         symbol,
>         24,
>         new Color(255, 255, 255),
>         new Point(-1, -1),
>         this.titleBarColor.darker(50)
>     ));
4270,4278c4277,4285
<             null, //colors,
<             myself, // the ProjectDialog is the target
<             function() { // action
<                 myself.setSource(source);
<             },
<             [l1, l2],
<             function() {  // query
<                 return myself.source === source;
<             }
---
>         null, //colors,
>         myself, // the ProjectDialog is the target
>         function () { // action
>             myself.setSource(source);
>         },
>         [l1, l2],
>         function () {  // query
>             return myself.source === source;
>         }
4299c4306
< ProjectDialogMorph.prototype.fixListFieldItemColors = function() {
---
> ProjectDialogMorph.prototype.fixListFieldItemColors = function () {
4304c4311
<     this.listField.contents.children[0].children.forEach(function(item) {
---
>     this.listField.contents.children[0].children.forEach(function (item) {
4313c4320
< ProjectDialogMorph.prototype.setSource = function(source) {
---
> ProjectDialogMorph.prototype.setSource = function (source) {
4315c4322
<             msg;
---
>         msg;
4318c4325
<     this.srcBar.children.forEach(function(button) {
---
>     this.srcBar.children.forEach(function (button) {
4322,4341c4329,4348
<         case 'cloud':
<             msg = myself.ide.showMessage('Updating\nproject list...');
<             this.projectList = [];
<             SnapCloud.getProjectList(
<                     function(projectList) {
<                         myself.installCloudProjectList(projectList);
<                         msg.destroy();
<                     },
<                     function(err, lbl) {
<                         msg.destroy();
<                         myself.ide.cloudError().call(null, err, lbl);
<                     }
<             );
<             return;
<         case 'examples':
<             this.projectList = this.getExamplesProjectList();
<             break;
<         case 'local':
<             this.projectList = this.getLocalProjectList();
<             break;
---
>     case 'cloud':
>         msg = myself.ide.showMessage('Updating\nproject list...');
>         this.projectList = [];
>         SnapCloud.getProjectList(
>             function (projectList) {
>                 myself.installCloudProjectList(projectList);
>                 msg.destroy();
>             },
>             function (err, lbl) {
>                 msg.destroy();
>                 myself.ide.cloudError().call(null, err, lbl);
>             }
>         );
>         return;
>     case 'examples':
>         this.projectList = this.getExamplesProjectList();
>         break;
>     case 'local':
>         this.projectList = this.getLocalProjectList();
>         break;
4346,4354c4353,4359
<             this.projectList,
<             this.projectList.length > 0 ?
<             function(element) {
<                 return element.name;
<             } : null,
<             null,
<             function() {
<                 myself.ok();
<             }
---
>         this.projectList,
>         this.projectList.length > 0 ?
>                 function (element) {
>                     return element.name;
>                 } : null,
>         null,
>         function () {myself.ok(); }
4367c4372
<         this.listField.action = function(item) {
---
>         this.listField.action = function (item) {
4370,4372c4375
<             if (item === undefined) {
<                 return;
<             }
---
>             if (item === undefined) {return; }
4382c4385
<                         || '';
---
>                     || '';
4386c4389
<                         || null;
---
>                     || null;
4393c4396
<         this.listField.action = function(item) {
---
>         this.listField.action = function (item) {
4395,4397c4398
<             if (item === undefined) {
<                 return;
<             }
---
>             if (item === undefined) {return; }
4402c4403
<                     'http://snap.berkeley.edu/snapsource/Examples/' +
---
>                 'http://snap.berkeley.edu/snapsource/Examples/' +
4404c4405
<                     );
---
>             );
4408c4409
<                     || '';
---
>                 || '';
4412c4413
<                     || null;
---
>                 || null;
4433c4434
< ProjectDialogMorph.prototype.getLocalProjectList = function() {
---
> ProjectDialogMorph.prototype.getLocalProjectList = function () {
4435c4436
<             projects = [];
---
>         projects = [];
4448c4449
<     projects.sort(function(x, y) {
---
>     projects.sort(function (x, y) {
4454c4455
< ProjectDialogMorph.prototype.getExamplesProjectList = function() {
---
> ProjectDialogMorph.prototype.getExamplesProjectList = function () {
4456c4457
<             projects = [];
---
>         projects = [];
4460,4474c4461,4474
<             function(line) {
<                 var startIdx = line.search(new RegExp('href=".*xml"')),
<                         endIdx,
<                         name,
<                         dta;
<                 if (startIdx > 0) {
<                     endIdx = line.search(new RegExp('.xml'));
<                     name = line.substring(startIdx + 6, endIdx);
<                     dta = {
<                         name: name,
<                         thumb: null,
<                         notes: null
<                     };
<                     projects.push(dta);
<                 }
---
>         function (line) {
>             var startIdx = line.search(new RegExp('href=".*xml"')),
>                 endIdx,
>                 name,
>                 dta;
>             if (startIdx > 0) {
>                 endIdx = line.search(new RegExp('.xml'));
>                 name = line.substring(startIdx + 6, endIdx);
>                 dta = {
>                     name: name,
>                     thumb: null,
>                     notes: null
>                 };
>                 projects.push(dta);
4475a4476
>         }
4477c4478
<     projects.sort(function(x, y) {
---
>     projects.sort(function (x, y) {
4483c4484
< ProjectDialogMorph.prototype.installCloudProjectList = function(pl) {
---
> ProjectDialogMorph.prototype.installCloudProjectList = function (pl) {
4486c4487
<     this.projectList.sort(function(x, y) {
---
>     this.projectList.sort(function (x, y) {
4492,4507c4493,4504
<             this.projectList,
<             this.projectList.length > 0 ?
<             function(element) {
<                 return element.ProjectName;
<             } : null,
<             [// format: display shared project names bold
<                 [
<                     'bold',
<                     function(proj) {
<                         return proj.Public === 'true';
<                     }
<                 ]
<             ],
<             function() {
<                 myself.ok();
<             }
---
>         this.projectList,
>         this.projectList.length > 0 ?
>                 function (element) {
>                     return element.ProjectName;
>                 } : null,
>         [ // format: display shared project names bold
>             [
>                 'bold',
>                 function (proj) {return proj.Public === 'true'; }
>             ]
>         ],
>         function () {myself.ok(); }
4518,4521c4515,4516
<     this.listField.action = function(item) {
<         if (item === undefined) {
<             return;
<         }
---
>     this.listField.action = function (item) {
>         if (item === undefined) {return; }
4555c4550
< ProjectDialogMorph.prototype.clearDetails = function() {
---
> ProjectDialogMorph.prototype.clearDetails = function () {
4564c4559
< ProjectDialogMorph.prototype.openProject = function() {
---
> ProjectDialogMorph.prototype.openProject = function () {
4566,4569c4561,4562
<             src;
<     if (!proj) {
<         return;
<     }
---
>         src;
>     if (!proj) {return; }
4575c4568
<                 'http://snap.berkeley.edu/snapsource/Examples/' +
---
>             'http://snap.berkeley.edu/snapsource/Examples/' +
4577c4570
<                 );
---
>         );
4586c4579
< ProjectDialogMorph.prototype.openCloudProject = function(project) {
---
> ProjectDialogMorph.prototype.openCloudProject = function (project) {
4589c4582
<         function() {
---
>         function () {
4592c4585
<         function() {
---
>         function () {
4598c4591
< ProjectDialogMorph.prototype.rawOpenCloudProject = function(proj) {
---
> ProjectDialogMorph.prototype.rawOpenCloudProject = function (proj) {
4601,4619c4594,4609
<             function() {
<                 SnapCloud.callService(
<                         'getProject',
<                         function(response) {
<                             SnapCloud.disconnect();
<                             myself.ide.source = 'cloud';
<                             myself.ide.droppedText(response[0].SourceCode);
<                             if (proj.Public === 'true') {
<                                 location.hash = '#present:Username=' +
<                                         encodeURIComponent(SnapCloud.username) +
<                                         '&ProjectName=' +
<                                         encodeURIComponent(proj.ProjectName);
<                             }
<                         },
<                         myself.ide.cloudError(),
<                         [proj.ProjectName]
<                         );
<             },
<             myself.ide.cloudError()
---
>         function () {
>             SnapCloud.callService(
>                 'getProject',
>                 function (response) {
>                     SnapCloud.disconnect();
>                     myself.ide.source = 'cloud';
>                     myself.ide.droppedText(response[0].SourceCode);
>                     if (proj.Public === 'true') {
>                         location.hash = '#present:Username=' +
>                             encodeURIComponent(SnapCloud.username) +
>                             '&ProjectName=' +
>                             encodeURIComponent(proj.ProjectName);
>                     }
>                 },
>                 myself.ide.cloudError(),
>                 [proj.ProjectName]
4620a4611,4613
>         },
>         myself.ide.cloudError()
>     );
4624c4617
< ProjectDialogMorph.prototype.saveProject = function() {
---
> ProjectDialogMorph.prototype.saveProject = function () {
4626,4627c4619,4620
<             notes = this.notesText.text,
<             myself = this;
---
>         notes = this.notesText.text,
>         myself = this;
4634,4637c4627,4628
<                     function(item) {
<                         return item.ProjectName === name;
<                     }
<             )) {
---
>                     function (item) {return item.ProjectName === name; }
>                 )) {
4639c4630
<                         localize(
---
>                     localize(
4641,4646c4632,4637
<                         ) + '\n"' + name + '"?',
<                         'Replace Project',
<                         function() {
<                             myself.ide.setProjectName(name);
<                             myself.saveCloudProject();
<                         }
---
>                     ) + '\n"' + name + '"?',
>                     'Replace Project',
>                     function () {
>                         myself.ide.setProjectName(name);
>                         myself.saveCloudProject();
>                     }
4655,4658c4646,4647
<                     function(item) {
<                         return item.name === name;
<                     }
<             )) {
---
>                     function (item) {return item.name === name; }
>                 )) {
4660c4649
<                         localize(
---
>                     localize(
4662,4669c4651,4658
<                         ) + '\n"' + name + '"?',
<                         'Replace Project',
<                         function() {
<                             myself.ide.setProjectName(name);
<                             myself.ide.source = 'local';
<                             myself.ide.saveProject(name);
<                             myself.destroy();
<                         }
---
>                     ) + '\n"' + name + '"?',
>                     'Replace Project',
>                     function () {
>                         myself.ide.setProjectName(name);
>                         myself.ide.source = 'local';
>                         myself.ide.saveProject(name);
>                         myself.destroy();
>                     }
4681c4670
< ProjectDialogMorph.prototype.saveCloudProject = function() {
---
> ProjectDialogMorph.prototype.saveCloudProject = function () {
4685,4691c4674,4680
<             this.ide,
<             function() {
<                 myself.ide.source = 'cloud';
<                 myself.ide.showMessage('saved.', 2);
<             },
<             this.ide.cloudError()
<             );
---
>         this.ide,
>         function () {
>             myself.ide.source = 'cloud';
>             myself.ide.showMessage('saved.', 2);
>         },
>         this.ide.cloudError()
>     );
4695c4684
< ProjectDialogMorph.prototype.deleteProject = function() {
---
> ProjectDialogMorph.prototype.deleteProject = function () {
4697,4699c4686,4688
<             proj,
<             idx,
<             name;
---
>         proj,
>         idx,
>         name;
4705c4694
<                     localize(
---
>                 localize(
4707,4725c4696,4710
<                     ) + '\n"' + proj.ProjectName + '"?',
<                     'Delete Project',
<                     function() {
<                         SnapCloud.reconnect(
<                                 function() {
<                                     SnapCloud.callService(
<                                             'deleteProject',
<                                             function() {
<                                                 SnapCloud.disconnect();
<                                                 myself.ide.hasChangedMedia = true;
<                                                 idx = myself.projectList.indexOf(proj);
<                                                 myself.projectList.splice(idx, 1);
<                                                 myself.installCloudProjectList(
<                                                         myself.projectList
<                                                         ); // refresh list
<                                             },
<                                             myself.ide.cloudError(),
<                                             [proj.ProjectName]
<                                             );
---
>                 ) + '\n"' + proj.ProjectName + '"?',
>                 'Delete Project',
>                 function () {
>                     SnapCloud.reconnect(
>                         function () {
>                             SnapCloud.callService(
>                                 'deleteProject',
>                                 function () {
>                                     SnapCloud.disconnect();
>                                     myself.ide.hasChangedMedia = true;
>                                     idx = myself.projectList.indexOf(proj);
>                                     myself.projectList.splice(idx, 1);
>                                     myself.installCloudProjectList(
>                                         myself.projectList
>                                     ); // refresh list
4727,4729c4712,4718
<                                 myself.ide.cloudError()
<                                 );
<                     }
---
>                                 myself.ide.cloudError(),
>                                 [proj.ProjectName]
>                             );
>                         },
>                         myself.ide.cloudError()
>                     );
>                 }
4736c4725
<                     localize(
---
>                 localize(
4738,4743c4727,4732
<                     ) + '\n"' + name + '"?',
<                     'Delete Project',
<                     function() {
<                         delete localStorage['-snap-project-' + name];
<                         myself.setSource(myself.source); // refresh list
<                     }
---
>                 ) + '\n"' + name + '"?',
>                 'Delete Project',
>                 function () {
>                     delete localStorage['-snap-project-' + name];
>                     myself.setSource(myself.source); // refresh list
>                 }
4749c4738
< ProjectDialogMorph.prototype.shareProject = function() {
---
> ProjectDialogMorph.prototype.shareProject = function () {
4751,4752c4740,4741
<             proj = this.listField.selected,
<             entry = this.listField.active;
---
>         proj = this.listField.selected,
>         entry = this.listField.active;
4756c4745
<                 localize(
---
>             localize(
4758,4776c4747,4761
<                 ) + '\n"' + proj.ProjectName + '"?',
<                 'Share Project',
<                 function() {
<                     myself.ide.showMessage('sharing\nproject...');
<                     SnapCloud.reconnect(
<                             function() {
<                                 SnapCloud.callService(
<                                         'publishProject',
<                                         function() {
<                                             SnapCloud.disconnect();
<                                             proj.Public = 'true';
<                                             entry.label.isBold = true;
<                                             entry.label.drawNew();
<                                             entry.label.changed();
<                                             myself.ide.showMessage('shared.', 2);
<                                         },
<                                         myself.ide.cloudError(),
<                                         [proj.ProjectName]
<                                         );
---
>             ) + '\n"' + proj.ProjectName + '"?',
>             'Share Project',
>             function () {
>                 myself.ide.showMessage('sharing\nproject...');
>                 SnapCloud.reconnect(
>                     function () {
>                         SnapCloud.callService(
>                             'publishProject',
>                             function () {
>                                 SnapCloud.disconnect();
>                                 proj.Public = 'true';
>                                 entry.label.isBold = true;
>                                 entry.label.drawNew();
>                                 entry.label.changed();
>                                 myself.ide.showMessage('shared.', 2);
4778,4780c4763,4769
<                             myself.ide.cloudError()
<                             );
<                 }
---
>                             myself.ide.cloudError(),
>                             [proj.ProjectName]
>                         );
>                     },
>                     myself.ide.cloudError()
>                 );
>             }
4785c4774
< ProjectDialogMorph.prototype.unshareProject = function() {
---
> ProjectDialogMorph.prototype.unshareProject = function () {
4787,4788c4776,4777
<             proj = this.listField.selected,
<             entry = this.listField.active;
---
>         proj = this.listField.selected,
>         entry = this.listField.active;
4793c4782
<                 localize(
---
>             localize(
4795,4813c4784,4798
<                 ) + '\n"' + proj.ProjectName + '"?',
<                 'Unshare Project',
<                 function() {
<                     myself.ide.showMessage('unsharing\nproject...');
<                     SnapCloud.reconnect(
<                             function() {
<                                 SnapCloud.callService(
<                                         'unpublishProject',
<                                         function() {
<                                             SnapCloud.disconnect();
<                                             proj.Public = 'false';
<                                             entry.label.isBold = false;
<                                             entry.label.drawNew();
<                                             entry.label.changed();
<                                             myself.ide.showMessage('unshared.', 2);
<                                         },
<                                         myself.ide.cloudError(),
<                                         [proj.ProjectName]
<                                         );
---
>             ) + '\n"' + proj.ProjectName + '"?',
>             'Unshare Project',
>             function () {
>                 myself.ide.showMessage('unsharing\nproject...');
>                 SnapCloud.reconnect(
>                     function () {
>                         SnapCloud.callService(
>                             'unpublishProject',
>                             function () {
>                                 SnapCloud.disconnect();
>                                 proj.Public = 'false';
>                                 entry.label.isBold = false;
>                                 entry.label.drawNew();
>                                 entry.label.changed();
>                                 myself.ide.showMessage('unshared.', 2);
4815,4817c4800,4806
<                             myself.ide.cloudError()
<                             );
<                 }
---
>                             myself.ide.cloudError(),
>                             [proj.ProjectName]
>                         );
>                     },
>                     myself.ide.cloudError()
>                 );
>             }
4822c4811
< ProjectDialogMorph.prototype.edit = function() {
---
> ProjectDialogMorph.prototype.edit = function () {
4830c4819
< ProjectDialogMorph.prototype.fixLayout = function() {
---
> ProjectDialogMorph.prototype.fixLayout = function () {
4832,4833c4821,4822
<             thin = this.padding / 2,
<             oldFlag = Morph.prototype.trackChanges;
---
>         thin = this.padding / 2,
>         oldFlag = Morph.prototype.trackChanges;
4843,4845c4832,4834
<                 this.padding,
<                 th + this.padding
<                 )));
---
>             this.padding,
>             th + this.padding
>         )));
4847,4849c4836,4838
<                 this.width() - this.padding * 2,
<                 this.height() - this.padding * 3 - th - this.buttons.height()
<                 ));
---
>             this.width() - this.padding * 2,
>             this.height() - this.padding * 3 - th - this.buttons.height()
>         ));
4853,4854c4842,4843
<                     this.body.width() - this.srcBar.width() - this.padding * 6
<                     );
---
>                 this.body.width() - this.srcBar.width() - this.padding * 6
>             );
4862c4851
<                 this.body.width()
---
>             this.body.width()
4867c4856
<                 );
---
>         );
4873,4874c4862,4863
<                     this.body.height() - this.nameField.height() - this.padding
<                     );
---
>                 this.body.height() - this.nameField.height() - this.padding
>             );
4890,4891c4879,4880
<                 this.body.bottom() - this.preview.bottom() - thin
<                 );
---
>             this.body.bottom() - this.preview.bottom() - thin
>         );
4909,4916c4898
< /**
<  *     I am a selectable element in the Sprite corral, keeping a self-updating
<  thumbnail of the sprite I'm respresenting, and a self-updating label
<  of the sprite's name (in case it is changed elsewhere).
<  *
<  * @class MyClass
<  * @constructor
<  */
---
> 
4918,4921c4900,4903
<  I am a selectable element in the Sprite corral, keeping a self-updating
<  thumbnail of the sprite I'm respresenting, and a self-updating label
<  of the sprite's name (in case it is changed elsewhere)
<  */
---
>     I am a selectable element in the Sprite corral, keeping a self-updating
>     thumbnail of the sprite I'm respresenting, and a self-updating label
>     of the sprite's name (in case it is changed elsewhere)
> */
4943c4925
< SpriteIconMorph.prototype.init = function(aSprite, aTemplate) {
---
> SpriteIconMorph.prototype.init = function (aSprite, aTemplate) {
4955c4937
<     action = function() {
---
>     action = function () {
4964c4946
<     query = function() {
---
>     query = function () {
4982,4991c4964,4973
<             this,
<             colors, // color overrides, <array>: [normal, highlight, pressed]
<             null, // target - not needed here
<             action, // a toggle function
<             this.object.name, // label string
<             query, // predicate/selector
<             null, // environment
<             null, // hint
<             aTemplate // optional, for cached background images
<             );
---
>         this,
>         colors, // color overrides, <array>: [normal, highlight, pressed]
>         null, // target - not needed here
>         action, // a toggle function
>         this.object.name, // label string
>         query, // predicate/selector
>         null, // environment
>         null, // hint
>         aTemplate // optional, for cached background images
>     );
5002c4984
< SpriteIconMorph.prototype.createThumbnail = function() {
---
> SpriteIconMorph.prototype.createThumbnail = function () {
5018c5000
< SpriteIconMorph.prototype.createLabel = function() {
---
> SpriteIconMorph.prototype.createLabel = function () {
5025,5034c5007,5016
<             this.object.name,
<             this.fontSize,
<             this.fontStyle,
<             true,
<             false,
<             false,
<             this.labelShadowOffset,
<             this.labelShadowColor,
<             this.labelColor
<             );
---
>         this.object.name,
>         this.fontSize,
>         this.fontStyle,
>         true,
>         false,
>         false,
>         this.labelShadowOffset,
>         this.labelShadowColor,
>         this.labelColor
>     );
5045c5027
< SpriteIconMorph.prototype.createRotationButton = function() {
---
> SpriteIconMorph.prototype.createRotationButton = function () {
5057,5069c5039,5051
<             null, // colors,
<             null, // target
<             function() {
<                 myself.object.rotatesWithAnchor =
<                         !myself.object.rotatesWithAnchor;
<             },
<             [
<                 '\u2192',
<                 '\u21BB'
<             ],
<             function() {  // query
<                 return myself.object.rotatesWithAnchor;
<             }
---
>         null, // colors,
>         null, // target
>         function () {
>             myself.object.rotatesWithAnchor =
>                 !myself.object.rotatesWithAnchor;
>         },
>         [
>             '\u2192',
>             '\u21BB'
>         ],
>         function () {  // query
>             return myself.object.rotatesWithAnchor;
>         }
5087c5069
< SpriteIconMorph.prototype.step = function() {
---
> SpriteIconMorph.prototype.step = function () {
5099,5102c5081,5082
< SpriteIconMorph.prototype.fixLayout = function() {
<     if (!this.thumbnail || !this.label) {
<         return null;
<     }
---
> SpriteIconMorph.prototype.fixLayout = function () {
>     if (!this.thumbnail || !this.label) {return null; }
5105c5085
<             this.thumbnail.width()
---
>         this.thumbnail.width()
5109c5089
<             );
---
>     );
5112c5092
<             this.thumbnail.height()
---
>         this.thumbnail.height()
5117c5097
<             );
---
>     );
5121,5122c5101,5102
<             this.top() + this.outline + this.edge + this.padding
<             );
---
>         this.top() + this.outline + this.edge + this.padding
>     );
5130c5110
<             Math.min(
---
>         Math.min(
5133,5134c5113,5114
<             )
<             );
---
>         )
>     );
5137,5138c5117,5118
<             this.thumbnail.bottom() + this.padding
<             );
---
>         this.thumbnail.bottom() + this.padding
>     );
5143c5123
< SpriteIconMorph.prototype.userMenu = function() {
---
> SpriteIconMorph.prototype.userMenu = function () {
5145c5125
<             myself = this;
---
>         myself = this;
5148,5153c5128,5133
<                 'pic...',
<                 function() {
<                     window.open(myself.object.fullImageClassic().toDataURL());
<                 },
<                 'open a new window\nwith a picture of the stage'
<                 );
---
>             'pic...',
>             function () {
>                 window.open(myself.object.fullImageClassic().toDataURL());
>             },
>             'open a new window\nwith a picture of the stage'
>         );
5156,5158c5136
<     if (!(this.object instanceof SpriteMorph)) {
<         return null;
<     }
---
>     if (!(this.object instanceof SpriteMorph)) {return null; }
5166,5169c5144,5145
<                 localize('detach from') + ' ' + this.object.anchor.name,
<                 function() {
<                     myself.object.detachFromAnchor();
<                 }
---
>             localize('detach from') + ' ' + this.object.anchor.name,
>             function () {myself.object.detachFromAnchor(); }
5174,5177c5150,5151
<                 'detach all parts',
<                 function() {
<                     myself.object.detachAllParts();
<                 }
---
>             'detach all parts',
>             function () {myself.object.detachAllParts(); }
5184c5158
< SpriteIconMorph.prototype.duplicateSprite = function() {
---
> SpriteIconMorph.prototype.duplicateSprite = function () {
5191c5165
< SpriteIconMorph.prototype.removeSprite = function() {
---
> SpriteIconMorph.prototype.removeSprite = function () {
5198c5172
< SpriteIconMorph.prototype.exportSprite = function() {
---
> SpriteIconMorph.prototype.exportSprite = function () {
5202c5176
< SpriteIconMorph.prototype.showSpriteOnStage = function() {
---
> SpriteIconMorph.prototype.showSpriteOnStage = function () {
5208c5182
< SpriteIconMorph.prototype.createBackgrounds = function() {
---
> SpriteIconMorph.prototype.createBackgrounds = function () {
5211c5185
<             ext = this.extent();
---
>         ext = this.extent();
5234,5238c5208,5212
<             context,
<             this.pressColor,
<             this.pressColor.lighter(this.contrast),
<             this.pressColor.darker(this.contrast)
<             );
---
>         context,
>         this.pressColor,
>         this.pressColor.lighter(this.contrast),
>         this.pressColor.darker(this.contrast)
>     );
5245c5219
< SpriteIconMorph.prototype.prepareToBeGrabbed = function() {
---
> SpriteIconMorph.prototype.prepareToBeGrabbed = function () {
5247c5221
<             idx;
---
>         idx;
5257c5231
< SpriteIconMorph.prototype.wantsDropOf = function(morph) {
---
> SpriteIconMorph.prototype.wantsDropOf = function (morph) {
5261,5262c5235,5236
<             || (morph instanceof CostumeIconMorph)
<             || (morph instanceof SoundIconMorph);
---
>         || (morph instanceof CostumeIconMorph)
>         || (morph instanceof SoundIconMorph);
5265c5239
< SpriteIconMorph.prototype.reactToDropOf = function(morph, hand) {
---
> SpriteIconMorph.prototype.reactToDropOf = function (morph, hand) {
5277c5251
< SpriteIconMorph.prototype.copyStack = function(block) {
---
> SpriteIconMorph.prototype.copyStack = function (block) {
5279,5281c5253,5255
<             y = Math.max(this.object.scripts.children.map(function(stack) {
<         return stack.fullBounds().bottom();
<     }).concat([this.object.scripts.top()]));
---
>         y = Math.max(this.object.scripts.children.map(function (stack) {
>             return stack.fullBounds().bottom();
>         }).concat([this.object.scripts.top()]));
5285c5259
<     dup.allComments().forEach(function(comment) {
---
>     dup.allComments().forEach(function (comment) {
5292c5266
<     dup.allChildren().forEach(function(morph) {
---
>     dup.allChildren().forEach(function (morph) {
5299c5273
< SpriteIconMorph.prototype.copyCostume = function(costume) {
---
> SpriteIconMorph.prototype.copyCostume = function (costume) {
5305c5279
< SpriteIconMorph.prototype.copySound = function(sound) {
---
> SpriteIconMorph.prototype.copySound = function (sound) {
5311,5319c5285
< /**
<  * I am a selectable element in the SpriteEditor's "Costumes" tab, keeping
<  a self-updating thumbnail of the costume I'm respresenting, and a
<  self-updating label of the costume's name (in case it is changed
<  elsewhere).
<  *
<  * @class CostumeIconMorph
<  * @constructor
<  */
---
> 
5321,5325c5287,5291
<  I am a selectable element in the SpriteEditor's "Costumes" tab, keeping
<  a self-updating thumbnail of the costume I'm respresenting, and a
<  self-updating label of the costume's name (in case it is changed
<  elsewhere)
<  */
---
>     I am a selectable element in the SpriteEditor's "Costumes" tab, keeping
>     a self-updating thumbnail of the costume I'm respresenting, and a
>     self-updating label of the costume's name (in case it is changed
>     elsewhere)
> */
5348c5314
< CostumeIconMorph.prototype.init = function(aCostume, aTemplate) {
---
> CostumeIconMorph.prototype.init = function (aCostume, aTemplate) {
5360c5326
<     action = function() {
---
>     action = function () {
5363c5329
<                 wardrobe = myself.parentThatIsA(WardrobeMorph);
---
>             wardrobe = myself.parentThatIsA(WardrobeMorph);
5373c5339
<     query = function() {
---
>     query = function () {
5390,5399c5356,5365
<             this,
<             colors, // color overrides, <array>: [normal, highlight, pressed]
<             null, // target - not needed here
<             action, // a toggle function
<             this.object.name, // label string
<             query, // predicate/selector
<             null, // environment
<             null, // hint
<             aTemplate // optional, for cached background images
<             );
---
>         this,
>         colors, // color overrides, <array>: [normal, highlight, pressed]
>         null, // target - not needed here
>         action, // a toggle function
>         this.object.name, // label string
>         query, // predicate/selector
>         null, // environment
>         null, // hint
>         aTemplate // optional, for cached background images
>     );
5411c5377
<         = SpriteIconMorph.prototype.createThumbnail;
---
>     = SpriteIconMorph.prototype.createThumbnail;
5414c5380
<         = SpriteIconMorph.prototype.createLabel;
---
>     = SpriteIconMorph.prototype.createLabel;
5419c5385
<         = SpriteIconMorph.prototype.step;
---
>     = SpriteIconMorph.prototype.step;
5424c5390
<         = SpriteIconMorph.prototype.fixLayout;
---
>     = SpriteIconMorph.prototype.fixLayout;
5428c5394
< CostumeIconMorph.prototype.userMenu = function() {
---
> CostumeIconMorph.prototype.userMenu = function () {
5430,5432c5396
<     if (!(this.object instanceof Costume)) {
<         return null;
<     }
---
>     if (!(this.object instanceof Costume)) {return null; }
5436,5440c5400,5404
<                 'edit rotation point only...',
<                 'editRotationPointOnly',
<                 null,
<                 new Color(100, 0, 0)
<                 );
---
>             'edit rotation point only...',
>             'editRotationPointOnly',
>             null,
>             new Color(100, 0, 0)
>         );
5451c5415
< CostumeIconMorph.prototype.editCostume = function() {
---
> CostumeIconMorph.prototype.editCostume = function () {
5456,5458c5420,5422
<                 this.world(),
<                 this.parentThatIsA(IDE_Morph)
<                 );
---
>             this.world(),
>             this.parentThatIsA(IDE_Morph)
>         );
5462c5426
< CostumeIconMorph.prototype.editRotationPointOnly = function() {
---
> CostumeIconMorph.prototype.editRotationPointOnly = function () {
5468c5432
< CostumeIconMorph.prototype.renameCostume = function() {
---
> CostumeIconMorph.prototype.renameCostume = function () {
5470c5434
<             ide = this.parentThatIsA(IDE_Morph);
---
>         ide = this.parentThatIsA(IDE_Morph);
5472,5478c5436,5441
<             null,
<             function(answer) {
<                 if (answer && (answer !== costume.name)) {
<                     costume.name = answer;
<                     costume.version = Date.now();
<                     ide.hasChangedMedia = true;
<                 }
---
>         null,
>         function (answer) {
>             if (answer && (answer !== costume.name)) {
>                 costume.name = answer;
>                 costume.version = Date.now();
>                 ide.hasChangedMedia = true;
5479a5443
>         }
5481,5484c5445,5448
<             'rename costume',
<             costume.name,
<             this.world()
<             );
---
>         'rename costume',
>         costume.name,
>         this.world()
>     );
5487c5451
< CostumeIconMorph.prototype.duplicateCostume = function() {
---
> CostumeIconMorph.prototype.duplicateCostume = function () {
5489,5491c5453,5455
<             ide = this.parentThatIsA(IDE_Morph),
<             newcos = this.object.copy(),
<             split = newcos.name.split(" ");
---
>         ide = this.parentThatIsA(IDE_Morph),
>         newcos = this.object.copy(),
>         split = newcos.name.split(" ");
5507c5471
< CostumeIconMorph.prototype.removeCostume = function() {
---
> CostumeIconMorph.prototype.removeCostume = function () {
5509,5510c5473,5474
<             idx = this.parent.children.indexOf(this),
<             ide = this.parentThatIsA(IDE_Morph);
---
>         idx = this.parent.children.indexOf(this),
>         ide = this.parentThatIsA(IDE_Morph);
5517c5481
< CostumeIconMorph.prototype.exportCostume = function() {
---
> CostumeIconMorph.prototype.exportCostume = function () {
5528c5492
<         = SpriteIconMorph.prototype.createBackgrounds;
---
>     = SpriteIconMorph.prototype.createBackgrounds;
5532c5496
< CostumeIconMorph.prototype.prepareToBeGrabbed = function() {
---
> CostumeIconMorph.prototype.prepareToBeGrabbed = function () {
5538,5544c5502
< /**
<  * I am a selectable element in the SpriteEditor's "Costumes" tab, keeping
<  a thumbnail of the sprite's or stage's default "Turtle" costume.
<  *
<  * @class TurtleIconMorph
<  * @constructor
<  */
---
> 
5546,5548c5504,5506
<  I am a selectable element in the SpriteEditor's "Costumes" tab, keeping
<  a thumbnail of the sprite's or stage's default "Turtle" costume.
<  */
---
>     I am a selectable element in the SpriteEditor's "Costumes" tab, keeping
>     a thumbnail of the sprite's or stage's default "Turtle" costume.
> */
5571c5529
< TurtleIconMorph.prototype.init = function(aSpriteOrStage, aTemplate) {
---
> TurtleIconMorph.prototype.init = function (aSpriteOrStage, aTemplate) {
5583c5541
<     action = function() {
---
>     action = function () {
5586c5544
<                 wardrobe = myself.parentThatIsA(WardrobeMorph);
---
>             wardrobe = myself.parentThatIsA(WardrobeMorph);
5596c5554
<     query = function() {
---
>     query = function () {
5613,5622c5571,5580
<             this,
<             colors, // color overrides, <array>: [normal, highlight, pressed]
<             null, // target - not needed here
<             action, // a toggle function
<             'default', // label string
<             query, // predicate/selector
<             null, // environment
<             null, // hint
<             aTemplate // optional, for cached background images
<             );
---
>         this,
>         colors, // color overrides, <array>: [normal, highlight, pressed]
>         null, // target - not needed here
>         action, // a toggle function
>         'default', // label string
>         query, // predicate/selector
>         null, // environment
>         null, // hint
>         aTemplate // optional, for cached background images
>     );
5632c5590
< TurtleIconMorph.prototype.createThumbnail = function() {
---
> TurtleIconMorph.prototype.createThumbnail = function () {
5640,5645c5598,5603
<                 'turtle',
<                 this.thumbSize.y,
<                 this.labelColor,
<                 isFlat ? null : new Point(-1, -1),
<                 new Color(0, 0, 0)
<                 );
---
>             'turtle',
>             this.thumbSize.y,
>             this.labelColor,
>             isFlat ? null : new Point(-1, -1),
>             new Color(0, 0, 0)
>         );
5648,5653c5606,5611
<                 'stage',
<                 this.thumbSize.y,
<                 this.labelColor,
<                 isFlat ? null : new Point(-1, -1),
<                 new Color(0, 0, 0)
<                 );
---
>             'stage',
>             this.thumbSize.y,
>             this.labelColor,
>             isFlat ? null : new Point(-1, -1),
>             new Color(0, 0, 0)
>         );
5658c5616
< TurtleIconMorph.prototype.createLabel = function() {
---
> TurtleIconMorph.prototype.createLabel = function () {
5665c5623
<             localize(
---
>         localize(
5667,5676c5625,5634
<             ),
<             this.fontSize,
<             this.fontStyle,
<             true,
<             false,
<             false,
<             this.labelShadowOffset,
<             this.labelShadowColor,
<             this.labelColor
<             );
---
>         ),
>         this.fontSize,
>         this.fontStyle,
>         true,
>         false,
>         false,
>         this.labelShadowOffset,
>         this.labelShadowColor,
>         this.labelColor
>     );
5690c5648
<         = SpriteIconMorph.prototype.fixLayout;
---
>     = SpriteIconMorph.prototype.fixLayout;
5695c5653
<         = SpriteIconMorph.prototype.createBackgrounds;
---
>     = SpriteIconMorph.prototype.createBackgrounds;
5699c5657
< TurtleIconMorph.prototype.userMenu = function() {
---
> TurtleIconMorph.prototype.userMenu = function () {
5701,5703c5659,5661
<             menu = new MenuMorph(this, 'pen'),
<             on = '\u25CF',
<             off = '\u25CB';
---
>         menu = new MenuMorph(this, 'pen'),
>         on = '\u25CF',
>         off = '\u25CB';
5708,5714c5666,5672
<             (this.object.penPoint === 'tip' ? on : off) + ' ' + localize('tip'),
<             function() {
<                 myself.object.penPoint = 'tip';
<                 myself.object.changed();
<                 myself.object.drawNew();
<                 myself.object.changed();
<             }
---
>         (this.object.penPoint === 'tip' ? on : off) + ' ' + localize('tip'),
>         function () {
>             myself.object.penPoint = 'tip';
>             myself.object.changed();
>             myself.object.drawNew();
>             myself.object.changed();
>         }
5717c5675
<             (this.object.penPoint === 'middle' ? on : off) + ' ' + localize(
---
>         (this.object.penPoint === 'middle' ? on : off) + ' ' + localize(
5719,5725c5677,5683
<             ),
<             function() {
<                 myself.object.penPoint = 'middle';
<                 myself.object.changed();
<                 myself.object.drawNew();
<                 myself.object.changed();
<             }
---
>         ),
>         function () {
>             myself.object.penPoint = 'middle';
>             myself.object.changed();
>             myself.object.drawNew();
>             myself.object.changed();
>         }
5731,5736c5689
< /**
<  * I am a watcher on a sprite's costume list.
<  *
<  * @class WardrobeMorph
<  * @constructor
<  */
---
> 
5755c5708
< WardrobeMorph.prototype.init = function(aSprite, sliderColor) {
---
> WardrobeMorph.prototype.init = function (aSprite, sliderColor) {
5771c5724
< WardrobeMorph.prototype.updateList = function() {
---
> WardrobeMorph.prototype.updateList = function () {
5773,5781c5726,5734
<             x = this.left() + 5,
<             y = this.top() + 5,
<             padding = 4,
<             oldFlag = Morph.prototype.trackChanges,
<             oldPos = this.contents.position(),
<             icon,
<             template,
<             txt,
<             paintbutton;
---
>         x = this.left() + 5,
>         y = this.top() + 5,
>         padding = 4,
>         oldFlag = Morph.prototype.trackChanges,
>         oldPos = this.contents.position(),
>         icon,
>         template,
>         txt,
>         paintbutton;
5790c5743
<     this.contents.reactToDropOf = function(icon) {
---
>     this.contents.reactToDropOf = function (icon) {
5801,5804c5754,5757
<             this,
<             "paintNew",
<             new SymbolMorph("brush", 15)
<             );
---
>         this,
>         "paintNew",
>         new SymbolMorph("brush", 15)
>     );
5824c5777
<     
---
> 
5833d5785
< 
5837c5789
<     this.sprite.costumes.asArray().forEach(function(costume) {
---
>     this.sprite.costumes.asArray().forEach(function (costume) {
5853,5857c5805,5807
< WardrobeMorph.prototype.updateSelection = function() {
<     this.contents.children.forEach(function(morph) {
<         if (morph.refresh) {
<             morph.refresh();
<         }
---
> WardrobeMorph.prototype.updateSelection = function () {
>     this.contents.children.forEach(function (morph) {
>         if (morph.refresh) {morph.refresh(); }
5864c5814
< WardrobeMorph.prototype.step = function() {
---
> WardrobeMorph.prototype.step = function () {
5875c5825
< WardrobeMorph.prototype.removeCostumeAt = function(idx) {
---
> WardrobeMorph.prototype.removeCostumeAt = function (idx) {
5880c5830
< WardrobeMorph.prototype.paintNew = function() {
---
> WardrobeMorph.prototype.paintNew = function () {
5882,5884c5832,5834
<             ide = this.parentThatIsA(IDE_Morph),
<             myself = this;
<     cos.edit(this.world(), ide, true, null, function() {
---
>         ide = this.parentThatIsA(IDE_Morph),
>         myself = this;
>     cos.edit(this.world(), ide, true, null, function () {
5895c5845
< WardrobeMorph.prototype.wantsDropOf = function(morph) {
---
> WardrobeMorph.prototype.wantsDropOf = function (morph) {
5899c5849
< WardrobeMorph.prototype.reactToDropOf = function(icon) {
---
> WardrobeMorph.prototype.reactToDropOf = function (icon) {
5901,5902c5851,5852
<             costume = icon.object,
<             top = icon.top();
---
>         costume = icon.object,
>         top = icon.top();
5905c5855
<     this.contents.children.forEach(function(item) {
---
>     this.contents.children.forEach(function (item) {
5916,5921c5866
< /**
<  * I am an element in the SpriteEditor's "Sounds" tab.
<  *
<  * @class SoundIconMorph
<  * @constructor
<  */
---
> 
5923,5924c5868,5869
<  I am an element in the SpriteEditor's "Sounds" tab.
<  */
---
>     I am an element in the SpriteEditor's "Sounds" tab.
> */
5947c5892
< SoundIconMorph.prototype.init = function(aSound, aTemplate) {
---
> SoundIconMorph.prototype.init = function (aSound, aTemplate) {
5959c5904
<     action = function() {
---
>     action = function () {
5963c5908
<     query = function() {
---
>     query = function () {
5974,5983c5919,5928
<             this,
<             colors, // color overrides, <array>: [normal, highlight, pressed]
<             null, // target - not needed here
<             action, // a toggle function
<             this.object.name, // label string
<             query, // predicate/selector
<             null, // environment
<             null, // hint
<             aTemplate // optional, for cached background images
<             );
---
>         this,
>         colors, // color overrides, <array>: [normal, highlight, pressed]
>         null, // target - not needed here
>         action, // a toggle function
>         this.object.name, // label string
>         query, // predicate/selector
>         null, // environment
>         null, // hint
>         aTemplate // optional, for cached background images
>     );
5994c5939
< SoundIconMorph.prototype.createThumbnail = function() {
---
> SoundIconMorph.prototype.createThumbnail = function () {
6003,6012c5948,5957
<             this.createInfo(),
<             '16',
<             '',
<             true,
<             false,
<             false,
<             this.labelShadowOffset,
<             this.labelShadowColor,
<             new Color(200, 200, 200)
<             );
---
>         this.createInfo(),
>         '16',
>         '',
>         true,
>         false,
>         false,
>         this.labelShadowOffset,
>         this.labelShadowColor,
>         new Color(200, 200, 200)
>     );
6017,6020c5962,5965
<             this,
<             'toggleAudioPlaying',
<             (this.object.previewAudio ? 'Stop' : 'Play')
<             );
---
>         this,
>         'toggleAudioPlaying',
>         (this.object.previewAudio ? 'Stop' : 'Play')
>     );
6028c5973
< SoundIconMorph.prototype.createInfo = function() {
---
> SoundIconMorph.prototype.createInfo = function () {
6030c5975
<             mod = dur % 60;
---
>         mod = dur % 60;
6037c5982
< SoundIconMorph.prototype.toggleAudioPlaying = function() {
---
> SoundIconMorph.prototype.toggleAudioPlaying = function () {
6044c5989
<         this.object.previewAudio.addEventListener('ended', function() {
---
>         this.object.previewAudio.addEventListener('ended', function () {
6058c6003
< SoundIconMorph.prototype.audioHasEnded = function() {
---
> SoundIconMorph.prototype.audioHasEnded = function () {
6064c6009
<         = SpriteIconMorph.prototype.createLabel;
---
>     = SpriteIconMorph.prototype.createLabel;
6069,6071c6014,6016
<  SoundIconMorph.prototype.step
<  = SpriteIconMorph.prototype.step;
<  */
---
> SoundIconMorph.prototype.step
>     = SpriteIconMorph.prototype.step;
> */
6076c6021
<         = SpriteIconMorph.prototype.fixLayout;
---
>     = SpriteIconMorph.prototype.fixLayout;
6080c6025
< SoundIconMorph.prototype.userMenu = function() {
---
> SoundIconMorph.prototype.userMenu = function () {
6082,6084c6027
<     if (!(this.object instanceof Sound)) {
<         return null;
<     }
---
>     if (!(this.object instanceof Sound)) { return null; }
6091c6034
< SoundIconMorph.prototype.renameSound = function() {
---
> SoundIconMorph.prototype.renameSound = function () {
6093,6094c6036,6037
<             ide = this.parentThatIsA(IDE_Morph),
<             myself = this;
---
>         ide = this.parentThatIsA(IDE_Morph),
>         myself = this;
6096,6104c6039,6046
<             null,
<             function(answer) {
<                 if (answer && (answer !== sound.name)) {
<                     sound.name = answer;
<                     sound.version = Date.now();
<                     myself.createLabel(); // can be omitted once I'm stepping
<                     myself.fixLayout(); // can be omitted once I'm stepping
<                     ide.hasChangedMedia = true;
<                 }
---
>         null,
>         function (answer) {
>             if (answer && (answer !== sound.name)) {
>                 sound.name = answer;
>                 sound.version = Date.now();
>                 myself.createLabel(); // can be omitted once I'm stepping
>                 myself.fixLayout(); // can be omitted once I'm stepping
>                 ide.hasChangedMedia = true;
6105a6048
>         }
6107,6110c6050,6053
<             'rename sound',
<             sound.name,
<             this.world()
<             );
---
>         'rename sound',
>         sound.name,
>         this.world()
>     );
6113c6056
< SoundIconMorph.prototype.removeSound = function() {
---
> SoundIconMorph.prototype.removeSound = function () {
6115c6058
<             idx = this.parent.children.indexOf(this);
---
>         idx = this.parent.children.indexOf(this);
6120c6063
<         = SpriteIconMorph.prototype.createBackgrounds;
---
>     = SpriteIconMorph.prototype.createBackgrounds;
6123c6066
<         = SpriteIconMorph.prototype.createLabel;
---
>     = SpriteIconMorph.prototype.createLabel;
6127c6070
< SoundIconMorph.prototype.prepareToBeGrabbed = function() {
---
> SoundIconMorph.prototype.prepareToBeGrabbed = function () {
6132,6137c6075
< /**
<  * I am JukeboxMorph, like WardrobeMorph, but for sounds.
<  *
<  * @class JukeboxMorph
<  * @constructor
<  */
---
> 
6139,6140c6077,6078
<  I am JukeboxMorph, like WardrobeMorph, but for sounds
<  */
---
>     I am JukeboxMorph, like WardrobeMorph, but for sounds
> */
6152c6090
< JukeboxMorph.prototype.init = function(aSprite, sliderColor) {
---
> JukeboxMorph.prototype.init = function (aSprite, sliderColor) {
6169c6107
< JukeboxMorph.prototype.updateList = function() {
---
> JukeboxMorph.prototype.updateList = function () {
6171,6177c6109,6115
<             x = this.left() + 5,
<             y = this.top() + 5,
<             padding = 4,
<             oldFlag = Morph.prototype.trackChanges,
<             icon,
<             template,
<             txt;
---
>         x = this.left() + 5,
>         y = this.top() + 5,
>         padding = 4,
>         oldFlag = Morph.prototype.trackChanges,
>         icon,
>         template,
>         txt;
6186c6124
<     this.contents.reactToDropOf = function(icon) {
---
>     this.contents.reactToDropOf = function (icon) {
6192,6193c6130,6131
<             'import a sound from your computer\nby dragging it into here'
<             ));
---
>         'import a sound from your computer\nby dragging it into here'
>     ));
6200c6138
<     this.sprite.sounds.asArray().forEach(function(sound) {
---
>     this.sprite.sounds.asArray().forEach(function (sound) {
6213,6217c6151,6153
< JukeboxMorph.prototype.updateSelection = function() {
<     this.contents.children.forEach(function(morph) {
<         if (morph.refresh) {
<             morph.refresh();
<         }
---
> JukeboxMorph.prototype.updateSelection = function () {
>     this.contents.children.forEach(function (morph) {
>         if (morph.refresh) {morph.refresh(); }
6225,6230c6161,6166
<  JukeboxMorph.prototype.step = function () {
<  if (this.spriteVersion !== this.sprite.version) {
<  this.updateSelection();
<  }
<  };
<  */
---
> JukeboxMorph.prototype.step = function () {
>     if (this.spriteVersion !== this.sprite.version) {
>         this.updateSelection();
>     }
> };
> */
6234c6170
< JukeboxMorph.prototype.removeSound = function(idx) {
---
> JukeboxMorph.prototype.removeSound = function (idx) {
6241c6177
< JukeboxMorph.prototype.wantsDropOf = function(morph) {
---
> JukeboxMorph.prototype.wantsDropOf = function (morph) {
6245c6181
< JukeboxMorph.prototype.reactToDropOf = function(icon) {
---
> JukeboxMorph.prototype.reactToDropOf = function (icon) {
6247,6248c6183,6184
<             costume = icon.object,
<             top = icon.top();
---
>         costume = icon.object,
>         top = icon.top();
6251c6187
<     this.contents.children.forEach(function(item) {
---
>     this.contents.children.forEach(function (item) {

> lists.js ----------------------

10c10
<     Copyright (C) 2013 by Jens Mönig and Brian Harvey
---
>     Copyright (C) 2014 by Jens Mönig and Brian Harvey
64c64
< modules.lists = '2013-December-04';
---
> modules.lists = '2014-January-09';
70,89d69
< /**
< * I am a dynamic array data structure for SNAP!
<     My index starts with 1
< 
<     I am a "smart" hybrid list, because I can be used as both a linked
<     list and as a dynamic array
< 
<     public interface:
< 
<         setters (linked):
<         -----------------
<         cons                - answer a new list with the given item in front
<         cdr                    - answer all but the first element
< 
<     setters (arrayed):
<     ------------------
<         add(element, index)    - insert the element before the given slot,
<         put(element, index)    - overwrite the element at the given slot
<         remove(index)        - remove the given slot, shortening the list
<         clear()                - remove all elements
91,104d70
<     getters (all hybrid):
<     ---------------------
<         length()            - number of slots
<         at(index)            - element present in specified slot
<         contains(element)    - <bool>
< 
<     conversion:
<     -----------
<         asArray()            - answer me as JavaScript array
<         asText()            - answer my elements (recursively) concatenated
< *
< * @class List
< * @constructor
< */
351,357c317
< /**
< * I am a little window which observes a list and continuously
<     updates itself accordingly
< *
< * @class ListWatcherMorph
< * @constructor
< */
---
> 

> locale.js ----------------------

9c9
<     Copyright (C) 2013 by Jens Mönig
---
>     Copyright (C) 2014 by Jens Mönig
45c45
< modules.locale = '2013-December-04';
---
> modules.locale = '2014-February-13';
152c152
<         '2013-10-04'
---
>         '2014-02-13'
212c212
<         '2013-11-22'
---
>         '2014-01-12'
260c260
<         '2013-12-04'
---
>         '2014-02-04'

> morphic.js ----------------------

11c11
<     Copyright (C) 2013 by Jens Mönig
---
>     Copyright (C) 2014 by Jens Mönig
1038c1038
< var morphicVersion = '2013-December-12';
---
> var morphicVersion = '2014-February-03';
1274,1279c1274
< /**
< * This is the description for my class.
< *
< * @class Color
< * @constructor
< */
---
> 
1443,1448c1438
< /**
< * This is the description for my class.
< *
< * @class Point
< * @constructor
< */
---
> 
1706,1711c1696
< /**
< * This is the description for my class.
< *
< * @class Rectangle
< * @constructor
< */
---
> 
2023,2028c2008
< /**
< * This is the description for my class.
< *
< * @class Node
< * @constructor
< */
---
> 
3091c3071
<         if (property.isMorph && dict[property]) {
---
>         if (this[property] && this[property].isMorph && dict[property]) {
3701,3706c3681
< /**
< * This is the description for my class.
< *
< * @class ShadowMorph
< * @constructor
< */
---
> 
3720,3725c3695
< /**
< * I am a resize / move handle that can be attached to any Morph
< *
< * @class HandleMorph
< * @constructor
< */
---
> 
3976,3981c3946
< /**
< * I am a simple LOGO-wise turtle.
< *
< * @class PenMorph
< * @constructor
< */
---
> 
4210,4215c4175
< /**
< * This is the description for my class.
< *
< * @class ColorPaletteMorph
< * @constructor
< */
---
> 
4347,4352c4307
< /**
< * This is the description for my class.
< *
< * @class GrayPaletteMorph
< * @constructor
< */
---
> 
4385,4390c4340
< /**
< * This is the description for my class.
< *
< * @class ColorPickerMorph
< * @constructor
< */
---
> 
4455,4460c4405
< /**
< * This is the description for my class.
< *
< * @class BlinkerMorph
< * @constructor
< */
---
> 
4491,4496c4436
< /**
< * I am a String/Text editing widget
< *
< * @class CursorMorph
< * @constructor
< */
---
> 
4899,4904c4839
< /**
< * This is the description for my class.
< *
< * @class BoxMorph
< * @constructor
< */
---
> 
5106,5113c5041
< /**
< * I am a comic-style speech bubble that can display either a string,
<     a Morph, a Canvas or a toString() representation of anything else.
<     If I am invoked using popUp() I behave like a tool tip.
< *
< * @class SpeechBubbleMorph
< * @constructor
< */
---
> 
5419,5424c5347
< /**
< * I can be used for sliders
< *
< * @class CircleBoxMorph
< * @constructor
< */
---
> 
5546,5551c5469
< /**
< * This is the description for my class.
< *
< * @class SliderButtonMorph
< * @constructor
< */
---
> 
5765,5770c5683
< /**
< * This is the description for my class.
< *
< * @class SliderMorph
< * @constructor
< */
---
> 
6134,6139c6047
< /**
< * for demo and debuggin purposes only, to be removed later
< *
< * @class MouseSensorMorph
< * @constructor
< */
---
> 
6212,6217c6120
< /**
< * This is the description for my class.
< *
< * @class InspectorMorph
< * @constructor
< */
---
> 
6683,6688c6586
< /**
< * This is the description for my class.
< *
< * @class MenuMorph
< * @constructor
< */
---
> 
6982,6987c6880
< /**
< * I am a single line of text
< *
< * @class StringMorph
< * @constructor
< */
---
> 
7519,7524c7412
< /**
< * I am a multi-line, word-wrapping String, quasi-inheriting from StringMorph
< *
< * @class TextMorph
< * @constructor
< */
---
> 
8049,8054c7937
< /**
< * I provide basic button functionality
< *
< * @class TriggerMorph
< * @constructor
< */
---
> 
8320,8325c8203
< /**
< * I automatically determine my bounds
< *
< * @class MenuItemMorph
< * @constructor
< */
---
> 
8486,8491c8364
< /**
< * I clip my submorphs at my bounds
< *
< * @class FrameMorph
< * @constructor
< */
---
> 
8689,8694c8562
< /**
< * This is the description for my class.
< *
< * @class ScrollFrameMorph
< * @constructor
< */
---
> 
9069,9084d8936
< /**
< *   passing a format is optional. If the format parameter is specified
<     it has to be of the following pattern:
< 
<         [
<             [<color>, <single-argument predicate>],
<             ['bold', <single-argument predicate>],
<             ['italic', <single-argument predicate>],
<             ...
<         ]
< 
<     multiple conditions can be passed in such a format list, the
<     last predicate to evaluate true when given the list element sets
<     the given format category (color, bold, italic).
<     If no condition is met, the default format (color black, non-bold,
<     non-italic) will be assigned.
9086,9091d8937
<     An example of how to use fomats can be found in the InspectorMorph's
<     "markOwnProperties" mechanism.
< *
< * @class ListMorph
< * @constructor
< */
9226,9231c9072
< /**
< * This is the description for my class.
< *
< * @class StringFieldMorph
< * @constructor
< */
---
> 
9341,9346c9182
< /**
< * I am a Demo of a stepping custom Morph
< *
< * @class BouncerMorph
< * @constructor
< */
---
> 
9435,9440c9271
< /**
< * I represent the Mouse cursor
< *
< * @class HandMorph
< * @constructor
< */
---
> 
9958d9788
<         console.log(aFile);
10076,10081c9906
< /**
< * I represent the <canvas> element
< *
< * @class WorldMorph
< * @constructor
< */
---
> 
10207c10032,10033
<     if (document.body.scrollTop) { // scrolled down b/c of viewport scaling
---
>     if (document.documentElement.scrollTop) {
>         // scrolled down b/c of viewport scaling
10210c10036,10037
<     if (document.body.scrollLeft) { // scrolled left b/c of viewport scaling
---
>     if (document.documentElement.scrollLeft) {
>         // scrolled left b/c of viewport scaling
10213d10039
< 

> objects.js ----------------------

12c12
<     Copyright (C) 2013 by Jens Mönig
---
>     Copyright (C) 2014 by Jens Mönig
127c127
< modules.objects = '2013-December-19';
---
> modules.objects = '2014-February-11';
144,149c144
< /**
< * I am a scriptable object
< *
< * @class SpriteMorph
< * @constructor
< */
---
> 
193a189
> SpriteMorph.prototype.useFlatLineEnds = false;
588a585,587
> 
>     /* migrated to a newer block version:
> 
598a598,609
>     */
> 
>         doStopThis: {
>             type: 'command',
>             category: 'control',
>             spec: 'stop %stopChoices'
>         },
>         doStopOthers: {
>             type: 'command',
>             category: 'control',
>             spec: 'stop %stopOthersChoices'
>         },
638c649,650
<         doStopBlock: {
---
>     /*
>         doStopBlock: { // migrated to a newer block version
642a655
>     */
793a807,811
>         reportDate: {
>             type: 'reporter',
>             category: 'sensing',
>             spec: 'current %dates'
>         },
1086a1105,1123
> SpriteMorph.prototype.initBlockMigrations = function () {
>     SpriteMorph.prototype.blockMigrations = {
>         doStopAll: {
>             selector: 'doStopThis',
>             inputs: [['all']]
>         },
>         doStop: {
>             selector: 'doStopThis',
>             inputs: [['this script']]
>         },
>         doStopBlock: {
>             selector: 'doStopThis',
>             inputs: [['this block']]
>         }
>     };
> };
> 
> SpriteMorph.prototype.initBlockMigrations();
> 
1133,1135d1169
<     doStopBlock: ['doStop', 'doStopAll'],
<     doStop: ['doStopBlock', 'doStopAll'],
<     doStopAll: ['doStopBlock', 'doStop'],
1415,1416c1449,1451
<     var info, block, defaults, inputs, i;
<     info = this.blocks[selector];
---
>     var migration, info, block, defaults, inputs, i;
>     migration = this.blockMigrations[selector];
>     info = this.blocks[migration ? migration.selector : selector];
1429,1430c1464,1465
<     if (setDefaults && info.defaults) {
<         defaults = info.defaults;
---
>     if ((setDefaults && info.defaults) || (migration && migration.inputs)) {
>         defaults = migration ? migration.inputs : info.defaults;
1653a1689,1690
>     /*
>     // old STOP variants, migrated to a newer version, now redundant
1656a1694,1696
>     */
>         blocks.push(block('doStopThis'));
>         blocks.push(block('doStopOthers'));
1707a1748,1749
>         blocks.push('-');
>         blocks.push(block('reportDate'));
2686,2687c2728,2734
<         context.lineCap = 'round';
<         context.lineJoin = 'round';
---
>         if (this.useFlatLineEnds) {
>             context.lineCap = 'butt';
>             context.lineJoin = 'miter';
>         } else {
>             context.lineCap = 'round';
>             context.lineJoin = 'round';
>         }
3653,3658c3700
< /**
< * This is the description for my class.
< *
< * @class SpriteHighlightMorph
< * @constructor
< */
---
> 
3672,3677c3714
< /**
< * This is the description for my class. I inherit from FrameMorph and copy from SpriteMorph.
< *
< * @class StageMorph
< * @constructor
< */
---
> 
4174d4210
<         
4179,4199c4215,4218
<     console.log("StageMorph.children");
<     console.log(this.children);
<         this.children.concat(this).forEach(function (morph) {
<             console.log('~~~~~~~ FOR EACH morph~~~~~~~~~');
<             console.log(morph);
<             if (morph instanceof SpriteMorph || morph instanceof StageMorph) {
<                 hats = hats.concat(morph.allHatBlocksFor('__shout__go__'));
<             }
<         });
<         hats.forEach(function (block) {
<             console.log('~~~~~~~ FOR EACH block~~~~~~~~~');
<             console.log(block);
<             procs.push(myself.threads.startProcess(
<                 block,
<                 myself.isThreadSafe
<             ));
<         });
<        
<         
<         if (ide) {
<             ide.controlBar.pauseButton.refresh();
---
> 
>     this.children.concat(this).forEach(function (morph) {
>         if (morph instanceof SpriteMorph || morph instanceof StageMorph) {
>             hats = hats.concat(morph.allHatBlocksFor('__shout__go__'));
4201c4220,4229
<     
---
>     });
>     hats.forEach(function (block) {
>         procs.push(myself.threads.startProcess(
>             block,
>             myself.isThreadSafe
>         ));
>     });
>     if (ide) {
>         ide.controlBar.pauseButton.refresh();
>     }
4378a4407,4408
>     /*
>     // old STOP variants, migrated to a newer version, now redundant
4381a4412,4414
>     */
>         blocks.push(block('doStopThis'));
>         blocks.push(block('doStopOthers'));
4424a4458,4459
>         blocks.push('-');
>         blocks.push(block('reportDate'));
4898,4904c4933
< /**
< * I am a sprite's scaleable speech bubble. I rely on SpriteMorph
<     for my preferences settings
< *
< * @class SpriteBubbleMorph
< * @constructor
< */
---
> 
5109,5115c5138
< /**
< * I am a picture that's "wearable" by a sprite. My rotationCenter is
<     relative to my contents position.
< *
< * @class Costume
< * @constructor
< */
---
> 
5186c5209
<     // answer the rectangle surrounding my contents' non-transparent pixels 
---
>     // answer the rectangle surrounding my contents' non-transparent pixels
5294c5317
<                 newCanvas(new Point(480, 360)) :
---
>                 newCanvas(StageMorph.prototype.dimensions) :
5302c5325,5328
<             myself.shrinkWrap();
---
>             if (anIDE.currentSprite instanceof SpriteMorph) {
>                 // don't shrinkwrap stage costumes
>                 myself.shrinkWrap();
>             }
5399,5404c5425
< /**
< * I am a costume containing an SVG image.
< *
< * @class SVG_Costume
< * @constructor
< */
---
> 
5459,5464c5480
< /**
< * This is the description for my class.
< *
< * @class CostumeEditorMorph
< * @constructor
< */
---
> 
5596,5601c5612
< /**
< * This is the description for my class.
< *
< * @class Sound
< * @constructor
< */
---
> 
5632,5637c5643
< /**
< * I am a single musical note
< *
< * @class Note
< * @constructor
< */
---
> 
5659c5665
<         return window.AudioContext ||
---
>         var ctx = window.AudioContext ||
5663a5670,5673
>         if (!ctx.prototype.hasOwnProperty('createGain')) {
>             ctx.prototype.createGain = ctx.prototype.createGainNode;
>         }
>         return ctx;
5669c5679
<     Note.prototype.gainNode = Note.prototype.audioContext.createGainNode();
---
>     Note.prototype.gainNode = Note.prototype.audioContext.createGain();
5676a5687,5692
>     if (!this.oscillator.start) {
>         this.oscillator.start = this.oscillator.noteOn;
>     }
>     if (!this.oscillator.stop) {
>         this.oscillator.stop = this.oscillator.noteOff;
>     }
5682c5698
<     this.oscillator.noteOn(0); // deprecated, renamed to start()
---
>     this.oscillator.start(0);
5687c5703
<         this.oscillator.noteOff(0); // deprecated, renamed to stop()
---
>         this.oscillator.stop(0);
5693,5700c5709
< /**
< * I am a spreadsheet style cell that can display either a string,
<     a Morph, a Canvas or a toString() representation of anything else.
<     I can be used in variable watchers or list view element cells.
< *
< * @class CellMorph
< * @constructor
< */
---
> 
6029,6031d6037
< /**
< * I am a little window which observes some value and continuously
<     updates itself accordingly.
6033,6037d6038
<     My target can be either a SpriteMorph or a VariableFrame.
< *
< * @class WatcherMorph
< * @constructor
< */
6509,6518c6510
< /**
< * I am a sensor-category-colored input box at the bottom of the stage
<     which lets the user answer to a question. If I am opened from within
<     the context of a sprite, my question can be anything that is displayable
<     in a SpeechBubble and will be, if I am opened from within the stage
<     my question will be shown as a single line of text within my label morph.
< *
< * @class StagePrompterMorph
< * @constructor
< */
---
> 
6577c6569
<     this.setWidth(480 - 20);
---
>     this.setWidth(StageMorph.prototype.dimensions.x - 20);

> paint.js ----------------------

1,961c1,956
< /*
<     paint.js
< 
<     a paint editor for Snap!
<     inspired by the Scratch paint editor.
<  
<     written by Kartik Chandra
<     Copyright (C) 2013 by Kartik Chandra
<   
<     This file is part of Snap!.
<  
<     Snap! is free software: you can redistribute it and/or modify
<     it under the terms of the GNU Affero General Public License as
<     published by the Free Software Foundation, either version 3 of
<     the License, or (at your option) any later version.
< 
<     This program is distributed in the hope that it will be useful,
<     but WITHOUT ANY WARRANTY; without even the implied warranty of
<     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
<     GNU Affero General Public License for more details.
< 
<     You should have received a copy of the GNU Affero General Public License
<     along with this program.  If not, see <http://www.gnu.org/licenses/>.
< 
< 
<     toc
<     ---
<     the following list shows the order in which all constructors are
<     defined. Use this list to locate code in this document:
< 
<         PaintEditorMorph
<         PaintColorPickerMorph
<         PaintCanvasMorph
< 
< 
<     credits
<     -------
<     Nathan Dinsmore contributed a fully working prototype,
<     Nathan's brilliant flood-fill tool has been more or less
<     directly imported into this paint implementation.
< 
<     Jens Mönig has contributed icons and bugfixes and says he has probably
<     introduced many other bugs in that process. :-)
< 
< 
<     revision history
<     ----------------
<     May 10 - first full release (Kartik)
<     May 14 - bugfixes, Snap integration (Jens)
<     May 16 - flat design adjustments (Jens)
<     July 12 - pipette tool, code formatting adjustments (Jens)
<     September 16 - flood fill freeze fix (Kartik)
< 
<  */
< 
< /*global Point, Rectangle, DialogBoxMorph, fontHeight, AlignmentMorph,
<  FrameMorph, PushButtonMorph, Color, SymbolMorph, newCanvas, Morph, TextMorph,
<  CostumeIconMorph, IDE_Morph, Costume, SpriteMorph, nop, Image, WardrobeMorph,
<  TurtleIconMorph, localize, MenuMorph, InputFieldMorph, SliderMorph,
<  ToggleMorph, ToggleButtonMorph, BoxMorph, modules, radians,
<  MorphicPreferences, getDocumentPositionOf
<  */
< 
< // Global stuff ////////////////////////////////////////////////////////
< 
< modules.paint = '2013-September-16';
< 
< // Declarations
< 
< var PaintEditorMorph;
< var PaintCanvasMorph;
< var PaintColorPickerMorph;
< 
< // PaintEditorMorph //////////////////////////
< /**
< * A complete paint editor
< *
< * @class PaintEditorMorph
< * @constructor
< */
< // A complete paint editor
< 
< PaintEditorMorph.prototype = new DialogBoxMorph();
< PaintEditorMorph.prototype.constructor = PaintEditorMorph;
< PaintEditorMorph.uber = DialogBoxMorph.prototype;
< 
< PaintEditorMorph.prototype.padding = 10;
< 
< function PaintEditorMorph() {
<     this.init();
< }
< 
< PaintEditorMorph.prototype.init = function () {
<     // additional properties:
<     this.paper = null; // paint canvas
<     this.oncancel = null;
< 
<     // initialize inherited properties:
<     PaintEditorMorph.uber.init.call(this);
< 
<     // override inherited properties:
<     this.labelString = "Paint Editor";
<     this.createLabel();
< 
<     // build contents:
<     this.buildContents();
< };
< 
< PaintEditorMorph.prototype.buildContents = function () {
<     var myself = this;
< 
<     this.paper = new PaintCanvasMorph(function () {return myself.shift; });
<     this.paper.setExtent(new Point(480, 360));
< 
<     this.addBody(new AlignmentMorph('row', this.padding));
<     this.controls = new AlignmentMorph('column', this.padding);
<     this.controls.alignment = 'left';
< 
<     this.edits = new AlignmentMorph('row', this.padding);
<     this.buildEdits();
<     this.controls.add(this.edits);
< 
<     this.body.color = this.color;
< 
<     this.body.add(this.controls);
<     this.body.add(this.paper);
< 
<     this.toolbox = new BoxMorph();
<     this.toolbox.color = SpriteMorph.prototype.paletteColor.lighter(8);
<     this.toolbox.borderColor = this.toolbox.color.lighter(40);
<     if (MorphicPreferences.isFlat) {
<         this.toolbox.edge = 0;
<     }
< 
<     this.buildToolbox();
<     this.controls.add(this.toolbox);
< 
<     this.propertiesControls = {
<         colorpicker: null,
<         penSizeSlider: null,
<         penSizeField: null,
<         primaryColorButton: null,
<         primaryColorViewer: null,
<         constrain: null
<     };
<     this.populatePropertiesMenu();
< 
<     this.addButton("ok", "OK");
<     this.addButton("cancel", "Cancel");
< 
<     this.refreshToolButtons();
<     this.fixLayout();
<     this.drawNew();
< };
< 
< PaintEditorMorph.prototype.buildToolbox = function () {
<     var tools = {
<             brush:
<                 "Paintbrush tool\n(free draw)",
<             rectangle:
<                 "Stroked Rectangle\n(shift: square)",
<             circle:
<                 "Stroked Ellipse\n(shift: circle)",
<             eraser:
<                 "Eraser tool",
<             crosshairs:
<                 "Set the rotation center",
< 
<             line:
<                 "Line tool\n(shift: vertical/horizontal)",
<             rectangleSolid:
<                 "Filled Rectangle\n(shift: square)",
<             circleSolid:
<                 "Filled Ellipse\n(shift: circle)",
<             paintbucket:
<                 "Fill a region",
<             pipette:
<                 "Pipette tool\n(pick a color anywhere)"
<         },
<         myself = this,
<         left = this.toolbox.left(),
<         top = this.toolbox.top(),
<         padding = 2,
<         inset = 5,
<         x = 0,
<         y = 0;
< 
<     Object.keys(tools).forEach(function (tool) {
<         var btn = myself.toolButton(tool, tools[tool]);
<         btn.setPosition(new Point(
<             left + x,
<             top + y
<         ));
<         x += btn.width() + padding;
<         if (tool === "crosshairs") {
<             x = 0;
<             y += btn.height() + padding;
<             myself.paper.drawcrosshair();
<         }
<         myself.toolbox[tool] = btn;
<         myself.toolbox.add(btn);
<     });
< 
<     this.toolbox.bounds = this.toolbox.fullBounds().expandBy(inset * 2);
<     this.toolbox.drawNew();
< };
< 
< PaintEditorMorph.prototype.buildEdits = function () {
<     var paper = this.paper;
< 
<     this.edits.add(this.pushButton(
<         "undo",
<         function () {paper.undo(); }
<     ));
< 
<     this.edits.add(this.pushButton(
<         "clear",
<         function () {paper.clearCanvas(); }
<     ));
<     this.edits.fixLayout();
< };
< 
< PaintEditorMorph.prototype.openIn = function (world, oldim, oldrc, callback) {
<     // Open the editor in a world with an optional image to edit
<     this.oldim = oldim;
<     this.oldrc = oldrc.copy();
<     this.callback = callback || nop;
< 
<     this.processKeyUp = function () {
<         this.shift = false;
<         this.propertiesControls.constrain.refresh();
<     };
< 
<     this.processKeyDown = function () {
<         this.shift = this.world().currentKey === 16;
<         this.propertiesControls.constrain.refresh();
<     };
< 
<     //merge oldim:
<     if (this.oldim) {
<         this.paper.centermerge(this.oldim, this.paper.paper);
<         this.paper.rotationCenter =
<             this.oldrc.add(
<                 new Point(
<                     (this.paper.paper.width - this.oldim.width) / 2,
<                     (this.paper.paper.height - this.oldim.height) / 2
<                 )
<             );
<         this.paper.drawNew();
<     }
< 
<     this.key = 'paint';
<     this.popUp(world);
< };
< 
< PaintEditorMorph.prototype.fixLayout = function () {
<     var oldFlag = Morph.prototype.trackChanges;
< 
<     this.changed();
<     oldFlag = Morph.prototype.trackChanges;
<     Morph.prototype.trackChanges = false;
< 
<     if (this.paper) {
<         this.paper.buildContents();
<         this.paper.drawNew();
<     }
<     if (this.controls) {this.controls.fixLayout(); }
<     if (this.body) {this.body.fixLayout(); }
<     PaintEditorMorph.uber.fixLayout.call(this);
< 
<     Morph.prototype.trackChanges = oldFlag;
<     this.changed();
< };
< 
< PaintEditorMorph.prototype.refreshToolButtons = function () {
<     this.toolbox.children.forEach(function (toggle) {
<         toggle.refresh();
<     });
< };
< 
< PaintEditorMorph.prototype.ok = function () {
<     this.callback(
<         this.paper.paper,
<         this.paper.rotationCenter
<     );
<     this.destroy();
< };
< 
< PaintEditorMorph.prototype.cancel = function () {
<     if (this.oncancel) {this.oncancel(); }
<     this.destroy();
< };
< 
< PaintEditorMorph.prototype.populatePropertiesMenu = function () {
<     var c = this.controls,
<         myself = this,
<         pc = this.propertiesControls,
<         alpen = new AlignmentMorph("row", this.padding);
< 
<     pc.primaryColorViewer = new Morph();
<     pc.primaryColorViewer.setExtent(new Point(180, 50));
<     pc.primaryColorViewer.color = new Color(0, 0, 0);
<     pc.colorpicker = new PaintColorPickerMorph(
<         new Point(180, 100),
<         function (color) {
<             var ni = newCanvas(pc.primaryColorViewer.extent()),
<                 ctx = ni.getContext("2d"),
<                 i,
<                 j;
<             myself.paper.settings.primarycolor = color;
<             if (color === "transparent") {
<                 for (i = 0; i < 180; i += 5) {
<                     for (j = 0; j < 15; j += 5) {
<                         ctx.fillStyle =
<                             ((j + i) / 5) % 2 === 0 ?
<                                             "rgba(0, 0, 0, 0.2)" :
<                                             "rgba(0, 0, 0, 0.5)";
<                         ctx.fillRect(i, j, 5, 5);
< 
<                     }
<                 }
<             } else {
<                 ctx.fillStyle = color.toString();
<                 ctx.fillRect(0, 0, 180, 15);
<             }
<             ctx.strokeStyle = "black";
<             ctx.lineWidth = Math.min(myself.paper.settings.linewidth, 20);
<             ctx.beginPath();
<             ctx.lineCap = "round";
<             ctx.moveTo(20, 30);
<             ctx.lineTo(160, 30);
<             ctx.stroke();
<             pc.primaryColorViewer.image = ni;
<             pc.primaryColorViewer.changed();
<         }
<     );
<     pc.colorpicker.action(new Color(0, 0, 0));
< 
<     pc.penSizeSlider = new SliderMorph(0, 20, 5, 5);
<     pc.penSizeSlider.orientation = "horizontal";
<     pc.penSizeSlider.setHeight(15);
<     pc.penSizeSlider.setWidth(150);
<     pc.penSizeSlider.action = function (num) {
<         if (pc.penSizeField) {
<             pc.penSizeField.setContents(num);
<         }
<         myself.paper.settings.linewidth = num;
<         pc.colorpicker.action(myself.paper.settings.primarycolor);
<     };
<     pc.penSizeField = new InputFieldMorph("5", true, null, false);
<     pc.penSizeField.contents().minWidth = 20;
<     pc.penSizeField.setWidth(25);
<     pc.penSizeField.accept = function () {
<         var val = parseFloat(pc.penSizeField.getValue());
<         pc.penSizeSlider.value = val;
<         pc.penSizeSlider.drawNew();
<         pc.penSizeSlider.updateValue();
<         this.setContents(val);
<         myself.paper.settings.linewidth = val;
<         this.world().keyboardReceiver = myself;
<         pc.colorpicker.action(myself.paper.settings.primarycolor);
<     };
<     alpen.add(pc.penSizeSlider);
<     alpen.add(pc.penSizeField);
<     alpen.color = myself.color;
<     alpen.fixLayout();
<     pc.penSizeField.drawNew();
<     pc.constrain = new ToggleMorph(
<         "checkbox",
<         this,
<         function () {myself.shift = !myself.shift; },
<         "Constrain proportions of shapes?\n(you can also hold shift)",
<         function () {return myself.shift; }
<     );
<     c.add(pc.colorpicker);
<     //c.add(pc.primaryColorButton);
<     c.add(pc.primaryColorViewer);
<     c.add(new TextMorph("Brush size"));
<     c.add(alpen);
<     c.add(pc.constrain);
< };
< 
< PaintEditorMorph.prototype.toolButton = function (icon, hint) {
<     var button, myself = this;
< 
<     button = new ToggleButtonMorph(
<         null,
<         this,
<         function () { // action
<             myself.paper.currentTool = icon;
<             myself.paper.toolChanged(icon);
<             myself.refreshToolButtons();
<             if (icon === 'pipette') {
<                 myself.getUserColor();
<             }
<         },
<         new SymbolMorph(icon, 18),
<         function () {return myself.paper.currentTool === icon; }
<     );
< 
<     button.hint = hint;
<     button.drawNew();
<     button.fixLayout();
<     return button;
< };
< 
< PaintEditorMorph.prototype.pushButton = function (title, action, hint) {
<     return new PushButtonMorph(
<         this,
<         action,
<         title,
<         null,
<         hint
<     );
< };
< 
< PaintEditorMorph.prototype.getUserColor = function () {
<     var myself = this,
<         world = this.world(),
<         hand = world.hand,
<         posInDocument = getDocumentPositionOf(world.worldCanvas),
<         mouseMoveBak = hand.processMouseMove,
<         mouseDownBak = hand.processMouseDown,
<         mouseUpBak = hand.processMouseUp;
< 
<     hand.processMouseMove = function (event) {
<         var color;
<         hand.setPosition(new Point(
<             event.pageX - posInDocument.x,
<             event.pageY - posInDocument.y
<         ));
<         color = world.getGlobalPixelColor(hand.position());
<         color.a = 255;
<         myself.propertiesControls.colorpicker.action(color);
<     };
< 
<     hand.processMouseDown = nop;
< 
<     hand.processMouseUp = function () {
<         myself.paper.currentTool = 'brush';
<         myself.paper.toolChanged('brush');
<         myself.refreshToolButtons();
<         hand.processMouseMove = mouseMoveBak;
<         hand.processMouseDown = mouseDownBak;
<         hand.processMouseUp = mouseUpBak;
<     };
< };
< 
< // AdvancedColorPickerMorph //////////////////
< 
< // A large hsl color picker
< 
< PaintColorPickerMorph.prototype = new Morph();
< PaintColorPickerMorph.prototype.constructor = PaintColorPickerMorph;
< PaintColorPickerMorph.uber = Morph.prototype;
< 
< function PaintColorPickerMorph(extent, action) {
<     this.init(extent, action);
< }
< 
< PaintColorPickerMorph.prototype.init = function (extent, action) {
<     this.setExtent(extent || new Point(200, 100));
<     this.action = action || nop;
<     this.drawNew();
< };
< 
< PaintColorPickerMorph.prototype.drawNew = function () {
<     var x = 0,
<         y = 0,
<         can = newCanvas(this.extent()),
<         ctx = can.getContext("2d"),
<         colorselection,
<         r;
<     for (x = 0; x < this.width(); x += 1) {
<         for (y = 0; y < this.height() - 20; y += 1) {
<             ctx.fillStyle = "hsl(" +
<                 (360 * x / this.width()) +
<                 "," +
<                 "100%," +
<                 (y * 100 / (this.height() - 20)) +
<                 "%)";
<             ctx.fillRect(x, y, 1, 1);
<         }
<     }
<     for (x = 0; x < this.width(); x += 1) {
<         r = Math.floor(255 * x / this.width());
<         ctx.fillStyle = "rgb(" + r + ", " + r + ", " + r + ")";
<         ctx.fillRect(x, this.height() - 20, 1, 10);
<     }
<     colorselection = ["black", "white", "gray"];
<     for (x = 0; x < colorselection.length; x += 1) {
<         ctx.fillStyle = colorselection[x];
<         ctx.fillRect(
<             x * this.width() / colorselection.length,
<             this.height() - 10,
<             this.width() / colorselection.length,
<             10
<         );
<     }
<     for (x = this.width() * 2 / 3; x < this.width(); x += 2) {
<         for (y = this.height() - 10; y < this.height(); y += 2) {
<             if ((x + y) / 2 % 2 === 0) {
<                 ctx.fillStyle = "#DDD";
<                 ctx.fillRect(x, y, 2, 2);
<             }
<         }
<     }
<     this.image = can;
< };
< 
< PaintColorPickerMorph.prototype.mouseDownLeft = function (pos) {
<     if ((pos.subtract(this.position()).x > this.width() * 2 / 3) &&
<             (pos.subtract(this.position()).y > this.height() - 10)) {
<         this.action("transparent");
<     } else {
<         this.action(this.getPixelColor(pos));
<     }
< };
< 
< PaintColorPickerMorph.prototype.mouseMove =
<     PaintColorPickerMorph.prototype.mouseDownLeft;
< 
< // PaintCanvasMorph ///////////////////////////
< /**
< * A canvas which reacts to drag events to
<     modify its image, based on a 'tool' property.
< *
< * @class PaintCanvasMorph
< * @constructor
< */
< /*
<     A canvas which reacts to drag events to
<     modify its image, based on a 'tool' property.
< */
< 
< PaintCanvasMorph.prototype = new Morph();
< PaintCanvasMorph.prototype.constructor = PaintCanvasMorph;
< PaintCanvasMorph.uber = Morph.prototype;
< 
< function PaintCanvasMorph(shift) {
<     this.init(shift);
< }
< 
< PaintCanvasMorph.prototype.init = function (shift) {
<     this.rotationCenter = new Point(240, 180);
<     this.dragRect = null;
<     this.previousDragPoint = null;
<     this.currentTool = "brush";
<     this.dragRect = new Rectangle();
<     // rectangle with origin being the starting drag position and
<     // corner being the current drag position
<     this.mask = newCanvas(this.extent()); // Temporary canvas
<     this.paper = newCanvas(this.extent()); // Actual canvas
<     this.erasermask = newCanvas(this.extent()); // eraser memory
<     this.background = newCanvas(this.extent()); // checkers
<     this.settings = {
<         "primarycolor": new Color(0, 0, 0, 255), // usually fill color
<         "secondarycolor": new Color(0, 0, 0, 255), // (unused)
<         "linewidth": 3 // stroke width
<     };
<     this.brushBuffer = [];
<     this.undoBuffer = [];
<     this.isShiftPressed = shift || function () {
<         var key = this.world().currentKey;
<         return (key === 16);
<     };
<     this.buildContents();
< };
< 
< PaintCanvasMorph.prototype.cacheUndo = function () {
<     var cachecan = newCanvas(this.extent());
<     this.merge(this.paper, cachecan);
<     this.undoBuffer.push(cachecan);
< };
< 
< PaintCanvasMorph.prototype.undo = function () {
<     if (this.undoBuffer.length > 0) {
<         this.paper = newCanvas(this.extent());
<         this.mask.width = this.mask.width + 1 - 1;
<         this.merge(this.undoBuffer.pop(), this.paper);
<         this.drawNew();
<         this.changed();
<     }
< };
< 
< PaintCanvasMorph.prototype.merge = function (a, b) {
<     b.getContext("2d").drawImage(a, 0, 0);
< };
< 
< PaintCanvasMorph.prototype.centermerge = function (a, b) {
<     b.getContext("2d").drawImage(
<         a,
<         (b.width - a.width) / 2,
<         (b.height - a.height) / 2
<     );
< };
< 
< PaintCanvasMorph.prototype.clearCanvas = function () {
<     this.buildContents();
<     this.drawNew();
<     this.changed();
< };
< 
< PaintCanvasMorph.prototype.toolChanged = function (tool) {
<     this.mask = newCanvas(this.extent());
<     if (tool === "crosshairs") {
<         this.drawcrosshair();
<     }
<     this.drawNew();
<     this.changed();
< };
< 
< PaintCanvasMorph.prototype.drawcrosshair = function (context) {
<     var ctx = context || this.mask.getContext("2d"),
<         rp = this.rotationCenter;
< 
<     ctx.lineWidth = 1;
<     ctx.strokeStyle = 'black';
<     ctx.clearRect(0, 0, this.mask.width, this.mask.height);
< 
<     // draw crosshairs:
<     ctx.globalAlpha = 0.5;
< 
<     // circle around center:
<     ctx.fillStyle = 'white';
<     ctx.beginPath();
<     ctx.arc(
<         rp.x,
<         rp.y,
<         20,
<         radians(0),
<         radians(360),
<         false
<     );
<     ctx.closePath();
<     ctx.fill();
<     ctx.stroke();
< 
<     ctx.beginPath();
<     ctx.arc(
<         rp.x,
<         rp.y,
<         10,
<         radians(0),
<         radians(360),
<         false
<     );
<     ctx.stroke();
< 
<     // horizontal line:
<     ctx.beginPath();
<     ctx.moveTo(0, rp.y);
<     ctx.lineTo(this.mask.width, rp.y);
<     ctx.stroke();
< 
<     // vertical line:
<     ctx.beginPath();
<     ctx.moveTo(rp.x, 0);
<     ctx.lineTo(rp.x, this.mask.height);
<     ctx.stroke();
< 
<     this.drawNew();
<     this.changed();
< };
< 
< PaintCanvasMorph.prototype.floodfill = function (sourcepoint) {
<     var width = this.paper.width,
<         height = this.paper.height,
<         ctx = this.paper.getContext("2d"),
<         img = ctx.getImageData(0, 0, width, height),
<         data = img.data,
<         stack = [Math.round(sourcepoint.y) * width + sourcepoint.x],
<         currentpoint,
<         read,
<         sourcecolor,
<         checkpoint;
<     read = function (p) {
<         var d = p * 4;
<         return [data[d], data[d + 1], data[d + 2], data[d + 3]];
<     };
<     sourcecolor = read(stack[0]);
<     checkpoint = function (p) {
<         return p[0] === sourcecolor[0] &&
<             p[1] === sourcecolor[1] &&
<             p[2] === sourcecolor[2] &&
<             p[3] === sourcecolor[3];
<     };
< 
<     // if already filled, abort
<     if (sourcecolor[3] === 0 &&
<             this.settings.primarycolor === "transparent") {
<         return;
<     }
<     if (sourcecolor[0] === this.settings.primarycolor.r &&
<             sourcecolor[1] === this.settings.primarycolor.g &&
<             sourcecolor[2] === this.settings.primarycolor.b &&
<             sourcecolor[3] === this.settings.primarycolor.a) {
<         return;
<     }
<     if (sourcecolor[3] === 0 && this.settings.primarycolor.a === 0) {
<         return;
<     }
< 
<     while (stack.length > 0) {
<         currentpoint = stack.pop();
<         if (checkpoint(read(currentpoint))) {
<             if (currentpoint % 480 > 1) {
<                 stack.push(currentpoint + 1);
<                 stack.push(currentpoint - 1);
<             }
<             if (currentpoint > 0 && currentpoint < 360 * 480) {
<                 stack.push(currentpoint + width);
<                 stack.push(currentpoint - width);
<             }
<         }
<         if (this.settings.primarycolor === "transparent") {
<             data[currentpoint * 4 + 3] = 0;
<         } else {
<             data[currentpoint * 4] = this.settings.primarycolor.r;
<             data[currentpoint * 4 + 1] = this.settings.primarycolor.g;
<             data[currentpoint * 4 + 2] = this.settings.primarycolor.b;
<             data[currentpoint * 4 + 3] = this.settings.primarycolor.a;
<         }
<     }
<     ctx.putImageData(img, 0, 0);
<     this.drawNew();
<     this.changed();
< };
< 
< PaintCanvasMorph.prototype.mouseDownLeft = function (pos) {
<     this.cacheUndo();
<     this.dragRect.origin = pos.subtract(this.bounds.origin);
<     this.dragRect.corner = pos.subtract(this.bounds.origin);
<     this.previousDragPoint = this.dragRect.corner.copy();
<     if (this.currentTool === 'crosshairs') {
<         this.rotationCenter = pos.subtract(this.bounds.origin);
<         this.drawcrosshair();
<         return;
<     }
<     if (this.currentTool === "paintbucket") {
<         return this.floodfill(pos.subtract(this.bounds.origin));
<     }
<     if (this.settings.primarycolor === "transparent" &&
<             this.currentTool !== "crosshairs") {
<         this.erasermask = newCanvas(this.extent());
<         this.merge(this.paper, this.erasermask);
<     }
< };
< 
< PaintCanvasMorph.prototype.mouseMove = function (pos) {
<     if (this.currentTool === "paintbucket") {
<         return;
<     }
< 
<     var relpos = pos.subtract(this.bounds.origin),
<         mctx = this.mask.getContext("2d"),
<         pctx = this.paper.getContext("2d"),
<         x = this.dragRect.origin.x, // original drag X
<         y = this.dragRect.origin.y, // original drag y
<         p = relpos.x,               // current drag x
<         q = relpos.y,               // current drag y
<         w = (p - x) / 2,            // half the rect width
<         h = (q - y) / 2,            // half the rect height
<         i;                          // iterator number
<     mctx.save();
<     function newW() {
<         return Math.max(Math.abs(w), Math.abs(h)) * (w / Math.abs(w));
<     }
<     function newH() {
<         return Math.max(Math.abs(w), Math.abs(h)) * (h / Math.abs(h));
<     }
<     this.brushBuffer.push([p, q]);
<     mctx.lineWidth = this.settings.linewidth;
<     mctx.clearRect(0, 0, this.bounds.width(), this.bounds.height()); // mask
< 
<     this.dragRect.corner = relpos.subtract(this.dragRect.origin); // reset crn
< 
<     if (this.settings.primarycolor === "transparent" &&
<             this.currentTool !== "crosshairs") {
<         this.merge(this.erasermask, this.mask);
<         pctx.clearRect(0, 0, this.bounds.width(), this.bounds.height());
<         mctx.globalCompositeOperation = "destination-out";
<     } else {
<         mctx.fillStyle = this.settings.primarycolor.toString();
<         mctx.strokeStyle = this.settings.primarycolor.toString();
<     }
<     switch (this.currentTool) {
<     case "rectangle":
<         if (this.isShiftPressed()) {
<             mctx.strokeRect(x, y, newW() * 2, newH() * 2);
<         } else {
<             mctx.strokeRect(x, y, w * 2, h * 2);
<         }
<         break;
<     case "rectangleSolid":
<         if (this.isShiftPressed()) {
<             mctx.fillRect(x, y, newW() * 2, newH() * 2);
<         } else {
<             mctx.fillRect(x, y, w * 2, h * 2);
<         }
<         break;
<     case "brush":
<         mctx.lineCap = "round";
<         mctx.lineJoin = "round";
<         mctx.beginPath();
<         mctx.moveTo(this.brushBuffer[0][0], this.brushBuffer[0][1]);
<         for (i = 0; i < this.brushBuffer.length; i += 1) {
<             mctx.lineTo(this.brushBuffer[i][0], this.brushBuffer[i][1]);
<         }
<         mctx.stroke();
<         break;
<     case "line":
<         mctx.beginPath();
<         mctx.moveTo(x, y);
<         if (this.isShiftPressed()) {
<             if (Math.abs(h) > Math.abs(w)) {
<                 mctx.lineTo(x, q);
<             } else {
<                 mctx.lineTo(p, y);
<             }
<         } else {
<             mctx.lineTo(p, q);
<         }
<         mctx.stroke();
<         break;
<     case "circle":
<     case "circleSolid":
<         mctx.beginPath();
<         if (this.isShiftPressed()) {
<             mctx.arc(
<                 x,
<                 y,
<                 new Point(x, y).distanceTo(new Point(p, q)),
<                 0,
<                 Math.PI * 2,
<                 false
<             );
<         } else {
<             for (i = 0; i < 480; i += 1) {
<                 mctx.lineTo(
<                     i,
<                     (2 * h) * Math.sqrt(2 - Math.pow(
<                         (i - x) / (2 * w),
<                         2
<                     )) + y
<                 );
<             }
<             for (i = 480; i > 0; i -= 1) {
<                 mctx.lineTo(
<                     i,
<                     -1 * (2 * h) * Math.sqrt(2 - Math.pow(
<                         (i - x) / (2 * w),
<                         2
<                     )) + y
<                 );
<             }
<         }
<         mctx.closePath();
<         if (this.currentTool === "circleSolid") {
<             mctx.fill();
<         } else {
<             if (this.currentTool === "circle") {
<                 mctx.stroke();
<             }
<         }
<         break;
<     case "crosshairs":
<         this.rotationCenter = relpos.copy();
<         this.drawcrosshair(mctx);
<         break;
<     case "eraser":
<         this.merge(this.paper, this.mask);
<         mctx.save();
<         mctx.globalCompositeOperation = "destination-out";
<         mctx.beginPath();
<         mctx.moveTo(this.brushBuffer[0][0], this.brushBuffer[0][1]);
<         for (i = 0; i < this.brushBuffer.length; i += 1) {
<             mctx.lineTo(this.brushBuffer[i][0], this.brushBuffer[i][1]);
<         }
<         mctx.stroke();
<         mctx.restore();
<         this.paper = newCanvas(this.extent());
<         this.merge(this.mask, this.paper);
<         break;
<     default:
<         nop();
<     }
<     this.previousDragPoint = relpos;
<     this.drawNew();
<     this.changed();
<     mctx.restore();
< };
< 
< PaintCanvasMorph.prototype.mouseClickLeft = function () {
<     if (this.currentTool !== "crosshairs") {
<         this.merge(this.mask, this.paper);
<     }
<     this.brushBuffer = [];
< };
< 
< PaintCanvasMorph.prototype.buildContents = function () {
<     this.background = newCanvas(this.extent());
<     this.paper = newCanvas(this.extent());
<     this.mask = newCanvas(this.extent());
<     this.erasermask = newCanvas(this.extent());
<     var i, j, bkctx = this.background.getContext("2d");
<     for (i = 0; i < this.background.width; i += 5) {
<         for (j = 0; j < this.background.height; j += 5) {
<             if ((i + j) / 5 % 2 === 1) {
<                 bkctx.fillStyle = "rgba(255, 255, 255, 1)";
<             } else {
<                 bkctx.fillStyle = "rgba(255, 255, 255, 0.3)";
<             }
<             bkctx.fillRect(i, j, 5, 5);
<         }
<     }
< };
< 
< PaintCanvasMorph.prototype.drawNew = function () {
<     var can = newCanvas(this.extent());
<     this.merge(this.background, can);
<     this.merge(this.paper, can);
<     this.merge(this.mask, can);
<     this.image = can;
<     this.drawFrame();
< };
< 
< PaintCanvasMorph.prototype.drawFrame = function () {
<     var context, borderColor;
< 
<     context = this.image.getContext('2d');
<     if (this.parent) {
<         this.color = this.parent.color.lighter(this.contrast * 0.75);
<         borderColor = this.parent.color;
<     } else {
<         borderColor = new Color(120, 120, 120);
<     }
<     context.fillStyle = this.color.toString();
< 
<     // cache my border colors
<     this.cachedClr = borderColor.toString();
<     this.cachedClrBright = borderColor.lighter(this.contrast)
<         .toString();
<     this.cachedClrDark = borderColor.darker(this.contrast).toString();
<     this.drawRectBorder(context);
< };
< 
< PaintCanvasMorph.prototype.drawRectBorder
<     = InputFieldMorph.prototype.drawRectBorder;
< 
< PaintCanvasMorph.prototype.edge
<     = InputFieldMorph.prototype.edge;
< 
< PaintCanvasMorph.prototype.fontSize
<     = InputFieldMorph.prototype.fontSize;
< 
< PaintCanvasMorph.prototype.typeInPadding
<     = InputFieldMorph.prototype.typeInPadding;
< 
< PaintCanvasMorph.prototype.contrast
<     = InputFieldMorph.prototype.contrast;
---
> /*
>     paint.js
> 
>     a paint editor for Snap!
>     inspired by the Scratch paint editor.
>  
>     written by Kartik Chandra
>     Copyright (C) 2014 by Kartik Chandra
>   
>     This file is part of Snap!.
>  
>     Snap! is free software: you can redistribute it and/or modify
>     it under the terms of the GNU Affero General Public License as
>     published by the Free Software Foundation, either version 3 of
>     the License, or (at your option) any later version.
> 
>     This program is distributed in the hope that it will be useful,
>     but WITHOUT ANY WARRANTY; without even the implied warranty of
>     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
>     GNU Affero General Public License for more details.
> 
>     You should have received a copy of the GNU Affero General Public License
>     along with this program.  If not, see <http://www.gnu.org/licenses/>.
> 
> 
>     toc
>     ---
>     the following list shows the order in which all constructors are
>     defined. Use this list to locate code in this document:
> 
>         PaintEditorMorph
>         PaintColorPickerMorph
>         PaintCanvasMorph
> 
> 
>     credits
>     -------
>     Nathan Dinsmore contributed a fully working prototype,
>     Nathan's brilliant flood-fill tool has been more or less
>     directly imported into this paint implementation.
> 
>     Jens Mönig has contributed icons and bugfixes and says he has probably
>     introduced many other bugs in that process. :-)
> 
> 
>     revision history
>     ----------------
>     May 10 - first full release (Kartik)
>     May 14 - bugfixes, Snap integration (Jens)
>     May 16 - flat design adjustments (Jens)
>     July 12 - pipette tool, code formatting adjustments (Jens)
>     September 16 - flood fill freeze fix (Kartik)
>     Jan 08 - mouse leave dragging fix (Kartik)
>     Feb 11 - dynamically adjust to stage dimensions (Jens)
> 
>  */
> 
> /*global Point, Rectangle, DialogBoxMorph, fontHeight, AlignmentMorph,
>  FrameMorph, PushButtonMorph, Color, SymbolMorph, newCanvas, Morph, TextMorph,
>  CostumeIconMorph, IDE_Morph, Costume, SpriteMorph, nop, Image, WardrobeMorph,
>  TurtleIconMorph, localize, MenuMorph, InputFieldMorph, SliderMorph,
>  ToggleMorph, ToggleButtonMorph, BoxMorph, modules, radians,
>  MorphicPreferences, getDocumentPositionOf, StageMorph
>  */
> 
> // Global stuff ////////////////////////////////////////////////////////
> 
> modules.paint = '2014-February-11';
> 
> // Declarations
> 
> var PaintEditorMorph;
> var PaintCanvasMorph;
> var PaintColorPickerMorph;
> 
> // PaintEditorMorph //////////////////////////
> 
> // A complete paint editor
> 
> PaintEditorMorph.prototype = new DialogBoxMorph();
> PaintEditorMorph.prototype.constructor = PaintEditorMorph;
> PaintEditorMorph.uber = DialogBoxMorph.prototype;
> 
> PaintEditorMorph.prototype.padding = 10;
> 
> function PaintEditorMorph() {
>     this.init();
> }
> 
> PaintEditorMorph.prototype.init = function () {
>     // additional properties:
>     this.paper = null; // paint canvas
>     this.oncancel = null;
> 
>     // initialize inherited properties:
>     PaintEditorMorph.uber.init.call(this);
> 
>     // override inherited properties:
>     this.labelString = "Paint Editor";
>     this.createLabel();
> 
>     // build contents:
>     this.buildContents();
> };
> 
> PaintEditorMorph.prototype.buildContents = function () {
>     var myself = this;
> 
>     this.paper = new PaintCanvasMorph(function () {return myself.shift; });
>     this.paper.setExtent(StageMorph.prototype.dimensions);
> 
>     this.addBody(new AlignmentMorph('row', this.padding));
>     this.controls = new AlignmentMorph('column', this.padding);
>     this.controls.alignment = 'left';
> 
>     this.edits = new AlignmentMorph('row', this.padding);
>     this.buildEdits();
>     this.controls.add(this.edits);
> 
>     this.body.color = this.color;
> 
>     this.body.add(this.controls);
>     this.body.add(this.paper);
> 
>     this.toolbox = new BoxMorph();
>     this.toolbox.color = SpriteMorph.prototype.paletteColor.lighter(8);
>     this.toolbox.borderColor = this.toolbox.color.lighter(40);
>     if (MorphicPreferences.isFlat) {
>         this.toolbox.edge = 0;
>     }
> 
>     this.buildToolbox();
>     this.controls.add(this.toolbox);
> 
>     this.propertiesControls = {
>         colorpicker: null,
>         penSizeSlider: null,
>         penSizeField: null,
>         primaryColorButton: null,
>         primaryColorViewer: null,
>         constrain: null
>     };
>     this.populatePropertiesMenu();
> 
>     this.addButton("ok", "OK");
>     this.addButton("cancel", "Cancel");
> 
>     this.refreshToolButtons();
>     this.fixLayout();
>     this.drawNew();
> };
> 
> PaintEditorMorph.prototype.buildToolbox = function () {
>     var tools = {
>             brush:
>                 "Paintbrush tool\n(free draw)",
>             rectangle:
>                 "Stroked Rectangle\n(shift: square)",
>             circle:
>                 "Stroked Ellipse\n(shift: circle)",
>             eraser:
>                 "Eraser tool",
>             crosshairs:
>                 "Set the rotation center",
> 
>             line:
>                 "Line tool\n(shift: vertical/horizontal)",
>             rectangleSolid:
>                 "Filled Rectangle\n(shift: square)",
>             circleSolid:
>                 "Filled Ellipse\n(shift: circle)",
>             paintbucket:
>                 "Fill a region",
>             pipette:
>                 "Pipette tool\n(pick a color anywhere)"
>         },
>         myself = this,
>         left = this.toolbox.left(),
>         top = this.toolbox.top(),
>         padding = 2,
>         inset = 5,
>         x = 0,
>         y = 0;
> 
>     Object.keys(tools).forEach(function (tool) {
>         var btn = myself.toolButton(tool, tools[tool]);
>         btn.setPosition(new Point(
>             left + x,
>             top + y
>         ));
>         x += btn.width() + padding;
>         if (tool === "crosshairs") {
>             x = 0;
>             y += btn.height() + padding;
>             myself.paper.drawcrosshair();
>         }
>         myself.toolbox[tool] = btn;
>         myself.toolbox.add(btn);
>     });
> 
>     this.toolbox.bounds = this.toolbox.fullBounds().expandBy(inset * 2);
>     this.toolbox.drawNew();
> };
> 
> PaintEditorMorph.prototype.buildEdits = function () {
>     var paper = this.paper;
> 
>     this.edits.add(this.pushButton(
>         "undo",
>         function () {paper.undo(); }
>     ));
> 
>     this.edits.add(this.pushButton(
>         "clear",
>         function () {paper.clearCanvas(); }
>     ));
>     this.edits.fixLayout();
> };
> 
> PaintEditorMorph.prototype.openIn = function (world, oldim, oldrc, callback) {
>     // Open the editor in a world with an optional image to edit
>     this.oldim = oldim;
>     this.oldrc = oldrc.copy();
>     this.callback = callback || nop;
> 
>     this.processKeyUp = function () {
>         this.shift = false;
>         this.propertiesControls.constrain.refresh();
>     };
> 
>     this.processKeyDown = function () {
>         this.shift = this.world().currentKey === 16;
>         this.propertiesControls.constrain.refresh();
>     };
> 
>     //merge oldim:
>     if (this.oldim) {
>         this.paper.centermerge(this.oldim, this.paper.paper);
>         this.paper.rotationCenter =
>             this.oldrc.add(
>                 new Point(
>                     (this.paper.paper.width - this.oldim.width) / 2,
>                     (this.paper.paper.height - this.oldim.height) / 2
>                 )
>             );
>         this.paper.drawNew();
>     }
> 
>     this.key = 'paint';
>     this.popUp(world);
> };
> 
> PaintEditorMorph.prototype.fixLayout = function () {
>     var oldFlag = Morph.prototype.trackChanges;
> 
>     this.changed();
>     oldFlag = Morph.prototype.trackChanges;
>     Morph.prototype.trackChanges = false;
> 
>     if (this.paper) {
>         this.paper.buildContents();
>         this.paper.drawNew();
>     }
>     if (this.controls) {this.controls.fixLayout(); }
>     if (this.body) {this.body.fixLayout(); }
>     PaintEditorMorph.uber.fixLayout.call(this);
> 
>     Morph.prototype.trackChanges = oldFlag;
>     this.changed();
> };
> 
> PaintEditorMorph.prototype.refreshToolButtons = function () {
>     this.toolbox.children.forEach(function (toggle) {
>         toggle.refresh();
>     });
> };
> 
> PaintEditorMorph.prototype.ok = function () {
>     this.callback(
>         this.paper.paper,
>         this.paper.rotationCenter
>     );
>     this.destroy();
> };
> 
> PaintEditorMorph.prototype.cancel = function () {
>     if (this.oncancel) {this.oncancel(); }
>     this.destroy();
> };
> 
> PaintEditorMorph.prototype.populatePropertiesMenu = function () {
>     var c = this.controls,
>         myself = this,
>         pc = this.propertiesControls,
>         alpen = new AlignmentMorph("row", this.padding);
> 
>     pc.primaryColorViewer = new Morph();
>     pc.primaryColorViewer.setExtent(new Point(180, 50));
>     pc.primaryColorViewer.color = new Color(0, 0, 0);
>     pc.colorpicker = new PaintColorPickerMorph(
>         new Point(180, 100),
>         function (color) {
>             var ni = newCanvas(pc.primaryColorViewer.extent()),
>                 ctx = ni.getContext("2d"),
>                 i,
>                 j;
>             myself.paper.settings.primarycolor = color;
>             if (color === "transparent") {
>                 for (i = 0; i < 180; i += 5) {
>                     for (j = 0; j < 15; j += 5) {
>                         ctx.fillStyle =
>                             ((j + i) / 5) % 2 === 0 ?
>                                             "rgba(0, 0, 0, 0.2)" :
>                                             "rgba(0, 0, 0, 0.5)";
>                         ctx.fillRect(i, j, 5, 5);
> 
>                     }
>                 }
>             } else {
>                 ctx.fillStyle = color.toString();
>                 ctx.fillRect(0, 0, 180, 15);
>             }
>             ctx.strokeStyle = "black";
>             ctx.lineWidth = Math.min(myself.paper.settings.linewidth, 20);
>             ctx.beginPath();
>             ctx.lineCap = "round";
>             ctx.moveTo(20, 30);
>             ctx.lineTo(160, 30);
>             ctx.stroke();
>             pc.primaryColorViewer.image = ni;
>             pc.primaryColorViewer.changed();
>         }
>     );
>     pc.colorpicker.action(new Color(0, 0, 0));
> 
>     pc.penSizeSlider = new SliderMorph(0, 20, 5, 5);
>     pc.penSizeSlider.orientation = "horizontal";
>     pc.penSizeSlider.setHeight(15);
>     pc.penSizeSlider.setWidth(150);
>     pc.penSizeSlider.action = function (num) {
>         if (pc.penSizeField) {
>             pc.penSizeField.setContents(num);
>         }
>         myself.paper.settings.linewidth = num;
>         pc.colorpicker.action(myself.paper.settings.primarycolor);
>     };
>     pc.penSizeField = new InputFieldMorph("5", true, null, false);
>     pc.penSizeField.contents().minWidth = 20;
>     pc.penSizeField.setWidth(25);
>     pc.penSizeField.accept = function () {
>         var val = parseFloat(pc.penSizeField.getValue());
>         pc.penSizeSlider.value = val;
>         pc.penSizeSlider.drawNew();
>         pc.penSizeSlider.updateValue();
>         this.setContents(val);
>         myself.paper.settings.linewidth = val;
>         this.world().keyboardReceiver = myself;
>         pc.colorpicker.action(myself.paper.settings.primarycolor);
>     };
>     alpen.add(pc.penSizeSlider);
>     alpen.add(pc.penSizeField);
>     alpen.color = myself.color;
>     alpen.fixLayout();
>     pc.penSizeField.drawNew();
>     pc.constrain = new ToggleMorph(
>         "checkbox",
>         this,
>         function () {myself.shift = !myself.shift; },
>         "Constrain proportions of shapes?\n(you can also hold shift)",
>         function () {return myself.shift; }
>     );
>     c.add(pc.colorpicker);
>     //c.add(pc.primaryColorButton);
>     c.add(pc.primaryColorViewer);
>     c.add(new TextMorph("Brush size"));
>     c.add(alpen);
>     c.add(pc.constrain);
> };
> 
> PaintEditorMorph.prototype.toolButton = function (icon, hint) {
>     var button, myself = this;
> 
>     button = new ToggleButtonMorph(
>         null,
>         this,
>         function () { // action
>             myself.paper.currentTool = icon;
>             myself.paper.toolChanged(icon);
>             myself.refreshToolButtons();
>             if (icon === 'pipette') {
>                 myself.getUserColor();
>             }
>         },
>         new SymbolMorph(icon, 18),
>         function () {return myself.paper.currentTool === icon; }
>     );
> 
>     button.hint = hint;
>     button.drawNew();
>     button.fixLayout();
>     return button;
> };
> 
> PaintEditorMorph.prototype.pushButton = function (title, action, hint) {
>     return new PushButtonMorph(
>         this,
>         action,
>         title,
>         null,
>         hint
>     );
> };
> 
> PaintEditorMorph.prototype.getUserColor = function () {
>     var myself = this,
>         world = this.world(),
>         hand = world.hand,
>         posInDocument = getDocumentPositionOf(world.worldCanvas),
>         mouseMoveBak = hand.processMouseMove,
>         mouseDownBak = hand.processMouseDown,
>         mouseUpBak = hand.processMouseUp;
> 
>     hand.processMouseMove = function (event) {
>         var color;
>         hand.setPosition(new Point(
>             event.pageX - posInDocument.x,
>             event.pageY - posInDocument.y
>         ));
>         color = world.getGlobalPixelColor(hand.position());
>         color.a = 255;
>         myself.propertiesControls.colorpicker.action(color);
>     };
> 
>     hand.processMouseDown = nop;
> 
>     hand.processMouseUp = function () {
>         myself.paper.currentTool = 'brush';
>         myself.paper.toolChanged('brush');
>         myself.refreshToolButtons();
>         hand.processMouseMove = mouseMoveBak;
>         hand.processMouseDown = mouseDownBak;
>         hand.processMouseUp = mouseUpBak;
>     };
> };
> 
> // AdvancedColorPickerMorph //////////////////
> 
> // A large hsl color picker
> 
> PaintColorPickerMorph.prototype = new Morph();
> PaintColorPickerMorph.prototype.constructor = PaintColorPickerMorph;
> PaintColorPickerMorph.uber = Morph.prototype;
> 
> function PaintColorPickerMorph(extent, action) {
>     this.init(extent, action);
> }
> 
> PaintColorPickerMorph.prototype.init = function (extent, action) {
>     this.setExtent(extent || new Point(200, 100));
>     this.action = action || nop;
>     this.drawNew();
> };
> 
> PaintColorPickerMorph.prototype.drawNew = function () {
>     var x = 0,
>         y = 0,
>         can = newCanvas(this.extent()),
>         ctx = can.getContext("2d"),
>         colorselection,
>         r;
>     for (x = 0; x < this.width(); x += 1) {
>         for (y = 0; y < this.height() - 20; y += 1) {
>             ctx.fillStyle = "hsl(" +
>                 (360 * x / this.width()) +
>                 "," +
>                 "100%," +
>                 (y * 100 / (this.height() - 20)) +
>                 "%)";
>             ctx.fillRect(x, y, 1, 1);
>         }
>     }
>     for (x = 0; x < this.width(); x += 1) {
>         r = Math.floor(255 * x / this.width());
>         ctx.fillStyle = "rgb(" + r + ", " + r + ", " + r + ")";
>         ctx.fillRect(x, this.height() - 20, 1, 10);
>     }
>     colorselection = ["black", "white", "gray"];
>     for (x = 0; x < colorselection.length; x += 1) {
>         ctx.fillStyle = colorselection[x];
>         ctx.fillRect(
>             x * this.width() / colorselection.length,
>             this.height() - 10,
>             this.width() / colorselection.length,
>             10
>         );
>     }
>     for (x = this.width() * 2 / 3; x < this.width(); x += 2) {
>         for (y = this.height() - 10; y < this.height(); y += 2) {
>             if ((x + y) / 2 % 2 === 0) {
>                 ctx.fillStyle = "#DDD";
>                 ctx.fillRect(x, y, 2, 2);
>             }
>         }
>     }
>     this.image = can;
> };
> 
> PaintColorPickerMorph.prototype.mouseDownLeft = function (pos) {
>     if ((pos.subtract(this.position()).x > this.width() * 2 / 3) &&
>             (pos.subtract(this.position()).y > this.height() - 10)) {
>         this.action("transparent");
>     } else {
>         this.action(this.getPixelColor(pos));
>     }
> };
> 
> PaintColorPickerMorph.prototype.mouseMove =
>     PaintColorPickerMorph.prototype.mouseDownLeft;
> 
> // PaintCanvasMorph ///////////////////////////
> /*
>     A canvas which reacts to drag events to
>     modify its image, based on a 'tool' property.
> */
> 
> PaintCanvasMorph.prototype = new Morph();
> PaintCanvasMorph.prototype.constructor = PaintCanvasMorph;
> PaintCanvasMorph.uber = Morph.prototype;
> 
> function PaintCanvasMorph(shift) {
>     this.init(shift);
> }
> 
> PaintCanvasMorph.prototype.init = function (shift) {
>     this.rotationCenter = new Point(240, 180);
>     this.dragRect = null;
>     this.previousDragPoint = null;
>     this.currentTool = "brush";
>     this.dragRect = new Rectangle();
>     // rectangle with origin being the starting drag position and
>     // corner being the current drag position
>     this.mask = newCanvas(this.extent()); // Temporary canvas
>     this.paper = newCanvas(this.extent()); // Actual canvas
>     this.erasermask = newCanvas(this.extent()); // eraser memory
>     this.background = newCanvas(this.extent()); // checkers
>     this.settings = {
>         "primarycolor": new Color(0, 0, 0, 255), // usually fill color
>         "secondarycolor": new Color(0, 0, 0, 255), // (unused)
>         "linewidth": 3 // stroke width
>     };
>     this.brushBuffer = [];
>     this.undoBuffer = [];
>     this.isShiftPressed = shift || function () {
>         var key = this.world().currentKey;
>         return (key === 16);
>     };
>     this.buildContents();
> };
> 
> PaintCanvasMorph.prototype.cacheUndo = function () {
>     var cachecan = newCanvas(this.extent());
>     this.merge(this.paper, cachecan);
>     this.undoBuffer.push(cachecan);
> };
> 
> PaintCanvasMorph.prototype.undo = function () {
>     if (this.undoBuffer.length > 0) {
>         this.paper = newCanvas(this.extent());
>         this.mask.width = this.mask.width + 1 - 1;
>         this.merge(this.undoBuffer.pop(), this.paper);
>         this.drawNew();
>         this.changed();
>     }
> };
> 
> PaintCanvasMorph.prototype.merge = function (a, b) {
>     b.getContext("2d").drawImage(a, 0, 0);
> };
> 
> PaintCanvasMorph.prototype.centermerge = function (a, b) {
>     b.getContext("2d").drawImage(
>         a,
>         (b.width - a.width) / 2,
>         (b.height - a.height) / 2
>     );
> };
> 
> PaintCanvasMorph.prototype.clearCanvas = function () {
>     this.buildContents();
>     this.drawNew();
>     this.changed();
> };
> 
> PaintCanvasMorph.prototype.toolChanged = function (tool) {
>     this.mask = newCanvas(this.extent());
>     if (tool === "crosshairs") {
>         this.drawcrosshair();
>     }
>     this.drawNew();
>     this.changed();
> };
> 
> PaintCanvasMorph.prototype.drawcrosshair = function (context) {
>     var ctx = context || this.mask.getContext("2d"),
>         rp = this.rotationCenter;
> 
>     ctx.lineWidth = 1;
>     ctx.strokeStyle = 'black';
>     ctx.clearRect(0, 0, this.mask.width, this.mask.height);
> 
>     // draw crosshairs:
>     ctx.globalAlpha = 0.5;
> 
>     // circle around center:
>     ctx.fillStyle = 'white';
>     ctx.beginPath();
>     ctx.arc(
>         rp.x,
>         rp.y,
>         20,
>         radians(0),
>         radians(360),
>         false
>     );
>     ctx.closePath();
>     ctx.fill();
>     ctx.stroke();
> 
>     ctx.beginPath();
>     ctx.arc(
>         rp.x,
>         rp.y,
>         10,
>         radians(0),
>         radians(360),
>         false
>     );
>     ctx.stroke();
> 
>     // horizontal line:
>     ctx.beginPath();
>     ctx.moveTo(0, rp.y);
>     ctx.lineTo(this.mask.width, rp.y);
>     ctx.stroke();
> 
>     // vertical line:
>     ctx.beginPath();
>     ctx.moveTo(rp.x, 0);
>     ctx.lineTo(rp.x, this.mask.height);
>     ctx.stroke();
> 
>     this.drawNew();
>     this.changed();
> };
> 
> PaintCanvasMorph.prototype.floodfill = function (sourcepoint) {
>     var width = this.paper.width,
>         height = this.paper.height,
>         ctx = this.paper.getContext("2d"),
>         img = ctx.getImageData(0, 0, width, height),
>         data = img.data,
>         stack = [Math.round(sourcepoint.y) * width + sourcepoint.x],
>         currentpoint,
>         read,
>         sourcecolor,
>         checkpoint;
>     read = function (p) {
>         var d = p * 4;
>         return [data[d], data[d + 1], data[d + 2], data[d + 3]];
>     };
>     sourcecolor = read(stack[0]);
>     checkpoint = function (p) {
>         return p[0] === sourcecolor[0] &&
>             p[1] === sourcecolor[1] &&
>             p[2] === sourcecolor[2] &&
>             p[3] === sourcecolor[3];
>     };
> 
>     // if already filled, abort
>     if (sourcecolor[3] === 0 &&
>             this.settings.primarycolor === "transparent") {
>         return;
>     }
>     if (sourcecolor[0] === this.settings.primarycolor.r &&
>             sourcecolor[1] === this.settings.primarycolor.g &&
>             sourcecolor[2] === this.settings.primarycolor.b &&
>             sourcecolor[3] === this.settings.primarycolor.a) {
>         return;
>     }
>     if (sourcecolor[3] === 0 && this.settings.primarycolor.a === 0) {
>         return;
>     }
> 
>     while (stack.length > 0) {
>         currentpoint = stack.pop();
>         if (checkpoint(read(currentpoint))) {
>             if (currentpoint % width > 1) {
>                 stack.push(currentpoint + 1);
>                 stack.push(currentpoint - 1);
>             }
>             if (currentpoint > 0 && currentpoint < height * width) {
>                 stack.push(currentpoint + width);
>                 stack.push(currentpoint - width);
>             }
>         }
>         if (this.settings.primarycolor === "transparent") {
>             data[currentpoint * 4 + 3] = 0;
>         } else {
>             data[currentpoint * 4] = this.settings.primarycolor.r;
>             data[currentpoint * 4 + 1] = this.settings.primarycolor.g;
>             data[currentpoint * 4 + 2] = this.settings.primarycolor.b;
>             data[currentpoint * 4 + 3] = this.settings.primarycolor.a;
>         }
>     }
>     ctx.putImageData(img, 0, 0);
>     this.drawNew();
>     this.changed();
> };
> 
> PaintCanvasMorph.prototype.mouseDownLeft = function (pos) {
>     this.cacheUndo();
>     this.dragRect.origin = pos.subtract(this.bounds.origin);
>     this.dragRect.corner = pos.subtract(this.bounds.origin);
>     this.previousDragPoint = this.dragRect.corner.copy();
>     if (this.currentTool === 'crosshairs') {
>         this.rotationCenter = pos.subtract(this.bounds.origin);
>         this.drawcrosshair();
>         return;
>     }
>     if (this.currentTool === "paintbucket") {
>         return this.floodfill(pos.subtract(this.bounds.origin));
>     }
>     if (this.settings.primarycolor === "transparent" &&
>             this.currentTool !== "crosshairs") {
>         this.erasermask = newCanvas(this.extent());
>         this.merge(this.paper, this.erasermask);
>     }
> };
> 
> PaintCanvasMorph.prototype.mouseMove = function (pos) {
>     if (this.currentTool === "paintbucket") {
>         return;
>     }
> 
>     var relpos = pos.subtract(this.bounds.origin),
>         mctx = this.mask.getContext("2d"),
>         pctx = this.paper.getContext("2d"),
>         x = this.dragRect.origin.x, // original drag X
>         y = this.dragRect.origin.y, // original drag y
>         p = relpos.x,               // current drag x
>         q = relpos.y,               // current drag y
>         w = (p - x) / 2,            // half the rect width
>         h = (q - y) / 2,            // half the rect height
>         i,                          // iterator number
>         width = this.paper.width;
> 
>     mctx.save();
>     function newW() {
>         return Math.max(Math.abs(w), Math.abs(h)) * (w / Math.abs(w));
>     }
>     function newH() {
>         return Math.max(Math.abs(w), Math.abs(h)) * (h / Math.abs(h));
>     }
>     this.brushBuffer.push([p, q]);
>     mctx.lineWidth = this.settings.linewidth;
>     mctx.clearRect(0, 0, this.bounds.width(), this.bounds.height()); // mask
> 
>     this.dragRect.corner = relpos.subtract(this.dragRect.origin); // reset crn
> 
>     if (this.settings.primarycolor === "transparent" &&
>             this.currentTool !== "crosshairs") {
>         this.merge(this.erasermask, this.mask);
>         pctx.clearRect(0, 0, this.bounds.width(), this.bounds.height());
>         mctx.globalCompositeOperation = "destination-out";
>     } else {
>         mctx.fillStyle = this.settings.primarycolor.toString();
>         mctx.strokeStyle = this.settings.primarycolor.toString();
>     }
>     switch (this.currentTool) {
>     case "rectangle":
>         if (this.isShiftPressed()) {
>             mctx.strokeRect(x, y, newW() * 2, newH() * 2);
>         } else {
>             mctx.strokeRect(x, y, w * 2, h * 2);
>         }
>         break;
>     case "rectangleSolid":
>         if (this.isShiftPressed()) {
>             mctx.fillRect(x, y, newW() * 2, newH() * 2);
>         } else {
>             mctx.fillRect(x, y, w * 2, h * 2);
>         }
>         break;
>     case "brush":
>         mctx.lineCap = "round";
>         mctx.lineJoin = "round";
>         mctx.beginPath();
>         mctx.moveTo(this.brushBuffer[0][0], this.brushBuffer[0][1]);
>         for (i = 0; i < this.brushBuffer.length; i += 1) {
>             mctx.lineTo(this.brushBuffer[i][0], this.brushBuffer[i][1]);
>         }
>         mctx.stroke();
>         break;
>     case "line":
>         mctx.beginPath();
>         mctx.moveTo(x, y);
>         if (this.isShiftPressed()) {
>             if (Math.abs(h) > Math.abs(w)) {
>                 mctx.lineTo(x, q);
>             } else {
>                 mctx.lineTo(p, y);
>             }
>         } else {
>             mctx.lineTo(p, q);
>         }
>         mctx.stroke();
>         break;
>     case "circle":
>     case "circleSolid":
>         mctx.beginPath();
>         if (this.isShiftPressed()) {
>             mctx.arc(
>                 x,
>                 y,
>                 new Point(x, y).distanceTo(new Point(p, q)),
>                 0,
>                 Math.PI * 2,
>                 false
>             );
>         } else {
>             for (i = 0; i < width; i += 1) {
>                 mctx.lineTo(
>                     i,
>                     (2 * h) * Math.sqrt(2 - Math.pow(
>                         (i - x) / (2 * w),
>                         2
>                     )) + y
>                 );
>             }
>             for (i = width; i > 0; i -= 1) {
>                 mctx.lineTo(
>                     i,
>                     -1 * (2 * h) * Math.sqrt(2 - Math.pow(
>                         (i - x) / (2 * w),
>                         2
>                     )) + y
>                 );
>             }
>         }
>         mctx.closePath();
>         if (this.currentTool === "circleSolid") {
>             mctx.fill();
>         } else {
>             if (this.currentTool === "circle") {
>                 mctx.stroke();
>             }
>         }
>         break;
>     case "crosshairs":
>         this.rotationCenter = relpos.copy();
>         this.drawcrosshair(mctx);
>         break;
>     case "eraser":
>         this.merge(this.paper, this.mask);
>         mctx.save();
>         mctx.globalCompositeOperation = "destination-out";
>         mctx.beginPath();
>         mctx.moveTo(this.brushBuffer[0][0], this.brushBuffer[0][1]);
>         for (i = 0; i < this.brushBuffer.length; i += 1) {
>             mctx.lineTo(this.brushBuffer[i][0], this.brushBuffer[i][1]);
>         }
>         mctx.stroke();
>         mctx.restore();
>         this.paper = newCanvas(this.extent());
>         this.merge(this.mask, this.paper);
>         break;
>     default:
>         nop();
>     }
>     this.previousDragPoint = relpos;
>     this.drawNew();
>     this.changed();
>     mctx.restore();
> };
> 
> PaintCanvasMorph.prototype.mouseClickLeft = function () {
>     if (this.currentTool !== "crosshairs") {
>         this.merge(this.mask, this.paper);
>     }
>     this.brushBuffer = [];
> };
> 
> PaintCanvasMorph.prototype.mouseLeaveDragging
>     = PaintCanvasMorph.prototype.mouseClickLeft;
> 
> PaintCanvasMorph.prototype.buildContents = function () {
>     this.background = newCanvas(this.extent());
>     this.paper = newCanvas(this.extent());
>     this.mask = newCanvas(this.extent());
>     this.erasermask = newCanvas(this.extent());
>     var i, j, bkctx = this.background.getContext("2d");
>     for (i = 0; i < this.background.width; i += 5) {
>         for (j = 0; j < this.background.height; j += 5) {
>             if ((i + j) / 5 % 2 === 1) {
>                 bkctx.fillStyle = "rgba(255, 255, 255, 1)";
>             } else {
>                 bkctx.fillStyle = "rgba(255, 255, 255, 0.3)";
>             }
>             bkctx.fillRect(i, j, 5, 5);
>         }
>     }
> };
> 
> PaintCanvasMorph.prototype.drawNew = function () {
>     var can = newCanvas(this.extent());
>     this.merge(this.background, can);
>     this.merge(this.paper, can);
>     this.merge(this.mask, can);
>     this.image = can;
>     this.drawFrame();
> };
> 
> PaintCanvasMorph.prototype.drawFrame = function () {
>     var context, borderColor;
> 
>     context = this.image.getContext('2d');
>     if (this.parent) {
>         this.color = this.parent.color.lighter(this.contrast * 0.75);
>         borderColor = this.parent.color;
>     } else {
>         borderColor = new Color(120, 120, 120);
>     }
>     context.fillStyle = this.color.toString();
> 
>     // cache my border colors
>     this.cachedClr = borderColor.toString();
>     this.cachedClrBright = borderColor.lighter(this.contrast)
>         .toString();
>     this.cachedClrDark = borderColor.darker(this.contrast).toString();
>     this.drawRectBorder(context);
> };
> 
> PaintCanvasMorph.prototype.drawRectBorder
>     = InputFieldMorph.prototype.drawRectBorder;
> 
> PaintCanvasMorph.prototype.edge
>     = InputFieldMorph.prototype.edge;
> 
> PaintCanvasMorph.prototype.fontSize
>     = InputFieldMorph.prototype.fontSize;
> 
> PaintCanvasMorph.prototype.typeInPadding
>     = InputFieldMorph.prototype.typeInPadding;
> 
> PaintCanvasMorph.prototype.contrast
>     = InputFieldMorph.prototype.contrast;

> sha512.js ----------------------


> store.js ----------------------

10c10
<     Copyright (C) 2013 by Jens Mönig
---
>     Copyright (C) 2014 by Jens Mönig
64c64
< modules.store = '2013-December-19';
---
> modules.store = '2014-February-13';
68,77d67
< /**
< * I am an abstract protype for my heirs.
< 
<     I manage object identities and keep track of circular data structures.
<     Objects are "touched" and a property named "serializationID" is added
<     to each, representing an index integer in the list, starting with 1.
< *
< * @class XML_Serializer
< * @constructor
< */
254,259c244
< /**
< * SnapSerializer inherits from XML_Serializer:
< *
< * @class SnapSerializer
< * @constructor
< */
---
> 
296d280
<     this.help = {};
335a320
> 
337d321
<     
340,348d323
<     try{
<         console.log(model.project.childNamed('help').contents);
<         $("#help_text").html(model.project.childNamed('help').contents);
<     }catch(e){
<         $("#help_text").html('<form method="post"><textarea></textarea></form>');
<         tinymce.init({
<             selector: "textarea"
<         });
<     };
404a380,388
>     StageMorph.prototype.dimensions = new Point(480, 360);
>     if (model.stage.attributes.width) {
>         StageMorph.prototype.dimensions.x =
>             Math.max(+model.stage.attributes.width, 480);
>     }
>     if (model.stage.attributes.height) {
>         StageMorph.prototype.dimensions.y =
>             Math.max(+model.stage.attributes.height, 180);
>     }
405a390,391
>     SpriteMorph.prototype.useFlatLineEnds =
>         model.stage.attributes.lines === 'flat';
1328,1329d1313
<         console.log('>>><<<<');
<         console.log(item);
1369c1353,1355
<             '<stage name="@" costume="@" tempo="@" threadsafe="@" ' +
---
>             '<stage name="@" width="@" height="@" ' +
>             'costume="@" tempo="@" threadsafe="@" ' +
>             'lines="@" ' +
1390a1377,1378
>         StageMorph.prototype.dimensions.x,
>         StageMorph.prototype.dimensions.y,
1393a1382
>         SpriteMorph.prototype.useFlatLineEnds ? 'flat' : 'round',

> threads.js ----------------------

12c12
<     Copyright (C) 2013 by Jens Mönig
---
>     Copyright (C) 2014 by Jens Mönig
86c86
< modules.threads = '2013-December-11';
---
> modules.threads = '2014-Feb-10';
114c114
<     // handle text comparision text-insensitive.
---
>     // handle text comparision case-insensitive.
123,128c123
< /**
< * This is the description for my class.
< *
< * @class ThreadManager
< * @constructor
< */
---
> 
159c154,155
< ThreadManager.prototype.stopAll = function () {
---
> ThreadManager.prototype.stopAll = function (excpt) {
>     // excpt is optional
161c157,159
<         proc.stop();
---
>         if (proc !== excpt) {
>             proc.stop();
>         }
165c163,164
< ThreadManager.prototype.stopAllForReceiver = function (rcvr) {
---
> ThreadManager.prototype.stopAllForReceiver = function (rcvr, excpt) {
>     // excpt is optional
167c166
<         if (proc.homeContext.receiver === rcvr) {
---
>         if (proc.homeContext.receiver === rcvr && proc !== excpt) {
261,280d259
< /**
< * A Process is what brings a stack of blocks to life. The process
<     keeps track of which block to run next, evaluates block arguments,
<     handles control structures, and so forth.
< 
<     The ThreadManager is the (passive) scheduler, telling each process
<     when to run by calling its runStep() method. The runStep() method
<     will execute some number of blocks, then voluntarily yield control
<     so that the ThreadManager can run another process.
< 
<     The Scratch etiquette is that a process should yield control at the
<     end of every loop iteration, and while it is running a timed command
<     (e.g. "wait 5 secs") or a synchronous command (e.g. "broadcast xxx
<     and wait"). Since Snap also has lambda and custom blocks Snap adds
<     yields at the beginning of each non-atomic custom command block
<     execution, and - to let users escape infinite loops and recursion -
<     whenever the process runs into a timeout.
< 
<     a Process runs for a receiver, i.e. a sprite or the stage or any
<     blocks-scriptable object that we'll introduce.
282,308d260
<     structure:
< 
<         topBlock            the stack's first block, of which all others
<                             are children
<         receiver            object (sprite) to which the process applies,
<                             cached from the top block
<         context                the Context describing the current state
<                             of this process
<         homeContext            stores information relevant to the whole process,
<                             i.e. its receiver, result etc.
<         isPaused            boolean indicating whether to pause
<         readyToYield        boolean indicating whether to yield control to
<                             another process
<         readyToTerminate    boolean indicating whether the stop method has
<                             been called
<         isDead              boolean indicating a terminated clone process
<         timeout                msecs after which to force yield
<         lastYield            msecs when the process last yielded
<         errorFlag            boolean indicating whether an error was encountered
<         prompter            active instance of StagePrompterMorph
<         httpRequest         active instance of an HttpRequest or null
<         pauseOffset         msecs between the start of an interpolated operation
<                             and when the process was paused
< *
< * @class Process
< * @constructor
< */
1422a1375,1412
> Process.prototype.doStopThis = function (choice) {
>     switch (this.inputOption(choice)) {
>     case 'all':
>         this.doStopAll();
>         break;
>     case 'this script':
>         this.doStop();
>         break;
>     case 'this block':
>         this.doStopBlock();
>         break;
>     default:
>         nop();
>     }
> };
> 
> Process.prototype.doStopOthers = function (choice) {
>     var stage;
>     if (this.homeContext.receiver) {
>         stage = this.homeContext.receiver.parentThatIsA(StageMorph);
>         if (stage) {
>             switch (this.inputOption(choice)) {
>             case 'all but this script':
>                 stage.threads.stopAll(this);
>                 break;
>             case 'other scripts in sprite':
>                 stage.threads.stopAllForReceiver(
>                     this.homeContext.receiver,
>                     this
>                 );
>                 break;
>             default:
>                 nop();
>             }
>         }
>     }
> };
> 
1656,1657c1646,1647
<             this.homeContext.receiver.xPosition(),
<             this.homeContext.receiver.yPosition()
---
>             this.blockReceiver().xPosition(),
>             this.blockReceiver().yPosition()
1661c1651
<         this.homeContext.receiver.gotoXY(endX, endY);
---
>         this.blockReceiver().gotoXY(endX, endY);
1664c1654
<     this.homeContext.receiver.glide(
---
>     this.blockReceiver().glide(
1679c1669
<         this.homeContext.receiver.bubble(data);
---
>         this.blockReceiver().bubble(data);
1682c1672
<         this.homeContext.receiver.stopTalking();
---
>         this.blockReceiver().stopTalking();
1692c1682
<         this.homeContext.receiver.doThink(data);
---
>         this.blockReceiver().doThink(data);
1695c1685
<         this.homeContext.receiver.stopTalking();
---
>         this.blockReceiver().stopTalking();
1701a1692,1696
> Process.prototype.blockReceiver = function () {
>     return this.context ? this.context.receiver || this.homeContext.receiver
>             : this.homeContext.receiver;
> };
> 
1736c1731
<         isStage = this.homeContext.receiver instanceof StageMorph,
---
>         isStage = this.blockReceiver() instanceof StageMorph,
1746c1741
<                 this.homeContext.receiver.bubble(data, false, true);
---
>                 this.blockReceiver().bubble(data, false, true);
1766c1761
<             if (!isStage) {this.homeContext.receiver.stopTalking(); }
---
>             if (!isStage) {this.blockReceiver().stopTalking(); }
2301c2296
<     var thisObj = this.homeContext.receiver;
---
>     var thisObj = this.blockReceiver();
2397c2392
<     var thisObj = this.homeContext.receiver,
---
>     var thisObj = this.blockReceiver(),
2420c2415
<     var thisObj = this.homeContext.receiver,
---
>     var thisObj = this.blockReceiver(),
2431a2427,2429
>             if (attribute instanceof Context) {
>                 return this.reportContextFor(attribute, thatObj);
>             }
2455a2454,2465
> Process.prototype.reportContextFor = function (context, otherObj) {
>     // Private - return a copy of the context
>     // and bind it to another receiver
>     var result = copy(context);
>     result.receiver = otherObj;
>     if (result.outerContext) {
>         result.outerContext = copy(result.outerContext);
>         result.outerContext.receiver = otherObj;
>     }
>     return result;
> };
> 
2528a2539,2567
> // Process Dates and times in Snap
> // Map block options to built-in functions
> var dateMap = {
>     'year' : 'getFullYear',
>     'month' : 'getMonth',
>     'date': 'getDate',
>     'day of week' : 'getDay',
>     'hour' : 'getHours',
>     'minute' : 'getMinutes',
>     'second' : 'getSeconds',
>     'time in milliseconds' : 'getTime'
> };
> 
> Process.prototype.reportDate = function (datefn) {
>     var inputFn = this.inputOption(datefn),
>         currDate = new Date(),
>         func = dateMap[inputFn],
>         result = currDate[func]();
> 
>     if (!dateMap[inputFn]) { return ''; }
> 
>     // Show months as 1-12 and days as 1-7
>     if (inputFn === 'month' || inputFn === 'day of week') {
>         result += 1;
>     }
> 
>     return result;
> };
> 
2710,2711d2748
< /**
< * A Context describes the state of a Process.
2713,2742d2749
<     Each Process has a pointer to a Context containing its
<     state. Whenever the Process yields control, its Context
<     tells it exactly where it left off.
< 
<     structure:
< 
<         parentContext    the Context to return to when this one has
<                         been evaluated.
<         outerContext    the Context holding my lexical scope
<         expression        SyntaxElementMorph, an array of blocks to evaluate,
<                         null or a String denoting a selector, e.g. 'doYield'
<         receiver        the object to which the expression applies, if any
<         variables        the current VariableFrame, if any
<         upvars          the current UpvarReference, if any (default: null)
<         inputs            an array of input values computed so far
<                         (if expression is a    BlockMorph)
<         pc                the index of the next block to evaluate
<                         (if expression is an array)
<         startTime        time when the context was first evaluated
<         startValue        initial value for interpolated operations
<         activeAudio     audio buffer for interpolated operations, don't persist
<         activeNote      audio oscillator for interpolated ops, don't persist
<         isLambda        marker for return ops
<         isImplicitLambda    marker for return ops
<         isCustomBlock   marker for return ops
<         emptySlots        caches the number of empty slots for reification
< *
< * @class Context
< * @constructor
< */
2930,2935c2937
< /**
< * This is the description for my class.
< *
< * @class VariableFrame
< * @constructor
< */
---
> 
3112,3117c3114
< /**
< * quasi-inherits some features from VariableFrame
< *
< * @class UpvarReference
< * @constructor
< */
---
> 

> widgets.js ----------------------

10c10
<     Copyright (C) 2013 by Jens Mönig
---
>     Copyright (C) 2014 by Jens Mönig
77c77
< modules.widgets = '2013-November-26';
---
> modules.widgets = '2014-February-13';
89,94c89
< /**
< * I am a Button with rounded corners and 3D-ish graphical effects
< *
< * @class PushButtonMorph
< * @constructor
< */
---
> 
475,482c470
< /**
< * I am a two-state PushButton. When my state is "true" I keep my "pressed"
<     background color. I can also be set to not auto-layout my bounds, in
<     which case my label will left-align.
< *
< * @class ToggleButtonMorph
< * @constructor
< */
---
> 
912,917c900
< /**
< * TabMorph inherits from ToggleButtonMorph
< *
< * @class TabMorph
< * @constructor
< */
---
> 
1030,1040c1013
< /**
< * I am a PushButton which toggles a check mark ( becoming check box)
<     or a bullet (becoming a radio button). I can have both or either an
<     additional label and an additional pictogram, whereas the pictogram
<     can be either an instance of (any) Morph, in which case the pictogram
<     will be an interactive toggle itself or a Canvas, in which case it
<     is just going to be a picture.
< *
< * @class ToggleMorph
< * @constructor
< */
---
> 
1291,1299d1263
< /**
< * I am a picture of a Morph ("element") which acts as a toggle button.
<     I am different from ToggleButton in that I neither create a label nor
<     draw button outlines. Instead I display my element morph in specified
<     contrasts of a given color, symbolizing whether it is selected or not
< *
< * @class ToggleElementMorph
< * @constructor
< */
1467,1468d1430
< /**
< *  I am a DialogBox frame.
1470,1477d1431
<     Note:
<     -----
<         my key property keeps track of my purpose to prevent multiple instances
<         on the same or similar objects
< *
< * @class DialogBoxMorph
< * @constructor
< */
1808a1763,1869
> DialogBoxMorph.prototype.promptVector = function (
>     title,
>     point,
>     deflt,
>     xLabel,
>     yLabel,
>     world,
>     pic,
>     msg
> ) {
>     var vec = new AlignmentMorph('row', 4),
>         xInp = new InputFieldMorph(point.x.toString(), true),
>         yInp = new InputFieldMorph(point.y.toString(), true),
>         xCol = new AlignmentMorph('column', 2),
>         yCol = new AlignmentMorph('column', 2),
>         inp = new AlignmentMorph('column', 2),
>         bdy = new AlignmentMorph('column', this.padding);
> 
>     function labelText(string) {
>         return new TextMorph(
>             localize(string),
>             10,
>             null, // style
>             false, // bold
>             null, // italic
>             null, // alignment
>             null, // width
>             null, // font name
>             MorphicPreferences.isFlat ? null : new Point(1, 1),
>             new Color(255, 255, 255) // shadowColor
>         );
>     }
> 
>     inp.alignment = 'left';
>     inp.setColor(this.color);
>     bdy.setColor(this.color);
>     xCol.alignment = 'left';
>     xCol.setColor(this.color);
>     yCol.alignment = 'left';
>     yCol.setColor(this.color);
> 
>     xCol.add(labelText(xLabel));
>     xCol.add(xInp);
>     yCol.add(labelText(yLabel));
>     yCol.add(yInp);
>     vec.add(xCol);
>     vec.add(yCol);
>     inp.add(vec);
> 
>     if (msg) {
>         bdy.add(labelText(msg));
>     }
> 
>     bdy.add(inp);
> 
>     vec.fixLayout();
>     xCol.fixLayout();
>     yCol.fixLayout();
>     inp.fixLayout();
>     bdy.fixLayout();
> 
>     this.labelString = title;
>     this.createLabel();
>     if (pic) {this.setPicture(pic); }
> 
>     this.addBody(bdy);
> 
>     vec.drawNew();
>     xCol.drawNew();
>     xInp.drawNew();
>     yCol.drawNew();
>     yInp.drawNew();
>     bdy.fixLayout();
> 
>     this.addButton('ok', 'OK');
> 
>     if (deflt instanceof Point) {
>         this.addButton(
>             function () {
>                 xInp.setContents(deflt.x.toString());
>                 yInp.setContents(deflt.y.toString());
>             },
>             'Default'
> 
>         );
>     }
> 
>     this.addButton('cancel', 'Cancel');
>     this.fixLayout();
>     this.drawNew();
>     this.fixLayout();
> 
>     this.edit = function () {
>         xInp.edit();
>     };
> 
>     this.getInput = function () {
>         return new Point(xInp.getValue(), yInp.getValue());
>     };
> 
>     if (!this.key) {
>         this.key = 'vector' + title;
>     }
> 
>     this.popUp(world);
> };
> 
2803,2808c2864
< /**
< * I am a reified layout, either a row or a column of submorphs
< *
< * @class AlignmentMorph
< * @constructor
< */
---
> 
2884,2889c2940
< /**
< * This is the description for my class.
< *
< * @class InputFieldMorph
< * @constructor
< */
---
> 

> xml.js ----------------------

2,62c2,62
<  
<  xml.js
<  
<  a simple XML DOM, encoder and parser for morphic.js
<  
<  written by Jens Mönig
<  jens@moenig.org
<  
<  Copyright (C) 2013 by Jens Mönig
<  
<  This file is part of Snap!.
<  
<  Snap! is free software: you can redistribute it and/or modify
<  it under the terms of the GNU Affero General Public License as
<  published by the Free Software Foundation, either version 3 of
<  the License, or (at your option) any later version.
<  
<  This program is distributed in the hope that it will be useful,
<  but WITHOUT ANY WARRANTY; without even the implied warranty of
<  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
<  GNU Affero General Public License for more details.
<  
<  You should have received a copy of the GNU Affero General Public License
<  along with this program.  If not, see <http://www.gnu.org/licenses/>.
<  
<  
<  prerequisites:
<  --------------
<  needs morphic.js
<  
<  
<  hierarchy
<  ---------
<  the following tree lists all constructors hierarchically,
<  indentation indicating inheritance. Refer to this list to get a
<  contextual overview:
<  
<  Node*
<  XML_Element
<  ReadStream
<  
<  * defined in morphic.js
<  
<  
<  toc
<  ---
<  the following list shows the order in which all constructors are
<  defined. Use this list to locate code in this document:
<  
<  ReadStream
<  XML_Element
<  
<  
<  credits
<  -------
<  Nathan Dinsmore contributed to the design and implemented a first
<  working version of a complete XMLSerializer. I have taken much of the
<  overall design and many of the functions and methods in this file from
<  Nathan's fine original prototype.
<  
<  */
---
> 
>     xml.js
> 
>     a simple XML DOM, encoder and parser for morphic.js
> 
>     written by Jens Mönig
>     jens@moenig.org
> 
>     Copyright (C) 2014 by Jens Mönig
> 
>     This file is part of Snap!.
> 
>     Snap! is free software: you can redistribute it and/or modify
>     it under the terms of the GNU Affero General Public License as
>     published by the Free Software Foundation, either version 3 of
>     the License, or (at your option) any later version.
> 
>     This program is distributed in the hope that it will be useful,
>     but WITHOUT ANY WARRANTY; without even the implied warranty of
>     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
>     GNU Affero General Public License for more details.
> 
>     You should have received a copy of the GNU Affero General Public License
>     along with this program.  If not, see <http://www.gnu.org/licenses/>.
> 
> 
>     prerequisites:
>     --------------
>     needs morphic.js
> 
> 
>     hierarchy
>     ---------
>     the following tree lists all constructors hierarchically,
>     indentation indicating inheritance. Refer to this list to get a
>     contextual overview:
> 
>         Node*
>             XML_Element
>         ReadStream
> 
>     * defined in morphic.js
> 
> 
>     toc
>     ---
>     the following list shows the order in which all constructors are
>     defined. Use this list to locate code in this document:
> 
>         ReadStream
>         XML_Element
> 
> 
>     credits
>     -------
>     Nathan Dinsmore contributed to the design and implemented a first
>     working version of a complete XMLSerializer. I have taken much of the
>     overall design and many of the functions and methods in this file from
>     Nathan's fine original prototype.
> 
> */
68c68
< modules.xml = '2013-April-19';
---
> modules.xml = '2014-January-09';
76,81c76
< /**
<  * I am a sequential reading interface to an Array or String
<  *
<  * @class ReadStream
<  * @constructor
<  */
---
> 
97,98c92,93
< ReadStream.prototype.next = function(count) {
<     var element;
---
> ReadStream.prototype.next = function (count) {
>     var element, start;
104c99,101
<     return this.contents.slice(this.index, this.index += count);
---
>     start = this.index;
>     this.index += count;
>     return this.contents.slice(start, this.index);
107c104
< ReadStream.prototype.peek = function() {
---
> ReadStream.prototype.peek = function () {
111c108
< ReadStream.prototype.skip = function(count) {
---
> ReadStream.prototype.skip = function (count) {
115c112
< ReadStream.prototype.atEnd = function() {
---
> ReadStream.prototype.atEnd = function () {
121,125c118,121
< ReadStream.prototype.upTo = function(regex) {
<     if (!isString(this.contents)) {
<         return '';
<     }
<     var i = this.contents.substr(this.index).search(regex);
---
> ReadStream.prototype.upTo = function (regex) {
>     var i, start;
>     if (!isString(this.contents)) {return ''; }
>     i = this.contents.substr(this.index).search(regex);
129c125,127
<     return this.contents.substring(this.index, this.index += i);
---
>     start = this.index;
>     this.index += i;
>     return this.contents.substring(start, this.index);
132,135c130,131
< ReadStream.prototype.peekUpTo = function(regex) {
<     if (!isString(this.contents)) {
<         return '';
<     }
---
> ReadStream.prototype.peekUpTo = function (regex) {
>     if (!isString(this.contents)) {return ''; }
143,148c139,142
< ReadStream.prototype.skipSpace = function() {
<     if (!isString(this.contents)) {
<         return '';
<     }
<     var ch;
<     while (this.space.test(ch = this.peek()) && ch !== '') {
---
> ReadStream.prototype.skipSpace = function () {
>     if (!isString(this.contents)) {return ''; }
>     var ch = this.peek();
>     while (this.space.test(ch) && ch !== '') {
149a144
>         ch = this.peek();
153,157c148,151
< ReadStream.prototype.word = function() {
<     if (!isString(this.contents)) {
<         return '';
<     }
<     var i = this.contents.substr(this.index).search(/[\s\>\/\=]|$/);
---
> ReadStream.prototype.word = function () {
>     var i, start;
>     if (!isString(this.contents)) {return ''; }
>     i = this.contents.substr(this.index).search(/[\s\>\/\=]|$/);
161c155,157
<     return this.contents.substring(this.index, this.index += i);
---
>     start = this.index;
>     this.index += i;
>     return this.contents.substring(start, this.index);
165,172d160
< /**
<  * I am a DOM-Node which can encode itself to as well as parse itself
<  from a well-formed XML string. Note that there is no separate parser
<  object, all the parsing can be done in a single object.
<  *
<  * @class XML_Element
<  * @constructor
<  */
174,177c162,165
<  I am a DOM-Node which can encode itself to as well as parse itself
<  from a well-formed XML string. Note that there is no separate parser
<  object, all the parsing can be done in a single object.
<  */
---
>     I am a DOM-Node which can encode itself to as well as parse itself
>     from a well-formed XML string. Note that there is no separate parser
>     object, all the parsing can be done in a single object.
> */
195c183
< XML_Element.prototype.init = function(tag, contents, parent) {
---
> XML_Element.prototype.init = function (tag, contents, parent) {
212c200
< XML_Element.prototype.require = function(tagName) {
---
> XML_Element.prototype.require = function (tagName) {
222c210
< XML_Element.prototype.childNamed = function(tagName) {
---
> XML_Element.prototype.childNamed = function (tagName) {
225,228c213,214
<             this.children,
<             function(child) {
<                 return child.tag === tagName;
<             }
---
>         this.children,
>         function (child) {return child.tag === tagName; }
232c218
< XML_Element.prototype.childrenNamed = function(tagName) {
---
> XML_Element.prototype.childrenNamed = function (tagName) {
235,237c221
<             function(child) {
<                 return child.tag === tagName;
<             }
---
>         function (child) {return child.tag === tagName; }
241c225
< XML_Element.prototype.parentNamed = function(tagName) {
---
> XML_Element.prototype.parentNamed = function (tagName) {
254c238
< XML_Element.prototype.toString = function(isFormatted, indentationLevel) {
---
> XML_Element.prototype.toString = function (isFormatted, indentationLevel) {
256,259c240,243
<             indent = '',
<             level = indentationLevel || 0,
<             key,
<             i;
---
>         indent = '',
>         level = indentationLevel || 0,
>         key,
>         i;
286c270
<         this.children.forEach(function(element) {
---
>         this.children.forEach(function (element) {
300c284
< XML_Element.prototype.escape = function(string, ignoreQuotes) {
---
> XML_Element.prototype.escape = function (string, ignoreQuotes) {
302,304c286,288
<             result = '',
<             i,
<             ch;
---
>         result = '',
>         i,
>         ch;
308,330c292,314
<             case '\'':
<                 result += '&apos;';
<                 break;
<             case '\"':
<                 result += ignoreQuotes ? ch : '&quot;';
<                 break;
<             case '<':
<                 result += '&lt;';
<                 break;
<             case '>':
<                 result += '&gt;';
<                 break;
<             case '&':
<                 result += '&amp;';
<                 break;
<             case '\n': // escape CR b/c of export to URL feature
<                 result += '&#xD;';
<                 break;
<             case '~': // escape tilde b/c it's overloaded in serializer.store()
<                 result += '&#126;';
<                 break;
<             default:
<                 result += ch;
---
>         case '\'':
>             result += '&apos;';
>             break;
>         case '\"':
>             result += ignoreQuotes ? ch : '&quot;';
>             break;
>         case '<':
>             result += '&lt;';
>             break;
>         case '>':
>             result += '&gt;';
>             break;
>         case '&':
>             result += '&amp;';
>             break;
>         case '\n': // escape CR b/c of export to URL feature
>             result += '&#xD;';
>             break;
>         case '~': // escape tilde b/c it's overloaded in serializer.store()
>             result += '&#126;';
>             break;
>         default:
>             result += ch;
336c320
< XML_Element.prototype.unescape = function(string) {
---
> XML_Element.prototype.unescape = function (string) {
338,340c322,324
<             result = '',
<             ch,
<             esc;
---
>         result = '',
>         ch,
>         esc;
353,375c337,359
<                 case 'apos':
<                     nextPut('\'');
<                     break;
<                 case 'quot':
<                     nextPut('\"');
<                     break;
<                 case 'lt':
<                     nextPut('<');
<                     break;
<                 case 'gt':
<                     nextPut('>');
<                     break;
<                 case 'amp':
<                     nextPut('&');
<                     break;
<                 case '#xD':
<                     nextPut('\n');
<                     break;
<                 case '#126':
<                     nextPut('~');
<                     break;
<                 default:
<                     result += ch;
---
>             case 'apos':
>                 nextPut('\'');
>                 break;
>             case 'quot':
>                 nextPut('\"');
>                 break;
>             case 'lt':
>                 nextPut('<');
>                 break;
>             case 'gt':
>                 nextPut('>');
>                 break;
>             case 'amp':
>                 nextPut('&');
>                 break;
>             case '#xD':
>                 nextPut('\n');
>                 break;
>             case '#126':
>                 nextPut('~');
>                 break;
>             default:
>                 result += ch;
386c370
< XML_Element.prototype.parseString = function(string) {
---
> XML_Element.prototype.parseString = function (string) {
393c377
< XML_Element.prototype.parseStream = function(stream) {
---
> XML_Element.prototype.parseStream = function (stream) {
395,397c379,381
<             value,
<             ch,
<             child;
---
>         value,
>         ch,
>         child;
404c388,389
<     while ((ch = stream.peek()) !== '>' && ch !== '/') {
---
>     ch = stream.peek();
>     while (ch !== '>' && ch !== '/') {
411c396,397
<         if ((ch = stream.next()) !== '"' && ch !== "'") {
---
>         ch = stream.next();
>         if (ch !== '"' && ch !== "'") {
413,414c399,400
<                     'Expected single- or double-quoted attribute value'
<                     );
---
>                 'Expected single- or double-quoted attribute value'
>             );
419a406
>         ch = stream.peek();
455,556d441
< 
< // Converts XML to JSON
< // from: http://coursesweb.net/javascript/convert-xml-json-javascript_s2
< function XMLtoJSON() {
<     var me = this;      // stores the object instantce
< 
<     // gets the content of an xml file and returns it in 
<     me.fromFile = function(xml, rstr) {
<         // Cretes a instantce of XMLHttpRequest object
<         var xhttp = (window.XMLHttpRequest) ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
<         // sets and sends the request for calling "xml"
<         xhttp.open("GET", xml, false);
<         xhttp.send(null);
< 
<         // gets the JSON string
<         var json_str = jsontoStr(setJsonObj(xhttp.responseXML));
< 
<         // sets and returns the JSON object, if "rstr" undefined (not passed), else, returns JSON string
<         return (typeof(rstr) == 'undefined') ? JSON.parse(json_str) : json_str;
<     }
< 
<     // returns XML DOM from string with xml content
<     me.fromStr = function(xml, rstr) {
<         // for non IE browsers
<         if (window.DOMParser) {
<             var getxml = new DOMParser();
<             var xmlDoc = getxml.parseFromString(xml, "text/xml");
<         }
<         else {
<             // for Internet Explorer
<             var xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
<             xmlDoc.async = "false";
<         }
< 
<         // gets the JSON string
<         var json_str = jsontoStr(setJsonObj(xmlDoc));
< 
<         // sets and returns the JSON object, if "rstr" undefined (not passed), else, returns JSON string
<         return (typeof(rstr) == 'undefined') ? JSON.parse(json_str) : json_str;
<     }
< 
<     // receives XML DOM object, returns converted JSON object
<     var setJsonObj = function(xml) {
<         var js_obj = {};
<         if (xml.nodeType == 1) {
<             if (xml.attributes.length > 0) {
<                 js_obj["@attributes"] = {};
<                 for (var j = 0; j < xml.attributes.length; j++) {
<                     var attribute = xml.attributes.item(j);
<                     js_obj["@attributes"][attribute.nodeName] = attribute.value;
<                 }
<             }
<         } else if (xml.nodeType == 3) {
<             js_obj = xml.nodeValue;
<         }
<         if (xml.hasChildNodes()) {
<             for (var i = 0; i < xml.childNodes.length; i++) {
<                 var item = xml.childNodes.item(i);
<                 var nodeName = item.nodeName;
<                 if (typeof(js_obj[nodeName]) == "undefined") {
<                     js_obj[nodeName] = setJsonObj(item);
<                 } else {
<                     if (typeof(js_obj[nodeName].push) == "undefined") {
<                         var old = js_obj[nodeName];
<                         js_obj[nodeName] = [];
<                         js_obj[nodeName].push(old);
<                     }
<                     js_obj[nodeName].push(setJsonObj(item));
<                 }
<             }
<         }
<         return js_obj;
<     }
< 
<     // converts JSON object to string (human readablle).
<     // Removes '\t\r\n', rows with multiples '""', multiple empty rows, '  "",', and "  ",; replace empty [] with ""
<     var jsontoStr = function(js_obj) {
<         var rejsn = JSON.stringify(js_obj, undefined, 2).replace(/(\\t|\\r|\\n)/g, '').replace(/"",[\n\t\r\s]+""[,]*/g, '').replace(/(\n[\t\s\r]*\n)/g, '').replace(/[\s\t]{2,}""[,]{0,1}/g, '').replace(/"[\s\t]{1,}"[,]{0,1}/g, '').replace(/\[[\t\s]*\]/g, '""');
<         return (rejsn.indexOf('"parsererror": {') == -1) ? rejsn : 'Invalid XML format';
<     }
< }
< ;
< 
< // creates object instantce of XMLtoJSON
< var xml2json = new XMLtoJSON();
< 
< 
< function parseMobinet(xmlObject) {
<     var rssentries = xmlObject.getElementsByTagName("block");
<     var output='';
<     for (var i = 0; i < rssentries.length; i++) {
<         output += rssentries[i].getAttribute('s')+'\n';
< //        params=rssentries[i].getElementsByTagName("l");
< //        if(params.length){
< //             for (var j = 0; j < params.length; j++) {
< //                 output+='('+params[j].nodeValue+')';
< //             }
< //        }
<     }
< 
<     return output;
< }
\ No newline at end of file

> ypr.js ----------------------

